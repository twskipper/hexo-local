{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/app-touch-icon.png","path":"app-touch-icon.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/s/03/apache_1-150x91.png","path":"s/03/apache_1-150x91.png","modified":0,"renderable":0},{"_id":"source/s/03/apache_1-60x60.png","path":"s/03/apache_1-60x60.png","modified":0,"renderable":0},{"_id":"source/s/03/apache_1.png","path":"s/03/apache_1.png","modified":0,"renderable":0},{"_id":"source/s/03/mysql_1-150x93.png","path":"s/03/mysql_1-150x93.png","modified":0,"renderable":0},{"_id":"source/s/03/mysql_1-60x60.png","path":"s/03/mysql_1-60x60.png","modified":0,"renderable":0},{"_id":"source/s/03/mysql_1.png","path":"s/03/mysql_1.png","modified":0,"renderable":0},{"_id":"source/s/09/2_full.png","path":"s/09/2_full.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/s/pigu.jpg","path":"s/pigu.jpg","modified":0,"renderable":0},{"_id":"source/s/09/1_full.png","path":"s/09/1_full.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"a1031a47e56f26984f5050c6d835be886d977842","modified":1477386011000},{"_id":"source/app-touch-icon.png","hash":"d1d1c5a51a94fbb8a656b5481d4000cbe1cc7892","modified":1477374891000},{"_id":"source/favicon.ico","hash":"a2195503b62ad434d357c359276d8d127b330034","modified":1477374891000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1477188981000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1477188981000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1477188981000},{"_id":"themes/maupassant/_config.yml","hash":"8db65189da7bb39a8b36591f0af0ec3a793ea0cf","modified":1477387721000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1477188981000},{"_id":"source/_posts/ 修复因为dpkg 导致的apt-get无法安装软件.md","hash":"db91f5330603de34a52d663088d6a6f91dcf3683","modified":1477386525000},{"_id":"source/_posts/HexoUseImg.md","hash":"05863f4c65ce473e497c6dc2eb2b40043031177a","modified":1477378753000},{"_id":"source/_posts/.DS_Store","hash":"2cfb62bc7e49d8989b8ed0288be22d63d3456bd0","modified":1477386259000},{"_id":"source/_posts/about-mistakes.md","hash":"f960d832b7ca75bc9f079f628ba077b6f25050bb","modified":1477380743000},{"_id":"source/_posts/aliyun-ubuntu-xenial.md","hash":"46103f80485c6d111cc9b8dfeab1bd898efdd150","modified":1477374891000},{"_id":"source/_posts/atemplate","hash":"82cd67ce99f5d6bd2916c7749f92f7c37046f09a","modified":1477277056000},{"_id":"source/_posts/一个mv命令引发的思考.md","hash":"0ce7d5d6941c6a2731ce9392d0fef04f2a6b1a71","modified":1477380960000},{"_id":"source/_posts/关于博客.md","hash":"bb2aec9da28b9cb4b8db21ab127098e6f55a23c9","modified":1477381489000},{"_id":"source/_posts/关于工作.md","hash":"0b9bd625b0dad61aec9adce1af20d841131d1bfc","modified":1477381458000},{"_id":"source/_posts/判断cpu架构.md","hash":"746ccd746edf2fd164718a74d86524b87f9a20ac","modified":1477381256000},{"_id":"source/_posts/判断命令执行结果.md","hash":"6b2be20757d5e2efaa4217480a4d41811d5c982c","modified":1477381216000},{"_id":"source/_posts/学习的思考.md","hash":"b9b86b4f30b4b471f1aaf64226b9516c80e039cd","modified":1477381042000},{"_id":"source/_posts/常见服务性能监控项目.md","hash":"7c011eb26817fde1c04cb127ee5380988a718238","modified":1477382051000},{"_id":"source/_posts/放弃wordpress，拥抱hexo.md","hash":"97f98b8b109ee730b50e46035d38fe6821f8e7e2","modified":1477381594000},{"_id":"source/_posts/用python设定saltstack的自定义grains.md","hash":"0692ee2fc0f07be3a525e914dde22e366035c363","modified":1477380777000},{"_id":"source/_posts/白日梦.md","hash":"88c1c8401a8288be99a1e1c208b61f5657fe2319","modified":1477382105000},{"_id":"source/_posts/解决使用centos7.1作为基础镜像构建docker镜像的报错.md","hash":"e782988f9bf5627998c8cdd72818091be1b23f5d","modified":1477381394000},{"_id":"source/_posts/运维第一黑.md","hash":"4063c22a226b69d27fe2007e3e4fa12a834a8e63","modified":1477385918000},{"_id":"source/about/index.md","hash":"90f3ea3a048985aa3ff1dd7a46e5dfba42ea1372","modified":1477374891000},{"_id":"source/categories/index.md","hash":"d502504c844b7f6f73d9d7b84150d7bbba423666","modified":1477374891000},{"_id":"source/s/.DS_Store","hash":"20639388273413c9afc05dc4a4c153f958026a61","modified":1477383670000},{"_id":"source/tags/index.md","hash":"a8c44601b7cdf661832330bf52e1585f90fe7a2f","modified":1477374891000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1477188981000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1477188981000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1477188981000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1477188981000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1477188981000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"1406f808a5f33f33fd226ca3a1bd7bb65c5f7f57","modified":1477376950000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1477188981000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1477188981000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1477198194000},{"_id":"themes/maupassant/layout/base.jade","hash":"e174e9e73f7a6a30936e49d4062124f37b12d3e9","modified":1477198126000},{"_id":"themes/maupassant/layout/index.jade","hash":"1f1ada5e52930345ad855644c8860d05f11cf568","modified":1477388792000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1477188981000},{"_id":"themes/maupassant/layout/post.jade","hash":"548ec4f8d73250caf7042af964e43dc649bbf4af","modified":1477388360000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1477188981000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1477188981000},{"_id":"source/_posts/old_post_wp/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1477384020000},{"_id":"source/_posts/old_post_wp/CenOS7 lvm扩容报错.md","hash":"8873f2771cc46c448696753e05a622c4d3b492a8","modified":1477382221000},{"_id":"source/_posts/old_post_wp/Linux监控用户的即时操作.md","hash":"2ad60f1947754430cda42c7a5c24084c21ffb9c9","modified":1477384626000},{"_id":"source/_posts/old_post_wp/CentOS安装开发环境.md","hash":"57c9c703705a810cce2b18d9b20f14d1fac73d65","modified":1477385725000},{"_id":"source/_posts/old_post_wp/Sublime Text 使用.md","hash":"bf8ac0430a2b0c51f1d6dc30f58d14110105f591","modified":1477277056000},{"_id":"source/_posts/old_post_wp/Ubuntu Openvpn访问局域网资源.md","hash":"f218bdbba5488ef2715951a167e20e02c124a3c8","modified":1477277056000},{"_id":"source/_posts/old_post_wp/date命令.md","hash":"bcc257f9844f348aa22f48df51a15e8293a68e6a","modified":1477382796000},{"_id":"source/_posts/old_post_wp/find使用总结.md","hash":"e77088ebfa3d7c9de2aa56e5df382e5a392cd9d9","modified":1477383822000},{"_id":"source/_posts/old_post_wp/focus.md","hash":"1e53787a8d6a7069c27ab2b11ae68dc43a9ec1ac","modified":1477383101000},{"_id":"source/_posts/old_post_wp/gitignore无效.md","hash":"95b523d7ff5ad1da12b78eac11d83373a2137c3f","modified":1477386164000},{"_id":"source/_posts/old_post_wp/goaccess分析日志.md","hash":"1d6194690fa6b1bc4b702cfc4bcbae53f0458c11","modified":1477383387000},{"_id":"source/_posts/old_post_wp/iterm2使用lrzsz.md","hash":"4f03f484c8baf2b3df7409f295174f43f02374b6","modified":1477383854000},{"_id":"source/_posts/old_post_wp/learnmd.md","hash":"c75563c8f1ae2fdd6d5138dcf48d5e21492bbbde","modified":1477277056000},{"_id":"source/_posts/old_post_wp/linux 常用shell命令.md","hash":"40996710b661098c21bad4f068c1ba2115bc0e31","modified":1477386097000},{"_id":"source/_posts/old_post_wp/linux proc 目录.md","hash":"b5a07a54af1134572bb3f23888551ac803bb2c26","modified":1477384091000},{"_id":"source/_posts/old_post_wp/logstash启动脚本简陋.md","hash":"b3257d22062afd6b8be04e45a4763a3cbf047649","modified":1477384604000},{"_id":"source/_posts/old_post_wp/linux备份文件权限.md","hash":"4c53f4f23631722d847b2b474e4a20fd990ed274","modified":1477384643000},{"_id":"source/_posts/old_post_wp/lrzsz使用.md","hash":"d6f3c7e7797fb28749bebd2392020410caac971b","modified":1477384579000},{"_id":"source/_posts/old_post_wp/lua编译报错.md","hash":"ab836de68fef64c1bfdc1b9bde67a67a409a6588","modified":1477385449000},{"_id":"source/_posts/old_post_wp/mycli.md","hash":"9c18ba07caaf23909e5090ec3a92c57a879042cc","modified":1477384872000},{"_id":"source/_posts/old_post_wp/mysql 5.7 相关错误解决.md","hash":"40c10f75153e9389bf9f7cf79654a9d66eea3fb7","modified":1477384942000},{"_id":"source/_posts/old_post_wp/mysql单实例安装配置.md","hash":"1c7a55c6926431120e67589d22532113ff067ff5","modified":1477385023000},{"_id":"source/_posts/old_post_wp/mysql安全用户的做法.md","hash":"39ce62c269e37244748b54d614d5c47d1d8dc880","modified":1477384990000},{"_id":"source/_posts/old_post_wp/mysql监控.md","hash":"24214a1eadba37d08021d445405b34064c9c2603","modified":1477385230000},{"_id":"source/_posts/old_post_wp/nginx_server配置.md","hash":"422761752621d979fd2ed3ff52213f8972201b68","modified":1477277056000},{"_id":"source/_posts/old_post_wp/ntp server替换.md","hash":"5c4380b5065936ea9e6cc268ccfa90e1ed57e746","modified":1477385434000},{"_id":"source/_posts/old_post_wp/openwrt.md","hash":"f9a032d0d34b80a392b3abd388acd13549ce3f7e","modified":1477277056000},{"_id":"source/_posts/old_post_wp/osxNFS.md","hash":"af2f93e6da87d2f2e5153d5c822321a956c16106","modified":1477277056000},{"_id":"source/_posts/old_post_wp/osx修改主机名.md","hash":"b11cae06bf13e9e2d506ec5cab63dda0113c2416","modified":1477277056000},{"_id":"source/_posts/old_post_wp/osx卸载java.md","hash":"b8cdb08e6b1a1944849668009c884eaeb82134a1","modified":1477277056000},{"_id":"source/_posts/old_post_wp/pip更换源.md","hash":"a59b2a189f126998d99ff9390401d7d9388578a1","modified":1477277056000},{"_id":"source/_posts/old_post_wp/python_r_s_2.md","hash":"f8514bb266a8d65f1ee3329d37f886b2031b9390","modified":1477277056000},{"_id":"source/_posts/old_post_wp/python_r_s.md","hash":"bc07434f80dfd32327f3a3861154c6cdc8080689","modified":1477277056000},{"_id":"source/_posts/old_post_wp/python排错.md","hash":"65421f3adea246fe365fdaa10bcdb6fd8e3e6470","modified":1477385637000},{"_id":"source/_posts/old_post_wp/python正则.md","hash":"5f20d8376c4ac1a1c6e10ca7a100008139254386","modified":1477277056000},{"_id":"source/_posts/old_post_wp/python自动补全.md","hash":"965c2bcec9106eb69c2e5494ca7f9a6ab9a71c22","modified":1477277056000},{"_id":"source/_posts/old_post_wp/redhat7使用centos7的yum源和第三方rhel7源.md","hash":"21ade8c0e516738e39426b99f2d7833d661cdc53","modified":1477277056000},{"_id":"source/_posts/old_post_wp/saltstack master端 刷新grains.md","hash":"a7433b3724973aff65fb366f220ac341616ccb0a","modified":1477277056000},{"_id":"source/_posts/old_post_wp/saltstack分发ssh公钥.md","hash":"2a7add4a339ea8dd65561d68937182ceb9d5da9d","modified":1477277056000},{"_id":"source/_posts/old_post_wp/saltstack执行salt命令时很慢.md","hash":"4661d0f75e94da833d7222200ee1b3de229dbc94","modified":1477277056000},{"_id":"source/_posts/old_post_wp/screen使用.md","hash":"a845f98cd11771adf7aa01401ec7188007d5c92e","modified":1477277056000},{"_id":"source/_posts/old_post_wp/tcpdump.md","hash":"d0b8713504673ce547e328964764455121a92339","modified":1477277056000},{"_id":"source/_posts/old_post_wp/the-knights.md","hash":"ce9fb1b3ed56575e55d20556ebd0b5cb941a70dd","modified":1477277056000},{"_id":"source/_posts/old_post_wp/thoughts.md","hash":"288382bb478f1c57dc3890526921dc85e115a032","modified":1477277056000},{"_id":"source/_posts/old_post_wp/ubuntu 14.04.3 安装rtl8192cu.md","hash":"faa52010f9dcbcd57e562c4bbd94d579b601957a","modified":1477277056000},{"_id":"source/_posts/old_post_wp/ubuntu DNS配置.md","hash":"d62a906df6ea615e5771c2110b4e45d53d30e112","modified":1477277056000},{"_id":"source/_posts/old_post_wp/ubuntu下的shadowsocks.md","hash":"41918f7dd161f422bca9eab8f7d3bdc0678c9ec4","modified":1477386578000},{"_id":"source/_posts/old_post_wp/ubuntu下的shell坑.md","hash":"5af12913c66f53275fd9cf93dea79dba1993629d","modified":1477277056000},{"_id":"source/_posts/old_post_wp/vim使用.md","hash":"3b9f2d4333bea287963ebfef552e85a1625dcb5f","modified":1477385497000},{"_id":"source/s/03/apache_1-150x91.png","hash":"523b2b2668e11e55106c5ade3e5e0e819c1e0f91","modified":1457175066000},{"_id":"source/s/03/apache_1-60x60.png","hash":"e2c2fd45f928e6874d7e7fdcfde17df85a3540a0","modified":1457175066000},{"_id":"source/s/03/apache_1.png","hash":"7a36ae66579d8b8ae9a6e4b7a4ebc105600ae48b","modified":1457175065000},{"_id":"source/s/03/mysql_1-150x93.png","hash":"467d7893564fd05da8e4f7de05bcbd1c9806f057","modified":1457175066000},{"_id":"source/s/03/mysql_1-60x60.png","hash":"abb8fc1d51263c47ff0ef1c0939f3680decc4aed","modified":1457175066000},{"_id":"source/s/03/mysql_1.png","hash":"0feedf015a5b2230357204c4f9b507b2d9fc63b4","modified":1457175066000},{"_id":"source/s/09/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1477383866000},{"_id":"source/s/09/2_full.png","hash":"06704570afa98f4f5c3aba61b471fd34468bfd87","modified":1473223404000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"31f1cd73c42fef555bc03d4821b7a235bcd5c69b","modified":1477198162000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"ba3fc268b022c0ed87221da8a2df4d80a5582705","modified":1477199485000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1477188981000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1477188981000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1477188981000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1477188981000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1477188981000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1477188981000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1477188981000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1477188981000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1477188981000},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1477188981000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477188981000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477188981000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477188981000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477188981000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477188981000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477188981000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1477188981000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1477188981000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1477188981000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1477188981000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1477188981000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1477188981000},{"_id":"source/s/pigu.jpg","hash":"ddaa4c307fc4e4735beace6a1e29c7b8a442fd3f","modified":1476852141000},{"_id":"source/s/09/1_full.png","hash":"e12f56b032992ecbe1ca91f1f20dd046167dd13f","modified":1473223404000},{"_id":"public/search.xml","hash":"0712ae1f05766e3c70ad7590fb0623df1cb293ae","modified":1477387497916},{"_id":"public/post-sitemap.xml","hash":"da8200dda032623a8dbf7673ff3a6eae4e274120","modified":1477387497932},{"_id":"public/page-sitemap.xml","hash":"00a44ee0b971dc362aa2158c2ceeb7aeec2d4496","modified":1477387497933},{"_id":"public/category-sitemap.xml","hash":"cf34fd08fc96aa3abdda496627557a90579495d7","modified":1477387497933},{"_id":"public/tag-sitemap.xml","hash":"a58993c8fd10c4646ac4a413566405cca960b694","modified":1477387497933},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1477387497933},{"_id":"public/sitemap.xml","hash":"672805959d7f2070aec163b75244e1376fd94ebd","modified":1477387497933},{"_id":"public/about/index.html","hash":"2f939893277063db8a6d1b56fac6c7697145d1f7","modified":1477387801013},{"_id":"public/categories/index.html","hash":"b520ff211c46a89ec859947f3e39685084ca22a9","modified":1477387801014},{"_id":"public/tags/index.html","hash":"b2084fdc3cbdf3e63ca57acd54342079bbde7b40","modified":1477387801014},{"_id":"public/Docs-markdown-img0.html","hash":"22ad231a7c69ac763e10e2483841deb1db8e4e06","modified":1477388369365},{"_id":"public/Docs-aliyun-ubuntu-xenial.html","hash":"4f42e8411a47954b8a3692619a4bef64a40413cc","modified":1477388369365},{"_id":"public/Docs-sublime-text.html","hash":"9e92969132500763ec802c5a6cb53c9a54151be6","modified":1477388369366},{"_id":"public/plan-放弃wordpress，拥抱hexo.html","hash":"501100d1cb9de47f05bfe599d6d1b395e0534b02","modified":1477388369366},{"_id":"public/Docs-linux-shell-command-notebook-0.html","hash":"b6456ca785bef443a776f812d280175e927b271b","modified":1477388369366},{"_id":"public/Docs-new-ntp-server-domain.html","hash":"3323b7c85a9836f8ba3fb9687ed3556be43c07f1","modified":1477388369366},{"_id":"public/随笔-make-your-host-safe.html","hash":"efa3f692d33a44476033cd8a77ff99d091c63441","modified":1477388369366},{"_id":"public/Docs-gitignore-uselsess.html","hash":"54a09baed91b23a29d6b28c23f954cc2a3c69b45","modified":1477388369366},{"_id":"public/Docs-ubuntu-openvpn-route.html","hash":"3188359a843fa9b048e0cf95d2d88cebfdf66490","modified":1477388369366},{"_id":"public/Docs-osx-iterm2-lrzsz.html","hash":"ab01e2b5d037a6e9d8288bc5b93dc635957e79ad","modified":1477388369366},{"_id":"public/Docs-ubuntu-shadowsocks-client.html","hash":"a9b82da4f8edfaf8b50ba40aed6af8424c165788","modified":1477388369366},{"_id":"public/Docs-resolv-config.html","hash":"d579a41ebe837f14d7ad2b34d5a69653d265b610","modified":1477388369366},{"_id":"public/Docs-mysql7-errors-0.html","hash":"1cc86b83ec467c65a09f94d33cfce4c3aa4c1858","modified":1477388369366},{"_id":"public/Docs-centos7-docker-error-0.html","hash":"a81c38e1229a2559eeb8f96e793ba01663a76d38","modified":1477388369367},{"_id":"public/Docs-logstash-init-shell.html","hash":"7c6831d91f0e22ae7b69a668f6754253fc8cc9b1","modified":1477388369367},{"_id":"public/Docs-dpkg-rescure-apt.html","hash":"a8067a4f5c409f1c70aaf15242f085850582c11c","modified":1477388369367},{"_id":"public/Docs-ubuntu-tips.html","hash":"2335b6203c993beb9d911d2b6f91f2793829df5b","modified":1477388369367},{"_id":"public/Docs-ubuntu-rt1819cu.html","hash":"16c520bec5b72300412264e0aa6f0ee93bcb86f7","modified":1477388369367},{"_id":"public/Docs-monitor-items-0.html","hash":"c4af27d7ee357ed5b7c744e65c8ed640c20d6fde","modified":1477388369367},{"_id":"public/Docs-salt-slow.html","hash":"df74c4ff3c4a144c1a0884b768f5378b8fb48f2b","modified":1477388369367},{"_id":"public/Docs-salt-pub-ssh.html","hash":"980150986610dfad26d94955ddeb17fb91d1aa78","modified":1477388369367},{"_id":"public/随笔-old_post_wp/thoughts.html","hash":"c554bef17ff4fbbe8c70d1298f62a5969d0ccad7","modified":1477388369367},{"_id":"public/Docs-goacess-nginx-0.html","hash":"2dab6900da33fe8070cf9f136ca2f92c46276dd6","modified":1477388369367},{"_id":"public/Docs-linxu-monite-user-command.html","hash":"c8dddfa76697a2c381f3540f51558ec11637a3b1","modified":1477388369367},{"_id":"public/Docs-find-usage-demo-0.html","hash":"febd805ae86780b6dfaa93b2797a002c13cef280","modified":1477388369367},{"_id":"public/Docs-python-reg.html","hash":"b5cd0f883e187ea8b6167e943bdd6f9639f7dbf4","modified":1477388369368},{"_id":"public/Docs-date-command-usage-0.html","hash":"ef26db3d93b3c687f2cf1167c6ce2416b90fc2a7","modified":1477388369368},{"_id":"public/随笔-一个mv命令引发的思考.html","hash":"6a5af4936cc852a6ff083a81f4d30a4989405c5b","modified":1477388369368},{"_id":"public/Docs-pip-use-aliyun-mirrors.html","hash":"97b64849b3828797a10a11b444bbdc5da6723374","modified":1477388369368},{"_id":"public/Docs-old_post_wp/tcpdump.html","hash":"4efa1a74ae4442dfd1099f4c3c860882eba1ffe5","modified":1477388369368},{"_id":"public/Docs-mysql-single-0.html","hash":"0f6dcff19b7881ebca987617b20d4ad929437ae5","modified":1477388369368},{"_id":"public/Docs-a-nice-tips-for-new-0.html","hash":"07cf850b68931d6524512418c204b823d249edbc","modified":1477388369368},{"_id":"public/Docs-cetnos-dev-pkgs.html","hash":"f025f50c9633f8bf9381e6aaabd253f45e471a12","modified":1477388369368},{"_id":"public/Docs-mysql-safe-tips-0.html","hash":"d49b0f8402f8752f37bb9be99ddb2e5b9d38fe80","modified":1477388369368},{"_id":"public/Docs-linux-lrzsz-usage-demo0.html","hash":"aaf7695fde75dcd07c37a947a60065b73c5a1588","modified":1477388369368},{"_id":"public/Docs-32-or-64.html","hash":"e41fee6c6d1a839b02f58f0e75c1a7909c4ffa3a","modified":1477388369368},{"_id":"public/Docs-vim-tab-4-space.html","hash":"045eeef2e164b05ea241c4dc44f6153d605e4ff9","modified":1477388369368},{"_id":"public/随笔-think-about-learn-0.html","hash":"e7052216e7f5f52ffaf69605c72c76716711e5cf","modified":1477388369368},{"_id":"public/Docs-linxu-backup-your-rights.html","hash":"9379e37d5f3a24ed006e71e4ec4e2e4cbb444dbe","modified":1477388369368},{"_id":"public/Docs-screen-usage.html","hash":"debf1bea246f98a6d67fcdab516730064269bab1","modified":1477388369369},{"_id":"public/Docs-用python设定saltstack的自定义grains.html","hash":"59688e198ccd0b2f149c48e08165fa747d89e5b2","modified":1477388369368},{"_id":"public/Docs-salt-flush-grains.html","hash":"3d66ef3cc4b36b2918190b4eb2e48aaa2b97b2ff","modified":1477388369369},{"_id":"public/Docs-python-error-no-attribute.html","hash":"0530287f34bd03d58836023fa1171ece78ef519d","modified":1477388369369},{"_id":"public/Docs-osx-hostname.html","hash":"ffa0ed50b1fea0f4cd4c29d890f4bd8b62d128c3","modified":1477388369369},{"_id":"public/随笔-dream-0.html","hash":"1086c74fb6fe368cd944b81983093f4f477260bc","modified":1477388369370},{"_id":"public/Docs-mycli-nice-mysql-client-tools.html","hash":"fa8671c0e8441fadfa11ce95ea2819f19ece2f25","modified":1477388369371},{"_id":"public/Docs-osx-delete-java.html","hash":"16334fdf1f0e811539a367a8f1dba0d2a3c142a1","modified":1477388369371},{"_id":"public/Docs-linxu-lua-error-0.html","hash":"74b29df29e051ead461ba461825b481a56ec78ed","modified":1477388369369},{"_id":"public/随笔-about-future-work.html","hash":"7b1e2da014dd1cbf90ebd4f660fe4fa0862a8fd9","modified":1477388369371},{"_id":"public/Docs-python_r_s-usage.html","hash":"07500cb2c4ba4ff61e82509e99254b46278cdc34","modified":1477388369371},{"_id":"public/Docs-python-print-tips-1.html","hash":"ed55b65c8f676095a062b0e8030f3174b573935b","modified":1477388369371},{"_id":"public/Docs-osx-nfs.html","hash":"ea0089dc23b3498edb14c65b1df43f16e74b0d1c","modified":1477388369371},{"_id":"public/随笔-about-mistakes.html","hash":"583b67fdb214b69769643e158799f0388ccb10b5","modified":1477388369371},{"_id":"public/随笔-关于博客.html","hash":"cc83240d28e96519834fb098032e46376c3e8ccd","modified":1477388369371},{"_id":"public/随笔-the-knights.html","hash":"a2ba0b7f82492b2cebc815bb169a7f37fe9755a9","modified":1477388369371},{"_id":"public/Docs-openwrt-pkg-tip1.html","hash":"897474d8bd93723158a0c7054600682acf51de6c","modified":1477388369371},{"_id":"public/Docs-centos7-lvm-erros-resize2fs.html","hash":"83d9b20991b08fbeaa28b57d6b481a8ce42b5571","modified":1477388369372},{"_id":"public/随笔-old_post_wp/focus.html","hash":"120267708388cfc40b6d8399c87cf2ff812dcb95","modified":1477388369372},{"_id":"public/Docs-python-auto-tab.html","hash":"10fff5205f9ef6801183ab6bc52fb4cf953a8810","modified":1477388369372},{"_id":"public/Docs-redhat-use-centos-yum.html","hash":"5fee2a0216083f88b90ee41905133ebf3ecfaacd","modified":1477388369372},{"_id":"public/Docs-nginx-server-demo.html","hash":"805987f07cfdc105d282a4ad3da5d2a16d567601","modified":1477388369372},{"_id":"public/Docs-old_post_wp/learnmd.html","hash":"4b03f30fdaef2c56a058fd577f7fb58f682e20b1","modified":1477388369372},{"_id":"public/archives/index.html","hash":"47a5dd8319caa6b4b9043a57a23b1d4c52b7b4c2","modified":1477387801019},{"_id":"public/archives/page/2/index.html","hash":"89ed56a8ae345d8a0bb36d7dd85f9567a0f653f7","modified":1477387801019},{"_id":"public/archives/page/4/index.html","hash":"89df1fc7cd8d1b58b66498cb72e2f6331430490d","modified":1477387801019},{"_id":"public/archives/page/3/index.html","hash":"0f5d37d38eab37fdc25b9f7601605a857efda723","modified":1477387801019},{"_id":"public/archives/page/5/index.html","hash":"1e4832adddfabebdd708a3dee8668b21be7dd60b","modified":1477387801019},{"_id":"public/archives/page/6/index.html","hash":"d815cb36b20a1d37c6a9ea4372183d18e1b6c1f1","modified":1477387801019},{"_id":"public/archives/page/7/index.html","hash":"602b4824930fc5b8c6233ab6bc9fe71be5a68fee","modified":1477387801019},{"_id":"public/archives/2013/index.html","hash":"7f5bcc2b30128defe6ddf45ef4c0040dc9969474","modified":1477387801020},{"_id":"public/archives/2013/07/index.html","hash":"7f5bcc2b30128defe6ddf45ef4c0040dc9969474","modified":1477387801020},{"_id":"public/archives/2015/index.html","hash":"8e06a1b4e3656589df7fb400f3f771df7efa5ec7","modified":1477387801020},{"_id":"public/archives/2015/page/2/index.html","hash":"03dc7bbcb5460cc5164ade85bf4fb4a2b71e8af7","modified":1477387801020},{"_id":"public/archives/2015/page/3/index.html","hash":"59f0c97425ef98be80c9af48d123541611f0e616","modified":1477387801020},{"_id":"public/archives/2015/page/4/index.html","hash":"9232fef6bbb3664c05d075db896b2ab910d4382a","modified":1477387801020},{"_id":"public/archives/2015/10/index.html","hash":"fbb8c753113ea5a42130dcd58558f12066f9c712","modified":1477387801020},{"_id":"public/archives/2015/10/page/2/index.html","hash":"a627ccc88fb13ed0d7a5791eca3d30d5337ead71","modified":1477387801020},{"_id":"public/archives/2015/11/index.html","hash":"a58ae10695e69168c425e9a87d2081d50134c42a","modified":1477387801020},{"_id":"public/archives/2015/12/index.html","hash":"93139b8ac188b15fc273bef997104c643803c564","modified":1477387801020},{"_id":"public/archives/2015/12/page/2/index.html","hash":"446bac8fe0c98bbd8c36ad237876ba42688ba337","modified":1477387801020},{"_id":"public/archives/2016/index.html","hash":"49a4f6dce5a6f068db1bf6abc7bd3fe62f9c161d","modified":1477387801020},{"_id":"public/archives/2016/page/2/index.html","hash":"21a4768a08358e65b07f2abf8b90c0444ea88492","modified":1477387801021},{"_id":"public/archives/2016/page/3/index.html","hash":"27942b9bc7fa9cc47933b33269632537315792ef","modified":1477387801021},{"_id":"public/archives/2016/01/index.html","hash":"3b966c040e84cc2ee191dcf4120ad124190943ec","modified":1477387801021},{"_id":"public/archives/2016/03/index.html","hash":"a217b5571a2e3380597f62cf133aa262c1eead9e","modified":1477387801021},{"_id":"public/archives/2016/05/index.html","hash":"a1ec449cd6f508cc6fecc582d37043bbbe149758","modified":1477387801021},{"_id":"public/archives/2016/08/index.html","hash":"b7b7b7a949027bad4db487d325f572efb7173cec","modified":1477387801021},{"_id":"public/archives/2016/09/index.html","hash":"aec872b4bd073a3b5f25c788e5f810d58717fc4b","modified":1477387801021},{"_id":"public/archives/2016/10/index.html","hash":"90ccca2d87f641c4937fd984c149da759683a179","modified":1477387801021},{"_id":"public/categories/Docs/index.html","hash":"a62513d50fc4feeffe38973a6a70fa7e8350d4b7","modified":1477387801021},{"_id":"public/categories/Docs/page/2/index.html","hash":"6df09b450d6ee0a133666757cc0f04aaf4173aaf","modified":1477387801021},{"_id":"public/categories/Docs/page/3/index.html","hash":"07f77afd31ccd1d808ae470daeb792aa3b8aa19f","modified":1477387801021},{"_id":"public/categories/Docs/page/5/index.html","hash":"6c1ceb01927712c544c3edc201f75030154774be","modified":1477387801021},{"_id":"public/categories/Docs/page/4/index.html","hash":"4fe24f6cc79b5df5b831c164e04e1bb21b688a98","modified":1477387801021},{"_id":"public/categories/Docs/page/6/index.html","hash":"cad42f17deaeaeba8d73d2e885d6635bdd189877","modified":1477387801021},{"_id":"public/categories/随笔/index.html","hash":"8d9444395f4c2babef9ad3754dd655804950f886","modified":1477387801022},{"_id":"public/categories/plan/index.html","hash":"6fe6d6192bdaf80dc8f8fee9cd03ad2bfab0efc0","modified":1477387801022},{"_id":"public/index.html","hash":"2cbd43ab9a8d0555c876728ea8294df7adb4bfcb","modified":1477388803013},{"_id":"public/page/2/index.html","hash":"91600dc0998a875270946882cdc2788f901d402f","modified":1477388803013},{"_id":"public/page/3/index.html","hash":"0de15bf2ae0a6209e1c5e9c14ae6e2fbb496beb6","modified":1477388803014},{"_id":"public/page/4/index.html","hash":"2409a80cc20b83252acb7cf661a58a3264f5c984","modified":1477388803014},{"_id":"public/page/5/index.html","hash":"f4f0c635ddf87ab768a03b4d977c23f21723e730","modified":1477388803014},{"_id":"public/page/6/index.html","hash":"2d3d5f345a067b7c99e466ec3ee849ea7b84c0c5","modified":1477388803014},{"_id":"public/page/7/index.html","hash":"a2877d9939a66f107003aacb4d6ddeb179011212","modified":1477388803014},{"_id":"public/tags/errors/index.html","hash":"ba851cbe3a5cf442fa6a51bf4346950ed5ee1977","modified":1477387801024},{"_id":"public/tags/linux/index.html","hash":"e0175ba691676cd42cfba3bb3b3c4a15a503f9b1","modified":1477387801024},{"_id":"public/tags/linux/page/2/index.html","hash":"0de621ba697515f77696f6a354ac442b2d590446","modified":1477387801024},{"_id":"public/tags/linux/page/3/index.html","hash":"b01192b1f1c70d55e07be38fd3552cca8f7d883f","modified":1477387801024},{"_id":"public/tags/linux/page/4/index.html","hash":"ba5bbe8526ae81014a72df759df068f6f6bc5ed2","modified":1477387801024},{"_id":"public/tags/随便写写/index.html","hash":"f8268c575e72624972d023f762139750176a1dea","modified":1477387801024},{"_id":"public/tags/config/index.html","hash":"cd8816338fbc1569f342e831583098eba9a099bb","modified":1477387801024},{"_id":"public/tags/config/page/2/index.html","hash":"686eedd765c9a8d9be53bed67554b7701980e9e1","modified":1477387801024},{"_id":"public/tags/shell/index.html","hash":"11fa6a1876586a6926cfb059057e473daf99cb54","modified":1477387801024},{"_id":"public/tags/实用工具/index.html","hash":"93d57b76aa24ec93454cba4916cf1f560a990a5b","modified":1477387801024},{"_id":"public/tags/monitor/index.html","hash":"7faf789168d7f3a08f103d38baad9b018b161a21","modified":1477387801024},{"_id":"public/tags/markdown/index.html","hash":"2f512772e6b09aedbfe8620a4f16ce0335c9eb32","modified":1477387801024},{"_id":"public/tags/blog/index.html","hash":"a1b25ceeb4b42453ff4d27c5edc326d2183f135b","modified":1477387801024},{"_id":"public/tags/python/index.html","hash":"179f81f9a2f6b39001ef191d005992e4e682079a","modified":1477387801024},{"_id":"public/tags/saltstack/index.html","hash":"016abadff7c53fcb2951c08c309aec15e36fd540","modified":1477387801024},{"_id":"public/tags/docker/index.html","hash":"e963f35c9d018c74eec4d8bbb095e59ececd46d5","modified":1477387801024},{"_id":"public/tags/Tips/index.html","hash":"ffd9cd435d3b50b22fad50acd1a697210639c7eb","modified":1477387801024},{"_id":"public/Docs-mysql-monitor-items.html","hash":"70b15950d0c6968cb991ff7f78e899bb10afd511","modified":1477388369372},{"_id":"public/Docs-linux-proc-0.html","hash":"2be915691cd9abe7e55ba3d28cf740cab22867cf","modified":1477388369372},{"_id":"public/tags/lvm/index.html","hash":"a6cfb87399b2cf1d89f9fa3be0733a2bd9a1c7f6","modified":1477387801024},{"_id":"public/tags/OSX/index.html","hash":"ee2384713537a25d29574c635c9a2d9d82293808","modified":1477387801025},{"_id":"public/tags/git/index.html","hash":"a7e7d54d4efc0891b31783d5f9074fa80126ca99","modified":1477387801025},{"_id":"public/tags/nginx/index.html","hash":"35cfa80c804a9d073e0bfcbb1c2b8927292c4914","modified":1477387801025},{"_id":"public/tags/elk/index.html","hash":"9051c553a2adec06d9c18adedcdfc3cedf62d83b","modified":1477387801025},{"_id":"public/tags/openwrt/index.html","hash":"6476585bb4c5728e57dd80a0cc2a79c15c3cac1e","modified":1477387801025},{"_id":"public/tags/mysql/index.html","hash":"6b76d2d4d2f1b63a2f28dd92f4d9e089055d9bed","modified":1477387801025},{"_id":"public/tags/优化/index.html","hash":"c522f4549e3fe5ba2ab3fca5e886024d19af9f2a","modified":1477387801025},{"_id":"public/tags/思/index.html","hash":"6874cb08a97941f6e8149f6507d5d0f66208e7bc","modified":1477387801025},{"_id":"public/app-touch-icon.png","hash":"d1d1c5a51a94fbb8a656b5481d4000cbe1cc7892","modified":1477387498045},{"_id":"public/favicon.ico","hash":"a2195503b62ad434d357c359276d8d127b330034","modified":1477387498045},{"_id":"public/s/03/apache_1-150x91.png","hash":"523b2b2668e11e55106c5ade3e5e0e819c1e0f91","modified":1477387498045},{"_id":"public/s/03/apache_1-60x60.png","hash":"e2c2fd45f928e6874d7e7fdcfde17df85a3540a0","modified":1477387498045},{"_id":"public/s/03/apache_1.png","hash":"7a36ae66579d8b8ae9a6e4b7a4ebc105600ae48b","modified":1477387498045},{"_id":"public/s/03/mysql_1-150x93.png","hash":"467d7893564fd05da8e4f7de05bcbd1c9806f057","modified":1477387498046},{"_id":"public/s/03/mysql_1-60x60.png","hash":"abb8fc1d51263c47ff0ef1c0939f3680decc4aed","modified":1477387498046},{"_id":"public/s/03/mysql_1.png","hash":"0feedf015a5b2230357204c4f9b507b2d9fc63b4","modified":1477387498046},{"_id":"public/s/09/2_full.png","hash":"06704570afa98f4f5c3aba61b471fd34468bfd87","modified":1477387498046},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477387498046},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477387498046},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477387498046},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477387498046},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477387498046},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477387498046},{"_id":"public/s/09/1_full.png","hash":"e12f56b032992ecbe1ca91f1f20dd046167dd13f","modified":1477387498068},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1477387498075},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1477387498075},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1477387498075},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1477387498075},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1477387498075},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1477387498075},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1477387498075},{"_id":"public/css/style.css","hash":"2afb6e7e24abf81c8b7b7d472fb0bb9b9a1eac16","modified":1477387498075},{"_id":"public/s/pigu.jpg","hash":"ddaa4c307fc4e4735beace6a1e29c7b8a442fd3f","modified":1477387498077}],"Category":[{"name":"Docs","_id":"ciupadaqa0004uyxute49jjc2"},{"name":"随笔","_id":"ciupadaqo000euyxuqqsfb8bj"},{"name":"plan","_id":"ciupadar30016uyxukhxudga9"}],"Data":[],"Page":[{"title":"about","date":"2016-10-23T04:12:10.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-10-23 12:12:10\n---\n","updated":"2016-10-25T05:54:51.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciupadaq60001uyxupbwii85i","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-10-23T02:41:46.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-10-23 10:41:46\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-10-25T05:54:51.000Z","path":"categories/index.html","layout":"page","_id":"ciupadaqa0003uyxu71xiokmk","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-10-23T03:12:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-23 11:12:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-10-25T05:54:51.000Z","path":"tags/index.html","layout":"page","_id":"ciupadbfx002duyxuqgrgulun","content":"","excerpt":"","more":""}],"Post":[{"title":"修复因为dpkg 导致的apt-get无法安装软件","date":"2016-05-06T05:53:50.000Z","_content":"\n 2条命令搞定。\n ``` bash\nsudo aptitude update   \nsudo aptitude -f install\n```\n\n感谢[http://blog.csdn.net/ling1874/article/details/5733883](http://blog.csdn.net/ling1874/article/details/5733883)\n","source":"_posts/ 修复因为dpkg 导致的apt-get无法安装软件.md","raw":"---\ntitle: 修复因为dpkg 导致的apt-get无法安装软件\npermalink: dpkg-rescure-apt\ntags:\n  - errors\n  - linux\ncategories:\n  - Docs\ndate: 2016-05-06 13:53:50\n---\n\n 2条命令搞定。\n ``` bash\nsudo aptitude update   \nsudo aptitude -f install\n```\n\n感谢[http://blog.csdn.net/ling1874/article/details/5733883](http://blog.csdn.net/ling1874/article/details/5733883)\n","slug":"dpkg-rescure-apt","published":1,"updated":"2016-10-25T09:08:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaq20000uyxu8mgpaye8","content":"<p> 2条命令搞定。<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo aptitude update   </div><div class=\"line\">sudo aptitude <span class=\"_\">-f</span> install</div></pre></td></tr></table></figure></p>\n<p>感谢<a href=\"http://blog.csdn.net/ling1874/article/details/5733883\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ling1874/article/details/5733883</a></p>\n","excerpt":"","more":"<p> 2条命令搞定。<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo aptitude update   </div><div class=\"line\">sudo aptitude <span class=\"_\">-f</span> install</div></pre></td></tr></table></figure></p>\n<p>感谢<a href=\"http://blog.csdn.net/ling1874/article/details/5733883\">http://blog.csdn.net/ling1874/article/details/5733883</a></p>\n"},{"title":"hexo博客里使用图片方法","date":"2016-10-25T06:35:20.000Z","description":"hexo markdown使用图片并部署到服务器","Tags":["config","markdown"],"_content":"\n#### hexo 图片的问题如何\n\n* 在主题根目录的source目录下*新建个目录* **s**\n* 复制图片进去改好名字\n* 在markdown里面使用图片\n\n\n#### 下面的的图片代码如下注意是..s/x.jpg\n``` plain\n![OVERPIGU](../s/pigu.jpg)\n```\n![OVERPIGU](../s/pigu.jpg)\n\n**搞定**\n然后使用rsync方式部署到nginx服务器就行了。\n至于使用git的方式应该没问题吧\n\n\n\n\n","source":"_posts/HexoUseImg.md","raw":"title: hexo博客里使用图片方法\ndate: 2016/10/25 14:35:20\ndescription: hexo markdown使用图片并部署到服务器\ncategories: Docs\nTags:\n  - config\n  - markdown\npermalink: markdown-img0\n---\n\n#### hexo 图片的问题如何\n\n* 在主题根目录的source目录下*新建个目录* **s**\n* 复制图片进去改好名字\n* 在markdown里面使用图片\n\n\n#### 下面的的图片代码如下注意是..s/x.jpg\n``` plain\n![OVERPIGU](../s/pigu.jpg)\n```\n![OVERPIGU](../s/pigu.jpg)\n\n**搞定**\n然后使用rsync方式部署到nginx服务器就行了。\n至于使用git的方式应该没问题吧\n\n\n\n\n","slug":"markdown-img0","published":1,"updated":"2016-10-25T06:59:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaq70002uyxujhlxpbtn","content":"<h4 id=\"hexo-图片的问题如何\"><a href=\"#hexo-图片的问题如何\" class=\"headerlink\" title=\"hexo 图片的问题如何\"></a>hexo 图片的问题如何</h4><ul>\n<li>在主题根目录的source目录下<em>新建个目录</em> <strong>s</strong></li>\n<li>复制图片进去改好名字</li>\n<li>在markdown里面使用图片</li>\n</ul>\n<h4 id=\"下面的的图片代码如下注意是-s-x-jpg\"><a href=\"#下面的的图片代码如下注意是-s-x-jpg\" class=\"headerlink\" title=\"下面的的图片代码如下注意是..s/x.jpg\"></a>下面的的图片代码如下注意是..s/x.jpg</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![OVERPIGU](../s/pigu.jpg)</div></pre></td></tr></table></figure>\n<p><img src=\"../s/pigu.jpg\" alt=\"OVERPIGU\"></p>\n<p><strong>搞定</strong><br>然后使用rsync方式部署到nginx服务器就行了。<br>至于使用git的方式应该没问题吧</p>\n","excerpt":"","more":"<h4 id=\"hexo-图片的问题如何\"><a href=\"#hexo-图片的问题如何\" class=\"headerlink\" title=\"hexo 图片的问题如何\"></a>hexo 图片的问题如何</h4><ul>\n<li>在主题根目录的source目录下<em>新建个目录</em> <strong>s</strong></li>\n<li>复制图片进去改好名字</li>\n<li>在markdown里面使用图片</li>\n</ul>\n<h4 id=\"下面的的图片代码如下注意是-s-x-jpg\"><a href=\"#下面的的图片代码如下注意是-s-x-jpg\" class=\"headerlink\" title=\"下面的的图片代码如下注意是..s/x.jpg\"></a>下面的的图片代码如下注意是..s/x.jpg</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![OVERPIGU](../s/pigu.jpg)</div></pre></td></tr></table></figure>\n<p><img src=\"../s/pigu.jpg\" alt=\"OVERPIGU\"></p>\n<p><strong>搞定</strong><br>然后使用rsync方式部署到nginx服务器就行了。<br>至于使用git的方式应该没问题吧</p>\n"},{"title":"about mistakes","date":"2015-10-28T13:30:50.000Z","_content":"\nRemember that everyone makes mistakes. Programmers are like magicians who fool everyone into thinking they are perfect and never wrong, but it's all an act. They make mistakes all the time.","source":"_posts/about-mistakes.md","raw":"---\ntitle: about mistakes\ntags:\n  - 随便写写\ncategories:\n  - 随笔\ndate: 2015-10-28 21:30:50\n---\n\nRemember that everyone makes mistakes. Programmers are like magicians who fool everyone into thinking they are perfect and never wrong, but it's all an act. They make mistakes all the time.","slug":"about-mistakes","published":1,"updated":"2016-10-25T07:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqf0006uyxuk1d1ky2e","content":"<p>Remember that everyone makes mistakes. Programmers are like magicians who fool everyone into thinking they are perfect and never wrong, but it’s all an act. They make mistakes all the time.</p>\n","excerpt":"","more":"<p>Remember that everyone makes mistakes. Programmers are like magicians who fool everyone into thinking they are perfect and never wrong, but it’s all an act. They make mistakes all the time.</p>\n"},{"title":"aliyun 使用 ubuntu 16.04镜像","date":"2016-10-24T13:52:20.000Z","description":"阿里云使用ubuntu16.04镜像的方法。","_content":"\n#### aliyun获取ubuntu16.04\n\n*截止到2016年阿里云还没在ECS新建实例里提供Ubuntu16.04版本*\n因为最近docker的发展，很多新东西都是使用ubuntu16.04.\n比如kubernetes.io 里面的guides 使用的ubuntu16.04，其实 14.04也行。\n\n废话不多说。在阿里云使用ubuntu16.04 LTS版本目前我就知道一种\n先购买一台使用ubuntu 14.04镜像的ECS，然后升级到16.04，如果机器很多，可以一台升级，然后做\n成自定义镜像。这样以后都可以直接部署了。和VM一样。\n\n*那么问题来了，怎么升级呢*\n**Easy！**\n1, 先更新系统保证更新过程不出错。（依赖问题）\n``` bash\napt update \\\n&& apt dist-upgrade\n```\n2, 然后使用screen -S update 新建个screen\n``` bash\nscreen -S update\n```\n3, 升级！ (保障有外网哦)\n\\#TIPS 可以删除/etc/apt/source.list.d/sources-aliyun-1.list 或者改名非.list\n\\# 这样可以使用阿里云提供的内网镜像仓库，加快速度。\n*GO!*\n``` bash\ndo-release-upgrade\n```\n##### 一路上YES YES YES 回车回车就行。 也可以根据提示自己判断。升级完成后（20分钟左右。）\n##### 重启后，检查没问题就可以创建自定义镜像\n[自定义镜像官网指导](https://help.aliyun.com/knowledge_detail/40549.html)\n\n## 搞定。\n@skipper\n","source":"_posts/aliyun-ubuntu-xenial.md","raw":"title: aliyun 使用 ubuntu 16.04镜像\ndate: 2016/10/24 21:52:20\ndescription: 阿里云使用ubuntu16.04镜像的方法。\ncategories: Docs\ntags:\n  - config\n  - linux\npermalink: aliyun-ubuntu-xenial\n---\n\n#### aliyun获取ubuntu16.04\n\n*截止到2016年阿里云还没在ECS新建实例里提供Ubuntu16.04版本*\n因为最近docker的发展，很多新东西都是使用ubuntu16.04.\n比如kubernetes.io 里面的guides 使用的ubuntu16.04，其实 14.04也行。\n\n废话不多说。在阿里云使用ubuntu16.04 LTS版本目前我就知道一种\n先购买一台使用ubuntu 14.04镜像的ECS，然后升级到16.04，如果机器很多，可以一台升级，然后做\n成自定义镜像。这样以后都可以直接部署了。和VM一样。\n\n*那么问题来了，怎么升级呢*\n**Easy！**\n1, 先更新系统保证更新过程不出错。（依赖问题）\n``` bash\napt update \\\n&& apt dist-upgrade\n```\n2, 然后使用screen -S update 新建个screen\n``` bash\nscreen -S update\n```\n3, 升级！ (保障有外网哦)\n\\#TIPS 可以删除/etc/apt/source.list.d/sources-aliyun-1.list 或者改名非.list\n\\# 这样可以使用阿里云提供的内网镜像仓库，加快速度。\n*GO!*\n``` bash\ndo-release-upgrade\n```\n##### 一路上YES YES YES 回车回车就行。 也可以根据提示自己判断。升级完成后（20分钟左右。）\n##### 重启后，检查没问题就可以创建自定义镜像\n[自定义镜像官网指导](https://help.aliyun.com/knowledge_detail/40549.html)\n\n## 搞定。\n@skipper\n","slug":"aliyun-ubuntu-xenial","published":1,"updated":"2016-10-25T05:54:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqh0007uyxullo03fq2","content":"<h4 id=\"aliyun获取ubuntu16-04\"><a href=\"#aliyun获取ubuntu16-04\" class=\"headerlink\" title=\"aliyun获取ubuntu16.04\"></a>aliyun获取ubuntu16.04</h4><p><em>截止到2016年阿里云还没在ECS新建实例里提供Ubuntu16.04版本</em><br>因为最近docker的发展，很多新东西都是使用ubuntu16.04.<br>比如kubernetes.io 里面的guides 使用的ubuntu16.04，其实 14.04也行。</p>\n<p>废话不多说。在阿里云使用ubuntu16.04 LTS版本目前我就知道一种<br>先购买一台使用ubuntu 14.04镜像的ECS，然后升级到16.04，如果机器很多，可以一台升级，然后做<br>成自定义镜像。这样以后都可以直接部署了。和VM一样。</p>\n<p><em>那么问题来了，怎么升级呢</em><br><strong>Easy！</strong><br>1, 先更新系统保证更新过程不出错。（依赖问题）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt update \\</div><div class=\"line\">&amp;&amp; apt dist-upgrade</div></pre></td></tr></table></figure></p>\n<p>2, 然后使用screen -S update 新建个screen<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">screen -S update</div></pre></td></tr></table></figure></p>\n<p>3, 升级！ (保障有外网哦)<br>#TIPS 可以删除/etc/apt/source.list.d/sources-aliyun-1.list 或者改名非.list<br># 这样可以使用阿里云提供的内网镜像仓库，加快速度。<br><em>GO!</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">do</span>-release-upgrade</div></pre></td></tr></table></figure></p>\n<h5 id=\"一路上YES-YES-YES-回车回车就行。-也可以根据提示自己判断。升级完成后（20分钟左右。）\"><a href=\"#一路上YES-YES-YES-回车回车就行。-也可以根据提示自己判断。升级完成后（20分钟左右。）\" class=\"headerlink\" title=\"一路上YES YES YES 回车回车就行。 也可以根据提示自己判断。升级完成后（20分钟左右。）\"></a>一路上YES YES YES 回车回车就行。 也可以根据提示自己判断。升级完成后（20分钟左右。）</h5><h5 id=\"重启后，检查没问题就可以创建自定义镜像\"><a href=\"#重启后，检查没问题就可以创建自定义镜像\" class=\"headerlink\" title=\"重启后，检查没问题就可以创建自定义镜像\"></a>重启后，检查没问题就可以创建自定义镜像</h5><p><a href=\"https://help.aliyun.com/knowledge_detail/40549.html\" target=\"_blank\" rel=\"external\">自定义镜像官网指导</a></p>\n<h2 id=\"搞定。\"><a href=\"#搞定。\" class=\"headerlink\" title=\"搞定。\"></a>搞定。</h2><p>@skipper</p>\n","excerpt":"","more":"<h4 id=\"aliyun获取ubuntu16-04\"><a href=\"#aliyun获取ubuntu16-04\" class=\"headerlink\" title=\"aliyun获取ubuntu16.04\"></a>aliyun获取ubuntu16.04</h4><p><em>截止到2016年阿里云还没在ECS新建实例里提供Ubuntu16.04版本</em><br>因为最近docker的发展，很多新东西都是使用ubuntu16.04.<br>比如kubernetes.io 里面的guides 使用的ubuntu16.04，其实 14.04也行。</p>\n<p>废话不多说。在阿里云使用ubuntu16.04 LTS版本目前我就知道一种<br>先购买一台使用ubuntu 14.04镜像的ECS，然后升级到16.04，如果机器很多，可以一台升级，然后做<br>成自定义镜像。这样以后都可以直接部署了。和VM一样。</p>\n<p><em>那么问题来了，怎么升级呢</em><br><strong>Easy！</strong><br>1, 先更新系统保证更新过程不出错。（依赖问题）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt update \\</div><div class=\"line\">&amp;&amp; apt dist-upgrade</div></pre></td></tr></table></figure></p>\n<p>2, 然后使用screen -S update 新建个screen<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">screen -S update</div></pre></td></tr></table></figure></p>\n<p>3, 升级！ (保障有外网哦)<br>#TIPS 可以删除/etc/apt/source.list.d/sources-aliyun-1.list 或者改名非.list<br># 这样可以使用阿里云提供的内网镜像仓库，加快速度。<br><em>GO!</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">do</span>-release-upgrade</div></pre></td></tr></table></figure></p>\n<h5 id=\"一路上YES-YES-YES-回车回车就行。-也可以根据提示自己判断。升级完成后（20分钟左右。）\"><a href=\"#一路上YES-YES-YES-回车回车就行。-也可以根据提示自己判断。升级完成后（20分钟左右。）\" class=\"headerlink\" title=\"一路上YES YES YES 回车回车就行。 也可以根据提示自己判断。升级完成后（20分钟左右。）\"></a>一路上YES YES YES 回车回车就行。 也可以根据提示自己判断。升级完成后（20分钟左右。）</h5><h5 id=\"重启后，检查没问题就可以创建自定义镜像\"><a href=\"#重启后，检查没问题就可以创建自定义镜像\" class=\"headerlink\" title=\"重启后，检查没问题就可以创建自定义镜像\"></a>重启后，检查没问题就可以创建自定义镜像</h5><p><a href=\"https://help.aliyun.com/knowledge_detail/40549.html\">自定义镜像官网指导</a></p>\n<h2 id=\"搞定。\"><a href=\"#搞定。\" class=\"headerlink\" title=\"搞定。\"></a>搞定。</h2><p>@skipper</p>\n"},{"title":"一个mv命令引发的思考","date":"2015-12-24T05:42:25.000Z","_content":"``` bash\nmv /* /www/html\n```\n就是这个罪魁祸首，\n前天帮忙同学在腾讯云上配置LAMP+WORDPRESS环境\n本来因为轻车熟路，一路畅通，都完成了后，我同学因为是在学web开发的，就想让我建个虚拟主机，放他自己的源码自己的网站，\n没问题，easy。因为当时要准备去食堂就是站着敲命令的就\n赶紧安装个scp工具就开始上传。传完了。解压，放到网站目录下，授权\nok。\n然后ls一下\n然后发现ls不能用了，所有命令不能用了。\n然后我查了我终端日志。发现我多打了个/ 醉了，整个根目录GG。然后我就傻了，同学也看着一愣愣的。我犯大错了。还好是新系统，只能重新做系统，重新搭建了。\n\n虽然一会功夫我就完成了，没出错，但是我到现在2天过去了，心情都不能平复。这如果是我工作上的机器，那我不是GG了。这也是我从接触LINUX到现在第一次出现这种事情。\n我好好的总结了：\n\n### 1，一定要对自己敲的每一个命令负责任\n\n### 2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\n\n### 3，关键业务机器，要做好及时的备份，快照。\n\n### 4，3大命令必须非常谨慎 rm mv chmod \n\n2015.12.24\nfrom OS X by skipper use Blogo","source":"_posts/一个mv命令引发的思考.md","raw":"---\ntitle: 一个mv命令引发的思考\ntags:\n  - 随便写写\ncategories:\n  - 随笔\ndate: 2015-12-24 13:42:25\n---\n``` bash\nmv /* /www/html\n```\n就是这个罪魁祸首，\n前天帮忙同学在腾讯云上配置LAMP+WORDPRESS环境\n本来因为轻车熟路，一路畅通，都完成了后，我同学因为是在学web开发的，就想让我建个虚拟主机，放他自己的源码自己的网站，\n没问题，easy。因为当时要准备去食堂就是站着敲命令的就\n赶紧安装个scp工具就开始上传。传完了。解压，放到网站目录下，授权\nok。\n然后ls一下\n然后发现ls不能用了，所有命令不能用了。\n然后我查了我终端日志。发现我多打了个/ 醉了，整个根目录GG。然后我就傻了，同学也看着一愣愣的。我犯大错了。还好是新系统，只能重新做系统，重新搭建了。\n\n虽然一会功夫我就完成了，没出错，但是我到现在2天过去了，心情都不能平复。这如果是我工作上的机器，那我不是GG了。这也是我从接触LINUX到现在第一次出现这种事情。\n我好好的总结了：\n\n### 1，一定要对自己敲的每一个命令负责任\n\n### 2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\n\n### 3，关键业务机器，要做好及时的备份，快照。\n\n### 4，3大命令必须非常谨慎 rm mv chmod \n\n2015.12.24\nfrom OS X by skipper use Blogo","slug":"一个mv命令引发的思考","published":1,"updated":"2016-10-25T07:36:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqj0008uyxuagl8259x","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv /* /www/html</div></pre></td></tr></table></figure>\n<p>就是这个罪魁祸首，<br>前天帮忙同学在腾讯云上配置LAMP+WORDPRESS环境<br>本来因为轻车熟路，一路畅通，都完成了后，我同学因为是在学web开发的，就想让我建个虚拟主机，放他自己的源码自己的网站，<br>没问题，easy。因为当时要准备去食堂就是站着敲命令的就<br>赶紧安装个scp工具就开始上传。传完了。解压，放到网站目录下，授权<br>ok。<br>然后ls一下<br>然后发现ls不能用了，所有命令不能用了。<br>然后我查了我终端日志。发现我多打了个/ 醉了，整个根目录GG。然后我就傻了，同学也看着一愣愣的。我犯大错了。还好是新系统，只能重新做系统，重新搭建了。</p>\n<p>虽然一会功夫我就完成了，没出错，但是我到现在2天过去了，心情都不能平复。这如果是我工作上的机器，那我不是GG了。这也是我从接触LINUX到现在第一次出现这种事情。<br>我好好的总结了：</p>\n<h3 id=\"1，一定要对自己敲的每一个命令负责任\"><a href=\"#1，一定要对自己敲的每一个命令负责任\" class=\"headerlink\" title=\"1，一定要对自己敲的每一个命令负责任\"></a>1，一定要对自己敲的每一个命令负责任</h3><h3 id=\"2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\"><a href=\"#2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\" class=\"headerlink\" title=\"2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\"></a>2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）</h3><h3 id=\"3，关键业务机器，要做好及时的备份，快照。\"><a href=\"#3，关键业务机器，要做好及时的备份，快照。\" class=\"headerlink\" title=\"3，关键业务机器，要做好及时的备份，快照。\"></a>3，关键业务机器，要做好及时的备份，快照。</h3><h3 id=\"4，3大命令必须非常谨慎-rm-mv-chmod\"><a href=\"#4，3大命令必须非常谨慎-rm-mv-chmod\" class=\"headerlink\" title=\"4，3大命令必须非常谨慎 rm mv chmod\"></a>4，3大命令必须非常谨慎 rm mv chmod</h3><p>2015.12.24<br>from OS X by skipper use Blogo</p>\n","excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv /* /www/html</div></pre></td></tr></table></figure>\n<p>就是这个罪魁祸首，<br>前天帮忙同学在腾讯云上配置LAMP+WORDPRESS环境<br>本来因为轻车熟路，一路畅通，都完成了后，我同学因为是在学web开发的，就想让我建个虚拟主机，放他自己的源码自己的网站，<br>没问题，easy。因为当时要准备去食堂就是站着敲命令的就<br>赶紧安装个scp工具就开始上传。传完了。解压，放到网站目录下，授权<br>ok。<br>然后ls一下<br>然后发现ls不能用了，所有命令不能用了。<br>然后我查了我终端日志。发现我多打了个/ 醉了，整个根目录GG。然后我就傻了，同学也看着一愣愣的。我犯大错了。还好是新系统，只能重新做系统，重新搭建了。</p>\n<p>虽然一会功夫我就完成了，没出错，但是我到现在2天过去了，心情都不能平复。这如果是我工作上的机器，那我不是GG了。这也是我从接触LINUX到现在第一次出现这种事情。<br>我好好的总结了：</p>\n<h3 id=\"1，一定要对自己敲的每一个命令负责任\"><a href=\"#1，一定要对自己敲的每一个命令负责任\" class=\"headerlink\" title=\"1，一定要对自己敲的每一个命令负责任\"></a>1，一定要对自己敲的每一个命令负责任</h3><h3 id=\"2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\"><a href=\"#2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\" class=\"headerlink\" title=\"2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）\"></a>2，能不用root操作的任务，坚决不适用root登录系统（都怪CentOS默认root）</h3><h3 id=\"3，关键业务机器，要做好及时的备份，快照。\"><a href=\"#3，关键业务机器，要做好及时的备份，快照。\" class=\"headerlink\" title=\"3，关键业务机器，要做好及时的备份，快照。\"></a>3，关键业务机器，要做好及时的备份，快照。</h3><h3 id=\"4，3大命令必须非常谨慎-rm-mv-chmod\"><a href=\"#4，3大命令必须非常谨慎-rm-mv-chmod\" class=\"headerlink\" title=\"4，3大命令必须非常谨慎 rm mv chmod\"></a>4，3大命令必须非常谨慎 rm mv chmod</h3><p>2015.12.24<br>from OS X by skipper use Blogo</p>\n"},{"title":"关于博客","date":"2015-10-30T10:06:30.000Z","_content":"\n今天再配置以前非常熟悉的一个服务的时候发现还是，不能完全脱离资料。\n突然觉得没必要强迫自己要背诵配置文件，以后博客还是要更新一写，常见的服务的配置资料，尤其是一些细节。\n好记性不如烂笔头，还是有道理的。","source":"_posts/关于博客.md","raw":"---\ntitle: 关于博客\ncategories:\n  - 随笔\ndate: 2015-10-30 18:06:30\ntags:\n  - 随便写写\n---\n\n今天再配置以前非常熟悉的一个服务的时候发现还是，不能完全脱离资料。\n突然觉得没必要强迫自己要背诵配置文件，以后博客还是要更新一写，常见的服务的配置资料，尤其是一些细节。\n好记性不如烂笔头，还是有道理的。","slug":"关于博客","published":1,"updated":"2016-10-25T07:44:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqn000buyxumgp5sgu2","content":"<p>今天再配置以前非常熟悉的一个服务的时候发现还是，不能完全脱离资料。<br>突然觉得没必要强迫自己要背诵配置文件，以后博客还是要更新一写，常见的服务的配置资料，尤其是一些细节。<br>好记性不如烂笔头，还是有道理的。</p>\n","excerpt":"","more":"<p>今天再配置以前非常熟悉的一个服务的时候发现还是，不能完全脱离资料。<br>突然觉得没必要强迫自己要背诵配置文件，以后博客还是要更新一写，常见的服务的配置资料，尤其是一些细节。<br>好记性不如烂笔头，还是有道理的。</p>\n"},{"title":"有关未来工作","date":"2015-11-01T15:02:45.000Z","_content":"\n今天见了几个高中时代非常好的同学，聊到很多关于即将毕业，还有已经毕业找工作的问题。感触还是很多的。但问题无非就是：\n工作不爽，想换。\n工资低，想找个更好的。\n自己不太清楚什么职业好，看见有人某人参加某培训后，工作如何OK，也想尝试。\n我不太清楚未来我能找到什么工作。但我觉得我是真心喜欢这行。关注的很多新技术，新思想。而他们，我感觉他们只是想找个工资高的工作，并没有在意这个行业，或者说他们有他们想关注的，也许是生活上的，或者其他方面，或者自己也不清楚。\n也许是现代大学教育本身如此，并不注重兴趣的培养，也许这原本就是小学老师要教的东西。也许说，现在提兴趣，提爱好，可能觉得我太天真。没被社会强奸过，我不懂。\n不过对我这个也要走出校门的我来说。\n正如我的博客地址。inpeace\n静下心来，好好钻研自己想要学的东西。我想起码我不会后悔。\n因为我真的是喜欢这行。","source":"_posts/关于工作.md","raw":"---\ntitle: 有关未来工作\ncategories:\n  - 随笔\ndate: 2015-11-01 23:02:45\ntags:\n  - 随便写写\npermalink: about-future-work\n---\n\n今天见了几个高中时代非常好的同学，聊到很多关于即将毕业，还有已经毕业找工作的问题。感触还是很多的。但问题无非就是：\n工作不爽，想换。\n工资低，想找个更好的。\n自己不太清楚什么职业好，看见有人某人参加某培训后，工作如何OK，也想尝试。\n我不太清楚未来我能找到什么工作。但我觉得我是真心喜欢这行。关注的很多新技术，新思想。而他们，我感觉他们只是想找个工资高的工作，并没有在意这个行业，或者说他们有他们想关注的，也许是生活上的，或者其他方面，或者自己也不清楚。\n也许是现代大学教育本身如此，并不注重兴趣的培养，也许这原本就是小学老师要教的东西。也许说，现在提兴趣，提爱好，可能觉得我太天真。没被社会强奸过，我不懂。\n不过对我这个也要走出校门的我来说。\n正如我的博客地址。inpeace\n静下心来，好好钻研自己想要学的东西。我想起码我不会后悔。\n因为我真的是喜欢这行。","slug":"about-future-work","published":1,"updated":"2016-10-25T07:44:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqo000duyxumyme23g5","content":"<p>今天见了几个高中时代非常好的同学，聊到很多关于即将毕业，还有已经毕业找工作的问题。感触还是很多的。但问题无非就是：<br>工作不爽，想换。<br>工资低，想找个更好的。<br>自己不太清楚什么职业好，看见有人某人参加某培训后，工作如何OK，也想尝试。<br>我不太清楚未来我能找到什么工作。但我觉得我是真心喜欢这行。关注的很多新技术，新思想。而他们，我感觉他们只是想找个工资高的工作，并没有在意这个行业，或者说他们有他们想关注的，也许是生活上的，或者其他方面，或者自己也不清楚。<br>也许是现代大学教育本身如此，并不注重兴趣的培养，也许这原本就是小学老师要教的东西。也许说，现在提兴趣，提爱好，可能觉得我太天真。没被社会强奸过，我不懂。<br>不过对我这个也要走出校门的我来说。<br>正如我的博客地址。inpeace<br>静下心来，好好钻研自己想要学的东西。我想起码我不会后悔。<br>因为我真的是喜欢这行。</p>\n","excerpt":"","more":"<p>今天见了几个高中时代非常好的同学，聊到很多关于即将毕业，还有已经毕业找工作的问题。感触还是很多的。但问题无非就是：<br>工作不爽，想换。<br>工资低，想找个更好的。<br>自己不太清楚什么职业好，看见有人某人参加某培训后，工作如何OK，也想尝试。<br>我不太清楚未来我能找到什么工作。但我觉得我是真心喜欢这行。关注的很多新技术，新思想。而他们，我感觉他们只是想找个工资高的工作，并没有在意这个行业，或者说他们有他们想关注的，也许是生活上的，或者其他方面，或者自己也不清楚。<br>也许是现代大学教育本身如此，并不注重兴趣的培养，也许这原本就是小学老师要教的东西。也许说，现在提兴趣，提爱好，可能觉得我太天真。没被社会强奸过，我不懂。<br>不过对我这个也要走出校门的我来说。<br>正如我的博客地址。inpeace<br>静下心来，好好钻研自己想要学的东西。我想起码我不会后悔。<br>因为我真的是喜欢这行。</p>\n"},{"title":"判断linux系统是32位还是64位的一个命令","date":"2015-12-09T12:14:16.000Z","_content":"\n ``` bash\ngetconf LONG_BIT \n```\n使用\n``` bash\nuname -m \n```\n也是可以的但是偶然发现的这个命令,感觉高大上.","source":"_posts/判断cpu架构.md","raw":"---\ntitle: 判断linux系统是32位还是64位的一个命令\ntags:\n  - linux\n  - shell\ncategories:\n  - Docs\ndate: 2015-12-09 20:14:16\npermalink: 32-or-64\n---\n\n ``` bash\ngetconf LONG_BIT \n```\n使用\n``` bash\nuname -m \n```\n也是可以的但是偶然发现的这个命令,感觉高大上.","slug":"32-or-64","published":1,"updated":"2016-10-25T07:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqp000huyxur1f98dk7","content":" <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getconf LONG_BIT</div></pre></td></tr></table></figure>\n<p>使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -m</div></pre></td></tr></table></figure></p>\n<p>也是可以的但是偶然发现的这个命令,感觉高大上.</p>\n","excerpt":"","more":" <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getconf LONG_BIT</div></pre></td></tr></table></figure>\n<p>使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -m</div></pre></td></tr></table></figure></p>\n<p>也是可以的但是偶然发现的这个命令,感觉高大上.</p>\n"},{"title":"echo $? 检测命令成功还是失败","date":"2015-12-16T02:41:18.000Z","_content":"\nFOR BEGINNER\n\n当你做个很长的命令，比如编译啊，安装啊，或者什么的时候，新手看太懂输出的时候.\n请在执行完成后,在执行以下命令\n``` bash\ncho $?\n```\n\n* 0 表示成功\n* 非0表示失败","source":"_posts/判断命令执行结果.md","raw":"---\ntitle: echo $? 检测命令成功还是失败\ntags:\n  - linux\n  - shell\n  - 实用工具\ncategories:\n  - Docs\ndate: 2015-12-16 10:41:18\npermalink: a-nice-tips-for-new-0\n---\n\nFOR BEGINNER\n\n当你做个很长的命令，比如编译啊，安装啊，或者什么的时候，新手看太懂输出的时候.\n请在执行完成后,在执行以下命令\n``` bash\ncho $?\n```\n\n* 0 表示成功\n* 非0表示失败","slug":"a-nice-tips-for-new-0","published":1,"updated":"2016-10-25T07:40:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqr000kuyxuqgq2afll","content":"<p>FOR BEGINNER</p>\n<p>当你做个很长的命令，比如编译啊，安装啊，或者什么的时候，新手看太懂输出的时候.<br>请在执行完成后,在执行以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cho $?</div></pre></td></tr></table></figure></p>\n<ul>\n<li>0 表示成功</li>\n<li>非0表示失败</li>\n</ul>\n","excerpt":"","more":"<p>FOR BEGINNER</p>\n<p>当你做个很长的命令，比如编译啊，安装啊，或者什么的时候，新手看太懂输出的时候.<br>请在执行完成后,在执行以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cho $?</div></pre></td></tr></table></figure></p>\n<ul>\n<li>0 表示成功</li>\n<li>非0表示失败</li>\n</ul>\n"},{"title":"学习是个反复的回顾的历程，学习记录非常关键","date":"2015-12-08T14:44:15.000Z","_content":"\n学习的过程，如果没有复习，那么感觉=只是知道并没有会.\n会这个词，可能因人而异，有人认为会就是我知道是什么东西，给我时间我能搞定，\n\n曾经我也是这样认为，我一直要求自己要多了解，认为，忘记是正常的，但是我却忘记了，给自己复习留下很好的记录。\n\n我一直都是潦草的，零散的记录，有写在onenote，有写在os x note,还有写在文本文件里面。\n\n今天我做iptables的实验的时候，感觉乱七八糟的，不能很有效的找到记录，快速的回想起来内容，\n\n这不是我想要的结果。\n\n所以以后要对学习记录，包括代码，笔记，能做统一的管理。有条理性。","source":"_posts/学习的思考.md","raw":"---\ntitle: 学习是个反复的回顾的历程，学习记录非常关键\ntags:\n  - 随便写写\ncategories:\n  - 随笔\ndate: 2015-12-08 22:44:15\npermalink: think-about-learn-0\n---\n\n学习的过程，如果没有复习，那么感觉=只是知道并没有会.\n会这个词，可能因人而异，有人认为会就是我知道是什么东西，给我时间我能搞定，\n\n曾经我也是这样认为，我一直要求自己要多了解，认为，忘记是正常的，但是我却忘记了，给自己复习留下很好的记录。\n\n我一直都是潦草的，零散的记录，有写在onenote，有写在os x note,还有写在文本文件里面。\n\n今天我做iptables的实验的时候，感觉乱七八糟的，不能很有效的找到记录，快速的回想起来内容，\n\n这不是我想要的结果。\n\n所以以后要对学习记录，包括代码，笔记，能做统一的管理。有条理性。","slug":"think-about-learn-0","published":1,"updated":"2016-10-25T07:37:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqs000ouyxulft2dz3c","content":"<p>学习的过程，如果没有复习，那么感觉=只是知道并没有会.<br>会这个词，可能因人而异，有人认为会就是我知道是什么东西，给我时间我能搞定，</p>\n<p>曾经我也是这样认为，我一直要求自己要多了解，认为，忘记是正常的，但是我却忘记了，给自己复习留下很好的记录。</p>\n<p>我一直都是潦草的，零散的记录，有写在onenote，有写在os x note,还有写在文本文件里面。</p>\n<p>今天我做iptables的实验的时候，感觉乱七八糟的，不能很有效的找到记录，快速的回想起来内容，</p>\n<p>这不是我想要的结果。</p>\n<p>所以以后要对学习记录，包括代码，笔记，能做统一的管理。有条理性。</p>\n","excerpt":"","more":"<p>学习的过程，如果没有复习，那么感觉=只是知道并没有会.<br>会这个词，可能因人而异，有人认为会就是我知道是什么东西，给我时间我能搞定，</p>\n<p>曾经我也是这样认为，我一直要求自己要多了解，认为，忘记是正常的，但是我却忘记了，给自己复习留下很好的记录。</p>\n<p>我一直都是潦草的，零散的记录，有写在onenote，有写在os x note,还有写在文本文件里面。</p>\n<p>今天我做iptables的实验的时候，感觉乱七八糟的，不能很有效的找到记录，快速的回想起来内容，</p>\n<p>这不是我想要的结果。</p>\n<p>所以以后要对学习记录，包括代码，笔记，能做统一的管理。有条理性。</p>\n"},{"title":"常见服务性能监控项目","date":"2016-03-05T10:49:46.000Z","_content":"\nApache性能监控支持以下指标：\nApache吞吐率\nApache并发连接数\nApache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接\n![apache_1](../s/03/apache_1.png)\n\n\nNginx性能监控\n\nnginx吞吐率\nnginx并发连接数\nnginx并发连接数详细统计：包括读取请求，处理请求和发送响应，持久连接\nnginx持久连接利用率\n\nApache性能监控支持以下指标：\n\nApache吞吐率\nApache并发连接数\nApache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接\n\nmysql性能监控:\n\n\tMySQL查询吞吐率，包括Change DB、Select、Insert、Update、Delete\n\tMySQL持久连接利用率\n\tMySQL查询缓存空间使用率\n\tMySQL查询缓存命中率\n\tMySQL缓存查询数\n\tMySQL索引缓存命中率\n\tMySQL索引读取统计\n\tMySQL连接吞吐率\n\tMySQL连接缓存命中率\n\tMySQL并发连接数，包括最大允许连接数、实际最大连接数、当前连接数、活跃连接数、缓存连接数\n\tMySQL流量统计\n\tMySQL表统计锁定\n![mysql_1](../s/03/mysql_1.png)\n\nMemcache性能监控：\n\nMemcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；\nMemcache当前链接数，即当前已经建立的链接数量；\nMemcache链接数每秒，即单位时间内新建立的链接数量；\nMemcache使用内存，即当前存储的items所占用的字节数；\nMemcache当前条目数量，即当前存储的items数量；\nMemcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；\n\nTomcat性能监控：\n\nJVM内存，包括JVM可使用内存、JVM所使用内存、JVM最大可使用内存；\nTomcat请求数，包括每秒请求数，每秒出错数；\nTomcat网络流量统计，包括进流量统计，出流量统计；\nTomcat线程，包括最大线程数，当前线程数，当前繁忙线程数；\nTomcat处理时间，包括最大处理时间，平均处理时间；\nMemcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小\n\nMongoDB性能监控：\n\nMongoDB全局锁时间比例。此指标反映MongoDB进入锁状态的时间比例。\nMongoDB当前等待锁总数。是读锁数和写锁数的总和。\nMongoDB当前等待读锁数。因读请求过高时触发的锁数。\nMongoDB当前等待写锁数。因写请求过高时触发的锁数。\nMongoDB查询吞吐率。也就是MongoDB每秒处理的请求数，根据请求类别的不一样细分有query，update，delete，getmore吞吐率。\nMongoDB使用内存，使用磁盘空间。此指标能反映MongoDB使用内存，磁盘空间的状况。\nMongoDB分页次数，此指标反映内存分页的次数，有助于对MongoDB的性能分析。\nMongoDB索引命中率，即单位总命中次数除以总命中次数与未命中次数之和。\nMongoDB索引访问次数每秒，此指标反映索引的使用频率。\nMongoDB当前链接数，可用链接数。\n\nMemcache性能监控指标：\n\nMemcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；\nMemcache当前链接数，即当前已经建立的链接数量；\nMemcache链接数每秒，即单位时间内新建立的链接数量；\nMemcache使用内存，即当前存储的items所占用的字节数；\nMemcache当前条目数量，即当前存储的items数量；\nMemcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；\nMemcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小\n\nRedis性能监控：\n\nRedis链接客户数。\nRedis链接从库数。此指标反映Redis的从库链接数。\nRedis链接数每分钟。此指标反映Redis的请求频率。\nRedis阻塞客户数。当并发请求数过高时触发阻塞。此指标反映Redis的并发请求状况。\nRedis Pub/Sub通道数。\nRedis Pub/Sub模式数。\nRedis命中率。即单位总命中次数除以总命中次数与未命中次数之和。\nRedis使用内存。此指标反映Redis当前占用内存量。\nRedis执行命令数每分钟。此指标反映Redis执行命令频率。","source":"_posts/常见服务性能监控项目.md","raw":"---\ntitle: 常见服务性能监控项目\npermalink: monitor-items-0\ntags:\n  - linux\n  - monitor\ncategories:\n  - Docs\n\ndate: 2016-03-05 18:49:46\n---\n\nApache性能监控支持以下指标：\nApache吞吐率\nApache并发连接数\nApache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接\n![apache_1](../s/03/apache_1.png)\n\n\nNginx性能监控\n\nnginx吞吐率\nnginx并发连接数\nnginx并发连接数详细统计：包括读取请求，处理请求和发送响应，持久连接\nnginx持久连接利用率\n\nApache性能监控支持以下指标：\n\nApache吞吐率\nApache并发连接数\nApache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接\n\nmysql性能监控:\n\n\tMySQL查询吞吐率，包括Change DB、Select、Insert、Update、Delete\n\tMySQL持久连接利用率\n\tMySQL查询缓存空间使用率\n\tMySQL查询缓存命中率\n\tMySQL缓存查询数\n\tMySQL索引缓存命中率\n\tMySQL索引读取统计\n\tMySQL连接吞吐率\n\tMySQL连接缓存命中率\n\tMySQL并发连接数，包括最大允许连接数、实际最大连接数、当前连接数、活跃连接数、缓存连接数\n\tMySQL流量统计\n\tMySQL表统计锁定\n![mysql_1](../s/03/mysql_1.png)\n\nMemcache性能监控：\n\nMemcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；\nMemcache当前链接数，即当前已经建立的链接数量；\nMemcache链接数每秒，即单位时间内新建立的链接数量；\nMemcache使用内存，即当前存储的items所占用的字节数；\nMemcache当前条目数量，即当前存储的items数量；\nMemcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；\n\nTomcat性能监控：\n\nJVM内存，包括JVM可使用内存、JVM所使用内存、JVM最大可使用内存；\nTomcat请求数，包括每秒请求数，每秒出错数；\nTomcat网络流量统计，包括进流量统计，出流量统计；\nTomcat线程，包括最大线程数，当前线程数，当前繁忙线程数；\nTomcat处理时间，包括最大处理时间，平均处理时间；\nMemcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小\n\nMongoDB性能监控：\n\nMongoDB全局锁时间比例。此指标反映MongoDB进入锁状态的时间比例。\nMongoDB当前等待锁总数。是读锁数和写锁数的总和。\nMongoDB当前等待读锁数。因读请求过高时触发的锁数。\nMongoDB当前等待写锁数。因写请求过高时触发的锁数。\nMongoDB查询吞吐率。也就是MongoDB每秒处理的请求数，根据请求类别的不一样细分有query，update，delete，getmore吞吐率。\nMongoDB使用内存，使用磁盘空间。此指标能反映MongoDB使用内存，磁盘空间的状况。\nMongoDB分页次数，此指标反映内存分页的次数，有助于对MongoDB的性能分析。\nMongoDB索引命中率，即单位总命中次数除以总命中次数与未命中次数之和。\nMongoDB索引访问次数每秒，此指标反映索引的使用频率。\nMongoDB当前链接数，可用链接数。\n\nMemcache性能监控指标：\n\nMemcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；\nMemcache当前链接数，即当前已经建立的链接数量；\nMemcache链接数每秒，即单位时间内新建立的链接数量；\nMemcache使用内存，即当前存储的items所占用的字节数；\nMemcache当前条目数量，即当前存储的items数量；\nMemcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；\nMemcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小\n\nRedis性能监控：\n\nRedis链接客户数。\nRedis链接从库数。此指标反映Redis的从库链接数。\nRedis链接数每分钟。此指标反映Redis的请求频率。\nRedis阻塞客户数。当并发请求数过高时触发阻塞。此指标反映Redis的并发请求状况。\nRedis Pub/Sub通道数。\nRedis Pub/Sub模式数。\nRedis命中率。即单位总命中次数除以总命中次数与未命中次数之和。\nRedis使用内存。此指标反映Redis当前占用内存量。\nRedis执行命令数每分钟。此指标反映Redis执行命令频率。","slug":"monitor-items-0","published":1,"updated":"2016-10-25T07:54:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqu000ruyxut1k0qa6t","content":"<p>Apache性能监控支持以下指标：<br>Apache吞吐率<br>Apache并发连接数<br>Apache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接<br><img src=\"../s/03/apache_1.png\" alt=\"apache_1\"></p>\n<p>Nginx性能监控</p>\n<p>nginx吞吐率<br>nginx并发连接数<br>nginx并发连接数详细统计：包括读取请求，处理请求和发送响应，持久连接<br>nginx持久连接利用率</p>\n<p>Apache性能监控支持以下指标：</p>\n<p>Apache吞吐率<br>Apache并发连接数<br>Apache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接</p>\n<p>mysql性能监控:</p>\n<pre><code>MySQL查询吞吐率，包括Change DB、Select、Insert、Update、Delete\nMySQL持久连接利用率\nMySQL查询缓存空间使用率\nMySQL查询缓存命中率\nMySQL缓存查询数\nMySQL索引缓存命中率\nMySQL索引读取统计\nMySQL连接吞吐率\nMySQL连接缓存命中率\nMySQL并发连接数，包括最大允许连接数、实际最大连接数、当前连接数、活跃连接数、缓存连接数\nMySQL流量统计\nMySQL表统计锁定\n</code></pre><p><img src=\"../s/03/mysql_1.png\" alt=\"mysql_1\"></p>\n<p>Memcache性能监控：</p>\n<p>Memcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；<br>Memcache当前链接数，即当前已经建立的链接数量；<br>Memcache链接数每秒，即单位时间内新建立的链接数量；<br>Memcache使用内存，即当前存储的items所占用的字节数；<br>Memcache当前条目数量，即当前存储的items数量；<br>Memcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；</p>\n<p>Tomcat性能监控：</p>\n<p>JVM内存，包括JVM可使用内存、JVM所使用内存、JVM最大可使用内存；<br>Tomcat请求数，包括每秒请求数，每秒出错数；<br>Tomcat网络流量统计，包括进流量统计，出流量统计；<br>Tomcat线程，包括最大线程数，当前线程数，当前繁忙线程数；<br>Tomcat处理时间，包括最大处理时间，平均处理时间；<br>Memcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小</p>\n<p>MongoDB性能监控：</p>\n<p>MongoDB全局锁时间比例。此指标反映MongoDB进入锁状态的时间比例。<br>MongoDB当前等待锁总数。是读锁数和写锁数的总和。<br>MongoDB当前等待读锁数。因读请求过高时触发的锁数。<br>MongoDB当前等待写锁数。因写请求过高时触发的锁数。<br>MongoDB查询吞吐率。也就是MongoDB每秒处理的请求数，根据请求类别的不一样细分有query，update，delete，getmore吞吐率。<br>MongoDB使用内存，使用磁盘空间。此指标能反映MongoDB使用内存，磁盘空间的状况。<br>MongoDB分页次数，此指标反映内存分页的次数，有助于对MongoDB的性能分析。<br>MongoDB索引命中率，即单位总命中次数除以总命中次数与未命中次数之和。<br>MongoDB索引访问次数每秒，此指标反映索引的使用频率。<br>MongoDB当前链接数，可用链接数。</p>\n<p>Memcache性能监控指标：</p>\n<p>Memcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；<br>Memcache当前链接数，即当前已经建立的链接数量；<br>Memcache链接数每秒，即单位时间内新建立的链接数量；<br>Memcache使用内存，即当前存储的items所占用的字节数；<br>Memcache当前条目数量，即当前存储的items数量；<br>Memcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；<br>Memcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小</p>\n<p>Redis性能监控：</p>\n<p>Redis链接客户数。<br>Redis链接从库数。此指标反映Redis的从库链接数。<br>Redis链接数每分钟。此指标反映Redis的请求频率。<br>Redis阻塞客户数。当并发请求数过高时触发阻塞。此指标反映Redis的并发请求状况。<br>Redis Pub/Sub通道数。<br>Redis Pub/Sub模式数。<br>Redis命中率。即单位总命中次数除以总命中次数与未命中次数之和。<br>Redis使用内存。此指标反映Redis当前占用内存量。<br>Redis执行命令数每分钟。此指标反映Redis执行命令频率。</p>\n","excerpt":"","more":"<p>Apache性能监控支持以下指标：<br>Apache吞吐率<br>Apache并发连接数<br>Apache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接<br><img src=\"../s/03/apache_1.png\" alt=\"apache_1\"></p>\n<p>Nginx性能监控</p>\n<p>nginx吞吐率<br>nginx并发连接数<br>nginx并发连接数详细统计：包括读取请求，处理请求和发送响应，持久连接<br>nginx持久连接利用率</p>\n<p>Apache性能监控支持以下指标：</p>\n<p>Apache吞吐率<br>Apache并发连接数<br>Apache并发连接数详细统计，包括读取请求、持久连接、发送响应内容、关闭连接、等待连接</p>\n<p>mysql性能监控:</p>\n<pre><code>MySQL查询吞吐率，包括Change DB、Select、Insert、Update、Delete\nMySQL持久连接利用率\nMySQL查询缓存空间使用率\nMySQL查询缓存命中率\nMySQL缓存查询数\nMySQL索引缓存命中率\nMySQL索引读取统计\nMySQL连接吞吐率\nMySQL连接缓存命中率\nMySQL并发连接数，包括最大允许连接数、实际最大连接数、当前连接数、活跃连接数、缓存连接数\nMySQL流量统计\nMySQL表统计锁定\n</code></pre><p><img src=\"../s/03/mysql_1.png\" alt=\"mysql_1\"></p>\n<p>Memcache性能监控：</p>\n<p>Memcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；<br>Memcache当前链接数，即当前已经建立的链接数量；<br>Memcache链接数每秒，即单位时间内新建立的链接数量；<br>Memcache使用内存，即当前存储的items所占用的字节数；<br>Memcache当前条目数量，即当前存储的items数量；<br>Memcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；</p>\n<p>Tomcat性能监控：</p>\n<p>JVM内存，包括JVM可使用内存、JVM所使用内存、JVM最大可使用内存；<br>Tomcat请求数，包括每秒请求数，每秒出错数；<br>Tomcat网络流量统计，包括进流量统计，出流量统计；<br>Tomcat线程，包括最大线程数，当前线程数，当前繁忙线程数；<br>Tomcat处理时间，包括最大处理时间，平均处理时间；<br>Memcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小</p>\n<p>MongoDB性能监控：</p>\n<p>MongoDB全局锁时间比例。此指标反映MongoDB进入锁状态的时间比例。<br>MongoDB当前等待锁总数。是读锁数和写锁数的总和。<br>MongoDB当前等待读锁数。因读请求过高时触发的锁数。<br>MongoDB当前等待写锁数。因写请求过高时触发的锁数。<br>MongoDB查询吞吐率。也就是MongoDB每秒处理的请求数，根据请求类别的不一样细分有query，update，delete，getmore吞吐率。<br>MongoDB使用内存，使用磁盘空间。此指标能反映MongoDB使用内存，磁盘空间的状况。<br>MongoDB分页次数，此指标反映内存分页的次数，有助于对MongoDB的性能分析。<br>MongoDB索引命中率，即单位总命中次数除以总命中次数与未命中次数之和。<br>MongoDB索引访问次数每秒，此指标反映索引的使用频率。<br>MongoDB当前链接数，可用链接数。</p>\n<p>Memcache性能监控指标：</p>\n<p>Memcache缓存命中率，即单位总命中次数除以总命中次数与未命中次数之和；<br>Memcache当前链接数，即当前已经建立的链接数量；<br>Memcache链接数每秒，即单位时间内新建立的链接数量；<br>Memcache使用内存，即当前存储的items所占用的字节数；<br>Memcache当前条目数量，即当前存储的items数量；<br>Memcache读写每秒，分为读每秒和写每秒，读每秒是指单位时间内新增的读的次数，写每秒是指单位时间内新增的写的次数；<br>Memcache空间使用率，当前存储的items所占用的字节数除以系统分配给Memcache的内存大小</p>\n<p>Redis性能监控：</p>\n<p>Redis链接客户数。<br>Redis链接从库数。此指标反映Redis的从库链接数。<br>Redis链接数每分钟。此指标反映Redis的请求频率。<br>Redis阻塞客户数。当并发请求数过高时触发阻塞。此指标反映Redis的并发请求状况。<br>Redis Pub/Sub通道数。<br>Redis Pub/Sub模式数。<br>Redis命中率。即单位总命中次数除以总命中次数与未命中次数之和。<br>Redis使用内存。此指标反映Redis当前占用内存量。<br>Redis执行命令数每分钟。此指标反映Redis执行命令频率。</p>\n"},{"title":"ready to use hexo","date":"2016-10-23T03:39:20.000Z","description":"使用hexo 代替wordpress来写博客。","_content":"\n## 新的开始，使用markdown来书写博客\n  因为工作的时候还是平时的记录，习惯用md的后缀来存储日常的记录，脚本啊，架构方案，\n亦或是没事写两句，有时候想弄到wordpress太麻烦，一直想弄个静态博客，却因为最近忙于工作\n没什么时间，近日终于得闲，研究了2天的hexo，终于算是确定好新的家了。\n\n## 以前的博客也要慢慢的迁移过来，具体是\n* 筛选以前有意义的文章或者记录。\n* 确定新的分类和标签规则 ##以前的太乱。\n* 开始重新书写博客，顺便练习这个markdown。\n* 启用新的域名 mufen.me 取义木玢和我 （木玢是我对爱人的简称）\n* 新博客将添加我的非工作学习内容，如娱乐之类。\n\n## ready go\n","source":"_posts/放弃wordpress，拥抱hexo.md","raw":"title: ready to use hexo \ndate: 2016/10/23 11:39:20\ndescription: 使用hexo 代替wordpress来写博客。\ncategories: plan\ntags:\n - markdown\n - blog\n---\n\n## 新的开始，使用markdown来书写博客\n  因为工作的时候还是平时的记录，习惯用md的后缀来存储日常的记录，脚本啊，架构方案，\n亦或是没事写两句，有时候想弄到wordpress太麻烦，一直想弄个静态博客，却因为最近忙于工作\n没什么时间，近日终于得闲，研究了2天的hexo，终于算是确定好新的家了。\n\n## 以前的博客也要慢慢的迁移过来，具体是\n* 筛选以前有意义的文章或者记录。\n* 确定新的分类和标签规则 ##以前的太乱。\n* 开始重新书写博客，顺便练习这个markdown。\n* 启用新的域名 mufen.me 取义木玢和我 （木玢是我对爱人的简称）\n* 新博客将添加我的非工作学习内容，如娱乐之类。\n\n## ready go\n","slug":"放弃wordpress，拥抱hexo","published":1,"updated":"2016-10-25T07:46:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqw000wuyxua4uprktz","content":"<h2 id=\"新的开始，使用markdown来书写博客\"><a href=\"#新的开始，使用markdown来书写博客\" class=\"headerlink\" title=\"新的开始，使用markdown来书写博客\"></a>新的开始，使用markdown来书写博客</h2><p>  因为工作的时候还是平时的记录，习惯用md的后缀来存储日常的记录，脚本啊，架构方案，<br>亦或是没事写两句，有时候想弄到wordpress太麻烦，一直想弄个静态博客，却因为最近忙于工作<br>没什么时间，近日终于得闲，研究了2天的hexo，终于算是确定好新的家了。</p>\n<h2 id=\"以前的博客也要慢慢的迁移过来，具体是\"><a href=\"#以前的博客也要慢慢的迁移过来，具体是\" class=\"headerlink\" title=\"以前的博客也要慢慢的迁移过来，具体是\"></a>以前的博客也要慢慢的迁移过来，具体是</h2><ul>\n<li>筛选以前有意义的文章或者记录。</li>\n<li>确定新的分类和标签规则 ##以前的太乱。</li>\n<li>开始重新书写博客，顺便练习这个markdown。</li>\n<li>启用新的域名 mufen.me 取义木玢和我 （木玢是我对爱人的简称）</li>\n<li>新博客将添加我的非工作学习内容，如娱乐之类。</li>\n</ul>\n<h2 id=\"ready-go\"><a href=\"#ready-go\" class=\"headerlink\" title=\"ready go\"></a>ready go</h2>","excerpt":"","more":"<h2 id=\"新的开始，使用markdown来书写博客\"><a href=\"#新的开始，使用markdown来书写博客\" class=\"headerlink\" title=\"新的开始，使用markdown来书写博客\"></a>新的开始，使用markdown来书写博客</h2><p>  因为工作的时候还是平时的记录，习惯用md的后缀来存储日常的记录，脚本啊，架构方案，<br>亦或是没事写两句，有时候想弄到wordpress太麻烦，一直想弄个静态博客，却因为最近忙于工作<br>没什么时间，近日终于得闲，研究了2天的hexo，终于算是确定好新的家了。</p>\n<h2 id=\"以前的博客也要慢慢的迁移过来，具体是\"><a href=\"#以前的博客也要慢慢的迁移过来，具体是\" class=\"headerlink\" title=\"以前的博客也要慢慢的迁移过来，具体是\"></a>以前的博客也要慢慢的迁移过来，具体是</h2><ul>\n<li>筛选以前有意义的文章或者记录。</li>\n<li>确定新的分类和标签规则 ##以前的太乱。</li>\n<li>开始重新书写博客，顺便练习这个markdown。</li>\n<li>启用新的域名 mufen.me 取义木玢和我 （木玢是我对爱人的简称）</li>\n<li>新博客将添加我的非工作学习内容，如娱乐之类。</li>\n</ul>\n<h2 id=\"ready-go\"><a href=\"#ready-go\" class=\"headerlink\" title=\"ready go\"></a>ready go</h2>"},{"title":"用python设定saltstack的自定义grains","date":"2015-12-02T01:53:35.000Z","_content":"\n参考官方文档\n[http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains](http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains)\nThe grains interface is derived by executing all of the \"public\" functions found in the modules located in the grains package or the custom grains directory. The functions in the modules of the grains must return a Python dict, where the keys in the dict are the names of the grains and the values are the values.\n\nCustom grains should be placed in a _grains directory located under the file_roots specified by the master config file. The default path would be /srv/salt/_grains. Custom grains will be distributed to the minions when **state.highstat**e is run, or by executing the **saltutil.sync_grains** or **saltutil.sync_all** functions.\n<!--more-->\n\nGrains are easy to write, and only need to return a dictionary. A common approach would be code something similar to the following:\n\n<pre class=\"lang:default decode:true \" >#!/usr/bin/env python\ndef yourfunction():\n     # initialize a grains dictionary\n     grains = {}\n     # Some code for logic that sets grains like\n     grains['yourcustomgrain']=True\n     grains['anothergrain']='somevalue'\n     return grains\n</pre> \n\n举个例子：配置web服务用到的max_open_file\n\n<pre class=\"lang:default decode:true \" >#!/usr/bin/env python\n\nimport os,sys,commands\n\ndef Grains_openfile():\n        '''\n        use ulimit -n get max_open_file then return to grians\n        by skipper\n        inpeace.cn\n        '''\n        grains = {}\n        _open_file=65536\n        try:\n                getulimit=commands.getstatusoutput('source /etc/profile;ulimit -n')\n        except Exception,e:\n                pass\n        if getulimit[0]==0:\n                _open_file=int(getulimit[1])\n        grains['max_open_file'] = _open_file\n        return grains</pre> \n\n然后执行 \n\n<pre class=\"lang:default decode:true \" >salt '*' saltutil.sync_all</pre> \n\n使用 \n\n<pre class=\"lang:default decode:true \" >salt '*' grains.item max_open_file</pre> \n\n查看结果","source":"_posts/用python设定saltstack的自定义grains.md","raw":"---\ntitle: 用python设定saltstack的自定义grains\ntags:\n  - python\n  - saltstack\ncategories:\n  - Docs\ndate: 2015-12-02 09:53:35\n---\n\n参考官方文档\n[http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains](http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains)\nThe grains interface is derived by executing all of the \"public\" functions found in the modules located in the grains package or the custom grains directory. The functions in the modules of the grains must return a Python dict, where the keys in the dict are the names of the grains and the values are the values.\n\nCustom grains should be placed in a _grains directory located under the file_roots specified by the master config file. The default path would be /srv/salt/_grains. Custom grains will be distributed to the minions when **state.highstat**e is run, or by executing the **saltutil.sync_grains** or **saltutil.sync_all** functions.\n<!--more-->\n\nGrains are easy to write, and only need to return a dictionary. A common approach would be code something similar to the following:\n\n<pre class=\"lang:default decode:true \" >#!/usr/bin/env python\ndef yourfunction():\n     # initialize a grains dictionary\n     grains = {}\n     # Some code for logic that sets grains like\n     grains['yourcustomgrain']=True\n     grains['anothergrain']='somevalue'\n     return grains\n</pre> \n\n举个例子：配置web服务用到的max_open_file\n\n<pre class=\"lang:default decode:true \" >#!/usr/bin/env python\n\nimport os,sys,commands\n\ndef Grains_openfile():\n        '''\n        use ulimit -n get max_open_file then return to grians\n        by skipper\n        inpeace.cn\n        '''\n        grains = {}\n        _open_file=65536\n        try:\n                getulimit=commands.getstatusoutput('source /etc/profile;ulimit -n')\n        except Exception,e:\n                pass\n        if getulimit[0]==0:\n                _open_file=int(getulimit[1])\n        grains['max_open_file'] = _open_file\n        return grains</pre> \n\n然后执行 \n\n<pre class=\"lang:default decode:true \" >salt '*' saltutil.sync_all</pre> \n\n使用 \n\n<pre class=\"lang:default decode:true \" >salt '*' grains.item max_open_file</pre> \n\n查看结果","slug":"用python设定saltstack的自定义grains","published":1,"updated":"2016-10-25T07:32:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadaqz000yuyxuge5g42ly","content":"<p>参考官方文档<br><a href=\"http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains\" target=\"_blank\" rel=\"external\">http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains</a><br>The grains interface is derived by executing all of the “public” functions found in the modules located in the grains package or the custom grains directory. The functions in the modules of the grains must return a Python dict, where the keys in the dict are the names of the grains and the values are the values.</p>\n<p>Custom grains should be placed in a _grains directory located under the file_roots specified by the master config file. The default path would be /srv/salt/_grains. Custom grains will be distributed to the minions when <strong>state.highstat</strong>e is run, or by executing the <strong>saltutil.sync_grains</strong> or <strong>saltutil.sync_all</strong> functions.<br><a id=\"more\"></a></p>\n<p>Grains are easy to write, and only need to return a dictionary. A common approach would be code something similar to the following:</p>\n<pre class=\"lang:default decode:true \">#!/usr/bin/env python\ndef yourfunction():\n     # initialize a grains dictionary\n     grains = {}\n     # Some code for logic that sets grains like\n     grains['yourcustomgrain']=True\n     grains['anothergrain']='somevalue'\n     return grains\n</pre> \n\n<p>举个例子：配置web服务用到的max_open_file</p>\n<pre class=\"lang:default decode:true \">#!/usr/bin/env python\n\nimport os,sys,commands\n\ndef Grains_openfile():\n        '''\n        use ulimit -n get max_open_file then return to grians\n        by skipper\n        inpeace.cn\n        '''\n        grains = {}\n        _open_file=65536\n        try:\n                getulimit=commands.getstatusoutput('source /etc/profile;ulimit -n')\n        except Exception,e:\n                pass\n        if getulimit[0]==0:\n                _open_file=int(getulimit[1])\n        grains['max_open_file'] = _open_file\n        return grains</pre> \n\n<p>然后执行 </p>\n<pre class=\"lang:default decode:true \">salt '*' saltutil.sync_all</pre> \n\n<p>使用 </p>\n<pre class=\"lang:default decode:true \">salt '*' grains.item max_open_file</pre> \n\n<p>查看结果</p>\n","excerpt":"<p>参考官方文档<br><a href=\"http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains\">http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html#targeting-grains</a><br>The grains interface is derived by executing all of the “public” functions found in the modules located in the grains package or the custom grains directory. The functions in the modules of the grains must return a Python dict, where the keys in the dict are the names of the grains and the values are the values.</p>\n<p>Custom grains should be placed in a _grains directory located under the file_roots specified by the master config file. The default path would be /srv/salt/_grains. Custom grains will be distributed to the minions when <strong>state.highstat</strong>e is run, or by executing the <strong>saltutil.sync_grains</strong> or <strong>saltutil.sync_all</strong> functions.<br>","more":"</p>\n<p>Grains are easy to write, and only need to return a dictionary. A common approach would be code something similar to the following:</p>\n<pre class=\"lang:default decode:true \" >#!/usr/bin/env python\ndef yourfunction():\n     # initialize a grains dictionary\n     grains = {}\n     # Some code for logic that sets grains like\n     grains['yourcustomgrain']=True\n     grains['anothergrain']='somevalue'\n     return grains\n</pre> \n\n<p>举个例子：配置web服务用到的max_open_file</p>\n<pre class=\"lang:default decode:true \" >#!/usr/bin/env python\n\nimport os,sys,commands\n\ndef Grains_openfile():\n        '''\n        use ulimit -n get max_open_file then return to grians\n        by skipper\n        inpeace.cn\n        '''\n        grains = {}\n        _open_file=65536\n        try:\n                getulimit=commands.getstatusoutput('source /etc/profile;ulimit -n')\n        except Exception,e:\n                pass\n        if getulimit[0]==0:\n                _open_file=int(getulimit[1])\n        grains['max_open_file'] = _open_file\n        return grains</pre> \n\n<p>然后执行 </p>\n<pre class=\"lang:default decode:true \" >salt '*' saltutil.sync_all</pre> \n\n<p>使用 </p>\n<pre class=\"lang:default decode:true \" >salt '*' grains.item max_open_file</pre> \n\n<p>查看结果</p>"},{"title":"白日梦","id":"167","date":"2015-11-16T04:05:26.000Z","_content":"\n我这人喜欢做白日梦，今天在公交车想到，关于人类飞行的问题。\n首先我觉得喷气或者什么类似火箭技术，太LOW，既然是白日梦，我觉得从一个能实现的角度讲，\n应该有什么物质，或者物质的什么状态是可以产生反引力，然后就是能控制这种状态。最好是类似半导体的，半引力体，哈哈。\n","source":"_posts/白日梦.md","raw":"---\ntitle: 白日梦\ntags:\n  - 随便写写\nid: 167\ncategories:\n  - 随笔\ndate: 2015-11-16 12:05:26\npermalink: dream-0\n---\n\n我这人喜欢做白日梦，今天在公交车想到，关于人类飞行的问题。\n首先我觉得喷气或者什么类似火箭技术，太LOW，既然是白日梦，我觉得从一个能实现的角度讲，\n应该有什么物质，或者物质的什么状态是可以产生反引力，然后就是能控制这种状态。最好是类似半导体的，半引力体，哈哈。\n","slug":"dream-0","published":1,"updated":"2016-10-25T07:55:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadar10012uyxuirm47ma6","content":"<p>我这人喜欢做白日梦，今天在公交车想到，关于人类飞行的问题。<br>首先我觉得喷气或者什么类似火箭技术，太LOW，既然是白日梦，我觉得从一个能实现的角度讲，<br>应该有什么物质，或者物质的什么状态是可以产生反引力，然后就是能控制这种状态。最好是类似半导体的，半引力体，哈哈。</p>\n","excerpt":"","more":"<p>我这人喜欢做白日梦，今天在公交车想到，关于人类飞行的问题。<br>首先我觉得喷气或者什么类似火箭技术，太LOW，既然是白日梦，我觉得从一个能实现的角度讲，<br>应该有什么物质，或者物质的什么状态是可以产生反引力，然后就是能控制这种状态。最好是类似半导体的，半引力体，哈哈。</p>\n"},{"title":"解决使用centos7.1作为基础镜像构建docker镜像的报错","date":"2016-08-23T09:28:58.000Z","_content":"\nfakesystemd-1-17.el7.centos.noarch has installed conflicts systemd: fakesystemd-1-17.el7.centos.noarch\n\n在Dockerfile里面增加\n``` bash\nRUN yum swap -y fakesystemd systemd \\\n&& yum install -y systemd-devel\n```\n","source":"_posts/解决使用centos7.1作为基础镜像构建docker镜像的报错.md","raw":"---\ntitle: 解决使用centos7.1作为基础镜像构建docker镜像的报错\ncategories:\n  - Docs\ndate: 2016-08-23 17:28:58\ntags:\n  - linux\n  - docker\n  - config\n  - errors\npermalink: centos7-docker-error-0  \n---\n\nfakesystemd-1-17.el7.centos.noarch has installed conflicts systemd: fakesystemd-1-17.el7.centos.noarch\n\n在Dockerfile里面增加\n``` bash\nRUN yum swap -y fakesystemd systemd \\\n&& yum install -y systemd-devel\n```\n","slug":"centos7-docker-error-0","published":1,"updated":"2016-10-25T07:43:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadar20015uyxux8k3j501","content":"<p>fakesystemd-1-17.el7.centos.noarch has installed conflicts systemd: fakesystemd-1-17.el7.centos.noarch</p>\n<p>在Dockerfile里面增加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RUN yum swap -y fakesystemd systemd \\</div><div class=\"line\">&amp;&amp; yum install -y systemd-devel</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>fakesystemd-1-17.el7.centos.noarch has installed conflicts systemd: fakesystemd-1-17.el7.centos.noarch</p>\n<p>在Dockerfile里面增加<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RUN yum swap -y fakesystemd systemd \\</div><div class=\"line\">&amp;&amp; yum install -y systemd-devel</div></pre></td></tr></table></figure></p>\n"},{"title":"运维从业第一黑 ----加强安全方面的管理知识","date":"2016-09-21T14:39:51.000Z","_content":"\n待续。\n","source":"_posts/运维第一黑.md","raw":"---\ntitle: 运维从业第一黑 ----加强安全方面的管理知识\ncategories:\n  - 随笔\ndate: 2016-09-21 22:39:51\ntags:\n  - Tips\npermalink: make-your-host-safe\n---\n\n待续。\n","slug":"make-your-host-safe","published":1,"updated":"2016-10-25T08:58:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadar4001auyxu53cdlo2y","content":"<p>待续。</p>\n","excerpt":"","more":"<p>待续。</p>\n"},{"title":"CenOS7 lvm扩容报错resize2fs: Bad magic number in super-block","date":"2015-10-21T06:49:13.000Z","_content":"问题，用centos7对lvm进行扩容操作时，执行\nresize2fs 命令时报错\nresize2fs: Bad magic number in super-block\n而且df查看文件系统没有扩容\n但是lvdisplay能查看已经扩容成功\n\n解决：\ncentos7默认使用xfs文件系统\n把resize2fs 换成 xfs_growfs\n即可\n","source":"_posts/old_post_wp/CenOS7 lvm扩容报错.md","raw":"---\ntitle: 'CenOS7 lvm扩容报错resize2fs: Bad magic number in super-block'\ntags:\n  - errors\n  - linux\n  - lvm\ncategories:\n  - Docs\ndate: 2015-10-21 14:49:13\npermalink: centos7-lvm-erros-resize2fs\n---\n问题，用centos7对lvm进行扩容操作时，执行\nresize2fs 命令时报错\nresize2fs: Bad magic number in super-block\n而且df查看文件系统没有扩容\n但是lvdisplay能查看已经扩容成功\n\n解决：\ncentos7默认使用xfs文件系统\n把resize2fs 换成 xfs_growfs\n即可\n","slug":"centos7-lvm-erros-resize2fs","published":1,"updated":"2016-10-25T07:57:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbiy002euyxu43c9uiu3","content":"<p>问题，用centos7对lvm进行扩容操作时，执行<br>resize2fs 命令时报错<br>resize2fs: Bad magic number in super-block<br>而且df查看文件系统没有扩容<br>但是lvdisplay能查看已经扩容成功</p>\n<p>解决：<br>centos7默认使用xfs文件系统<br>把resize2fs 换成 xfs_growfs<br>即可</p>\n","excerpt":"","more":"<p>问题，用centos7对lvm进行扩容操作时，执行<br>resize2fs 命令时报错<br>resize2fs: Bad magic number in super-block<br>而且df查看文件系统没有扩容<br>但是lvdisplay能查看已经扩容成功</p>\n<p>解决：<br>centos7默认使用xfs文件系统<br>把resize2fs 换成 xfs_growfs<br>即可</p>\n"},{"title":"Linux监控用户的即时操作","id":"396","date":"2015-12-25T08:38:00.000Z","_content":"\n利用*PROMPT_COMMAND*\n\n1, 在/etc/profile添加\n\nPROMPT_COMMAND=\"history -a; $PROMPT_COMMAND\"\n\n这样用户完成命令后就回history-a 将记录保存到$HOME/.bash_history里面\n写个脚本即时监控这些文件即可。\n比如先修改默认history路径比较好\nHISTORY_FILE=/var/log/usercmd/$(whoami).log\n然后监控\n``` bash\ntail -f /root/.bash_history &gt;/var/log/usercmd/root.log\n```\n如果有监控平台比如\n可以在平台上监控这个日志，可以即时打印出来，也挺不错的。（那输入密码怎么办。。。。？？？）\n\n\n补充:\n\t此方法只能监控到已经完成的命令，不过想想，要监控用户正在输入的内容还挺难的，不知道有没有实现方法。\n","source":"_posts/old_post_wp/Linux监控用户的即时操作.md","raw":"---\ntitle: Linux监控用户的即时操作\ntags:\n  - linux\n  - shell\n  - monitor\n  - config\nid: 396\ncategories:\n  - Docs\ndate: 2015-12-25 16:38:00\npermalink: linxu-monite-user-command\n---\n\n利用*PROMPT_COMMAND*\n\n1, 在/etc/profile添加\n\nPROMPT_COMMAND=\"history -a; $PROMPT_COMMAND\"\n\n这样用户完成命令后就回history-a 将记录保存到$HOME/.bash_history里面\n写个脚本即时监控这些文件即可。\n比如先修改默认history路径比较好\nHISTORY_FILE=/var/log/usercmd/$(whoami).log\n然后监控\n``` bash\ntail -f /root/.bash_history &gt;/var/log/usercmd/root.log\n```\n如果有监控平台比如\n可以在平台上监控这个日志，可以即时打印出来，也挺不错的。（那输入密码怎么办。。。。？？？）\n\n\n补充:\n\t此方法只能监控到已经完成的命令，不过想想，要监控用户正在输入的内容还挺难的，不知道有没有实现方法。\n","slug":"linxu-monite-user-command","published":1,"updated":"2016-10-25T08:37:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbj0002fuyxuulk40n9u","content":"<p>利用<em>PROMPT_COMMAND</em></p>\n<p>1, 在/etc/profile添加</p>\n<p>PROMPT_COMMAND=”history -a; $PROMPT_COMMAND”</p>\n<p>这样用户完成命令后就回history-a 将记录保存到$HOME/.bash_history里面<br>写个脚本即时监控这些文件即可。<br>比如先修改默认history路径比较好<br>HISTORY_FILE=/var/log/usercmd/$(whoami).log<br>然后监控<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tail <span class=\"_\">-f</span> /root/.bash_history &amp;gt;/var/<span class=\"built_in\">log</span>/usercmd/root.log</div></pre></td></tr></table></figure></p>\n<p>如果有监控平台比如<br>可以在平台上监控这个日志，可以即时打印出来，也挺不错的。（那输入密码怎么办。。。。？？？）</p>\n<p>补充:<br>    此方法只能监控到已经完成的命令，不过想想，要监控用户正在输入的内容还挺难的，不知道有没有实现方法。</p>\n","excerpt":"","more":"<p>利用<em>PROMPT_COMMAND</em></p>\n<p>1, 在/etc/profile添加</p>\n<p>PROMPT_COMMAND=”history -a; $PROMPT_COMMAND”</p>\n<p>这样用户完成命令后就回history-a 将记录保存到$HOME/.bash_history里面<br>写个脚本即时监控这些文件即可。<br>比如先修改默认history路径比较好<br>HISTORY_FILE=/var/log/usercmd/$(whoami).log<br>然后监控<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tail <span class=\"_\">-f</span> /root/.bash_history &amp;gt;/var/<span class=\"built_in\">log</span>/usercmd/root.log</div></pre></td></tr></table></figure></p>\n<p>如果有监控平台比如<br>可以在平台上监控这个日志，可以即时打印出来，也挺不错的。（那输入密码怎么办。。。。？？？）</p>\n<p>补充:<br>    此方法只能监控到已经完成的命令，不过想想，要监控用户正在输入的内容还挺难的，不知道有没有实现方法。</p>\n"},{"title":"date 命令","date":"2015-12-17T11:42:52.000Z","_content":"*date 命令在日常运维中使用平率很高，一般都是配合日志输出，备份文件等，生成文件带上日期*\n\n##### 一个例子:\n``` bash\necho \"skipper_yes.$(date +%y%m%d-%H%M%S)\" > ./hello\ncat ./hello\nskipper_yes.151217-192247\n```\n\n#### date 在shell中使用的标准格式一般是\n``` bash\ndate + %char\n```\n*char 可以是以下内容（date --help）*\n个人常用:\n``` bash\ndate +%F    #  %F   full date; same as %Y-%m-%d\ndate +%X    #  %X   locale's time representation (e.g., 23:13:48\n```\n``` bash\ndate --help\n  <pre>\n  %%   a literal %\n  %a   locale's abbreviated weekday name (e.g., Sun)\n  %A   locale's full weekday name (e.g., Sunday)\n  %b   locale's abbreviated month name (e.g., Jan)\n  %B   locale's full month name (e.g., January)\n  %c   locale's date and time (e.g., Thu Mar  3 23:05:25 2005)\n  %C   century; like %Y, except omit last two digits (e.g., 20)\n  %d   day of month (e.g, 01)\n  %D   date; same as %m/%d/%y\n  %e   day of month, space padded; same as %_d\n  %F   full date; same as %Y-%m-%d\n  %g   last two digits of year of ISO week number (see %G)\n  %G   year of ISO week number (see %V); normally useful only with %V\n  %h   same as %b\n  %H   hour (00..23)\n  %I   hour (01..12)\n  %j   day of year (001..366)\n  %k   hour ( 0..23)\n  %l   hour ( 1..12)\n  %m   month (01..12)\n  %M   minute (00..59)\n  %n   a newline\n  %N   nanoseconds (000000000..999999999)\n  %p   locale's equivalent of either AM or PM; blank if not known\n  %P   like %p, but lower case\n  %r   locale's 12-hour clock time (e.g., 11:11:04 PM)\n  %R   24-hour hour and minute; same as %H:%M\n  %s   seconds since 1970-01-01 00:00:00 UTC\n  %S   second (00..60)\n  %t   a tab\n  %T   time; same as %H:%M:%S\n  %u   day of week (1..7); 1 is Monday\n  %U   week number of year, with Sunday as first day of week (00..53)\n  %V   ISO week number, with Monday as first day of week (01..53)\n  %w   day of week (0..6); 0 is Sunday\n  %W   week number of year, with Monday as first day of week (00..53)\n  %x   locale's date representation (e.g., 12/31/99)\n  %X   locale's time representation (e.g., 23:13:48)\n  %y   last two digits of year (00..99)\n  %Y   year\n  %z   +hhmm numeric timezone (e.g., -0400)\n  %:z  +hh:mm numeric timezone (e.g., -04:00)\n  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)\n  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)\n  %Z   alphabetic time zone abbreviation (e.g., E\n</pre>\n```\n","source":"_posts/old_post_wp/date命令.md","raw":"---\ntitle: date 命令\ntags:\n  - shell\n  - linux\ncategories:\n  - Docs\ndate: 2015-12-17 19:42:52\npermalink: date-command-usage-0\n---\n*date 命令在日常运维中使用平率很高，一般都是配合日志输出，备份文件等，生成文件带上日期*\n\n##### 一个例子:\n``` bash\necho \"skipper_yes.$(date +%y%m%d-%H%M%S)\" > ./hello\ncat ./hello\nskipper_yes.151217-192247\n```\n\n#### date 在shell中使用的标准格式一般是\n``` bash\ndate + %char\n```\n*char 可以是以下内容（date --help）*\n个人常用:\n``` bash\ndate +%F    #  %F   full date; same as %Y-%m-%d\ndate +%X    #  %X   locale's time representation (e.g., 23:13:48\n```\n``` bash\ndate --help\n  <pre>\n  %%   a literal %\n  %a   locale's abbreviated weekday name (e.g., Sun)\n  %A   locale's full weekday name (e.g., Sunday)\n  %b   locale's abbreviated month name (e.g., Jan)\n  %B   locale's full month name (e.g., January)\n  %c   locale's date and time (e.g., Thu Mar  3 23:05:25 2005)\n  %C   century; like %Y, except omit last two digits (e.g., 20)\n  %d   day of month (e.g, 01)\n  %D   date; same as %m/%d/%y\n  %e   day of month, space padded; same as %_d\n  %F   full date; same as %Y-%m-%d\n  %g   last two digits of year of ISO week number (see %G)\n  %G   year of ISO week number (see %V); normally useful only with %V\n  %h   same as %b\n  %H   hour (00..23)\n  %I   hour (01..12)\n  %j   day of year (001..366)\n  %k   hour ( 0..23)\n  %l   hour ( 1..12)\n  %m   month (01..12)\n  %M   minute (00..59)\n  %n   a newline\n  %N   nanoseconds (000000000..999999999)\n  %p   locale's equivalent of either AM or PM; blank if not known\n  %P   like %p, but lower case\n  %r   locale's 12-hour clock time (e.g., 11:11:04 PM)\n  %R   24-hour hour and minute; same as %H:%M\n  %s   seconds since 1970-01-01 00:00:00 UTC\n  %S   second (00..60)\n  %t   a tab\n  %T   time; same as %H:%M:%S\n  %u   day of week (1..7); 1 is Monday\n  %U   week number of year, with Sunday as first day of week (00..53)\n  %V   ISO week number, with Monday as first day of week (01..53)\n  %w   day of week (0..6); 0 is Sunday\n  %W   week number of year, with Monday as first day of week (00..53)\n  %x   locale's date representation (e.g., 12/31/99)\n  %X   locale's time representation (e.g., 23:13:48)\n  %y   last two digits of year (00..99)\n  %Y   year\n  %z   +hhmm numeric timezone (e.g., -0400)\n  %:z  +hh:mm numeric timezone (e.g., -04:00)\n  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)\n  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)\n  %Z   alphabetic time zone abbreviation (e.g., E\n</pre>\n```\n","slug":"date-command-usage-0","published":1,"updated":"2016-10-25T08:06:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbj4002huyxuqpu1tokm","content":"<p><em>date 命令在日常运维中使用平率很高，一般都是配合日志输出，备份文件等，生成文件带上日期</em></p>\n<h5 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子:\"></a>一个例子:</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"skipper_yes.<span class=\"variable\">$(date +%y%m%d-%H%M%S)</span>\"</span> &gt; ./hello</div><div class=\"line\">cat ./hello</div><div class=\"line\">skipper_yes.151217-192247</div></pre></td></tr></table></figure>\n<h4 id=\"date-在shell中使用的标准格式一般是\"><a href=\"#date-在shell中使用的标准格式一般是\" class=\"headerlink\" title=\"date 在shell中使用的标准格式一般是\"></a>date 在shell中使用的标准格式一般是</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">date + %char</div></pre></td></tr></table></figure>\n<p><em>char 可以是以下内容（date –help）</em><br>个人常用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">date +%F    <span class=\"comment\">#  %F   full date; same as %Y-%m-%d</span></div><div class=\"line\">date +%X    <span class=\"comment\">#  %X   locale's time representation (e.g., 23:13:48</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">date --help</div><div class=\"line\">  &lt;pre&gt;</div><div class=\"line\">  %%   a literal %</div><div class=\"line\">  %a   locale<span class=\"string\">'s abbreviated weekday name (e.g., Sun)</span></div><div class=\"line\">  %A   locale's full weekday name (e.g., Sunday)</div><div class=\"line\">  %b   locale<span class=\"string\">'s abbreviated month name (e.g., Jan)</span></div><div class=\"line\">  %B   locale's full month name (e.g., January)</div><div class=\"line\">  %c   locale<span class=\"string\">'s date and time (e.g., Thu Mar  3 23:05:25 2005)</span></div><div class=\"line\">  %C   century; like %Y, except omit last two digits (e.g., 20)</div><div class=\"line\">  %d   day of month (e.g, 01)</div><div class=\"line\">  %D   date; same as %m/%d/%y</div><div class=\"line\">  %e   day of month, space padded; same as %_d</div><div class=\"line\">  %F   full date; same as %Y-%m-%d</div><div class=\"line\">  %g   last two digits of year of ISO week number (see %G)</div><div class=\"line\">  %G   year of ISO week number (see %V); normally useful only with %V</div><div class=\"line\">  %h   same as %b</div><div class=\"line\">  %H   hour (00..23)</div><div class=\"line\">  %I   hour (01..12)</div><div class=\"line\">  %j   day of year (001..366)</div><div class=\"line\">  %k   hour ( 0..23)</div><div class=\"line\">  %l   hour ( 1..12)</div><div class=\"line\">  %m   month (01..12)</div><div class=\"line\">  %M   minute (00..59)</div><div class=\"line\">  %n   a newline</div><div class=\"line\">  %N   nanoseconds (000000000..999999999)</div><div class=\"line\">  %p   locale's equivalent of either AM or PM; blank <span class=\"keyword\">if</span> not known</div><div class=\"line\">  %P   like %p, but lower <span class=\"keyword\">case</span></div><div class=\"line\">  %r   locale<span class=\"string\">'s 12-hour clock time (e.g., 11:11:04 PM)</span></div><div class=\"line\">  %R   24-hour hour and minute; same as %H:%M</div><div class=\"line\">  %s   seconds since 1970-01-01 00:00:00 UTC</div><div class=\"line\">  %S   second (00..60)</div><div class=\"line\">  %t   a tab</div><div class=\"line\">  %T   time; same as %H:%M:%S</div><div class=\"line\">  %u   day of week (1..7); 1 is Monday</div><div class=\"line\">  %U   week number of year, with Sunday as first day of week (00..53)</div><div class=\"line\">  %V   ISO week number, with Monday as first day of week (01..53)</div><div class=\"line\">  %w   day of week (0..6); 0 is Sunday</div><div class=\"line\">  %W   week number of year, with Monday as first day of week (00..53)</div><div class=\"line\">  %x   locale's date representation (e.g., 12/31/99)</div><div class=\"line\">  %X   locale<span class=\"string\">'s time representation (e.g., 23:13:48)</span></div><div class=\"line\">  %y   last two digits of year (00..99)</div><div class=\"line\">  %Y   year</div><div class=\"line\">  %z   +hhmm numeric timezone (e.g., -0400)</div><div class=\"line\">  %:z  +hh:mm numeric timezone (e.g., -04:00)</div><div class=\"line\">  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)</div><div class=\"line\">  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)</div><div class=\"line\">  %Z   alphabetic time zone abbreviation (e.g., E</div><div class=\"line\">&lt;/pre&gt;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><em>date 命令在日常运维中使用平率很高，一般都是配合日志输出，备份文件等，生成文件带上日期</em></p>\n<h5 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子:\"></a>一个例子:</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"skipper_yes.<span class=\"variable\">$(date +%y%m%d-%H%M%S)</span>\"</span> &gt; ./hello</div><div class=\"line\">cat ./hello</div><div class=\"line\">skipper_yes.151217-192247</div></pre></td></tr></table></figure>\n<h4 id=\"date-在shell中使用的标准格式一般是\"><a href=\"#date-在shell中使用的标准格式一般是\" class=\"headerlink\" title=\"date 在shell中使用的标准格式一般是\"></a>date 在shell中使用的标准格式一般是</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">date + %char</div></pre></td></tr></table></figure>\n<p><em>char 可以是以下内容（date –help）</em><br>个人常用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">date +%F    <span class=\"comment\">#  %F   full date; same as %Y-%m-%d</span></div><div class=\"line\">date +%X    <span class=\"comment\">#  %X   locale's time representation (e.g., 23:13:48</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">date --help</div><div class=\"line\">  &lt;pre&gt;</div><div class=\"line\">  %%   a literal %</div><div class=\"line\">  %a   locale<span class=\"string\">'s abbreviated weekday name (e.g., Sun)</div><div class=\"line\">  %A   locale'</span>s full weekday name (e.g., Sunday)</div><div class=\"line\">  %b   locale<span class=\"string\">'s abbreviated month name (e.g., Jan)</div><div class=\"line\">  %B   locale'</span>s full month name (e.g., January)</div><div class=\"line\">  %c   locale<span class=\"string\">'s date and time (e.g., Thu Mar  3 23:05:25 2005)</div><div class=\"line\">  %C   century; like %Y, except omit last two digits (e.g., 20)</div><div class=\"line\">  %d   day of month (e.g, 01)</div><div class=\"line\">  %D   date; same as %m/%d/%y</div><div class=\"line\">  %e   day of month, space padded; same as %_d</div><div class=\"line\">  %F   full date; same as %Y-%m-%d</div><div class=\"line\">  %g   last two digits of year of ISO week number (see %G)</div><div class=\"line\">  %G   year of ISO week number (see %V); normally useful only with %V</div><div class=\"line\">  %h   same as %b</div><div class=\"line\">  %H   hour (00..23)</div><div class=\"line\">  %I   hour (01..12)</div><div class=\"line\">  %j   day of year (001..366)</div><div class=\"line\">  %k   hour ( 0..23)</div><div class=\"line\">  %l   hour ( 1..12)</div><div class=\"line\">  %m   month (01..12)</div><div class=\"line\">  %M   minute (00..59)</div><div class=\"line\">  %n   a newline</div><div class=\"line\">  %N   nanoseconds (000000000..999999999)</div><div class=\"line\">  %p   locale'</span>s equivalent of either AM or PM; blank <span class=\"keyword\">if</span> not known</div><div class=\"line\">  %P   like %p, but lower <span class=\"keyword\">case</span></div><div class=\"line\">  %r   locale<span class=\"string\">'s 12-hour clock time (e.g., 11:11:04 PM)</div><div class=\"line\">  %R   24-hour hour and minute; same as %H:%M</div><div class=\"line\">  %s   seconds since 1970-01-01 00:00:00 UTC</div><div class=\"line\">  %S   second (00..60)</div><div class=\"line\">  %t   a tab</div><div class=\"line\">  %T   time; same as %H:%M:%S</div><div class=\"line\">  %u   day of week (1..7); 1 is Monday</div><div class=\"line\">  %U   week number of year, with Sunday as first day of week (00..53)</div><div class=\"line\">  %V   ISO week number, with Monday as first day of week (01..53)</div><div class=\"line\">  %w   day of week (0..6); 0 is Sunday</div><div class=\"line\">  %W   week number of year, with Monday as first day of week (00..53)</div><div class=\"line\">  %x   locale'</span>s date representation (e.g., 12/31/99)</div><div class=\"line\">  %X   locale<span class=\"string\">'s time representation (e.g., 23:13:48)</div><div class=\"line\">  %y   last two digits of year (00..99)</div><div class=\"line\">  %Y   year</div><div class=\"line\">  %z   +hhmm numeric timezone (e.g., -0400)</div><div class=\"line\">  %:z  +hh:mm numeric timezone (e.g., -04:00)</div><div class=\"line\">  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)</div><div class=\"line\">  %:::z  numeric time zone with : to necessary precision (e.g., -04, +05:30)</div><div class=\"line\">  %Z   alphabetic time zone abbreviation (e.g., E</div><div class=\"line\">&lt;/pre&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"Sublime Text 使用","date":"2016-10-23T06:00:13.000Z","description":"Sublime Text 3的一些使用文档。","_content":"\n## 下载安装 Sublime Text\n[google 知道](https://www.google.com)\n官网导航[Sublime Text 3](http://www.sublimetext.com/3)\n### 安装Package Control\n官网传送门 [install](https://packagecontrol.io/installation)\n\n#### sublime-text 3 安装 Package Control\n以OS X为例子，打开sublime text 3 按住control + ~\n输入以下内容 ##tips: 在代码上面三连击鼠标 左键就可以选择改行。复制了。\n``` python\nimport urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n\n```\n#### 完成后就可以command + shift + p 然后输入 PPIP 不是PPAP ^_^)\n   打开PPIP 后输入ChineseLocalization 安装后就可以用中文了。\n为了对中文文档的支持，还要安装ConvertToUTF8 这个插件\n\n##自己用的插件\n","source":"_posts/old_post_wp/Sublime Text 使用.md","raw":"title: Sublime Text 使用\ndate: 2016-10-23 14:00:13\ntags:\n  - OSX\ncategories: Docs\npermalink: sublime-text\ndescription: Sublime Text 3的一些使用文档。\n---\n\n## 下载安装 Sublime Text\n[google 知道](https://www.google.com)\n官网导航[Sublime Text 3](http://www.sublimetext.com/3)\n### 安装Package Control\n官网传送门 [install](https://packagecontrol.io/installation)\n\n#### sublime-text 3 安装 Package Control\n以OS X为例子，打开sublime text 3 按住control + ~\n输入以下内容 ##tips: 在代码上面三连击鼠标 左键就可以选择改行。复制了。\n``` python\nimport urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n\n```\n#### 完成后就可以command + shift + p 然后输入 PPIP 不是PPAP ^_^)\n   打开PPIP 后输入ChineseLocalization 安装后就可以用中文了。\n为了对中文文档的支持，还要安装ConvertToUTF8 这个插件\n\n##自己用的插件\n","slug":"sublime-text","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbj6002kuyxumgwse8lh","content":"<h2 id=\"下载安装-Sublime-Text\"><a href=\"#下载安装-Sublime-Text\" class=\"headerlink\" title=\"下载安装 Sublime Text\"></a>下载安装 Sublime Text</h2><p><a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">google 知道</a><br>官网导航<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">Sublime Text 3</a></p>\n<h3 id=\"安装Package-Control\"><a href=\"#安装Package-Control\" class=\"headerlink\" title=\"安装Package Control\"></a>安装Package Control</h3><p>官网传送门 <a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">install</a></p>\n<h4 id=\"sublime-text-3-安装-Package-Control\"><a href=\"#sublime-text-3-安装-Package-Control\" class=\"headerlink\" title=\"sublime-text 3 安装 Package Control\"></a>sublime-text 3 安装 Package Control</h4><p>以OS X为例子，打开sublime text 3 按住control + ~<br>输入以下内容 ##tips: 在代码上面三连击鼠标 左键就可以选择改行。复制了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class=\"string\">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure></p>\n<h4 id=\"完成后就可以command-shift-p-然后输入-PPIP-不是PPAP\"><a href=\"#完成后就可以command-shift-p-然后输入-PPIP-不是PPAP\" class=\"headerlink\" title=\"完成后就可以command + shift + p 然后输入 PPIP 不是PPAP ^_^)\"></a>完成后就可以command + shift + p 然后输入 PPIP 不是PPAP ^_^)</h4><p>   打开PPIP 后输入ChineseLocalization 安装后就可以用中文了。<br>为了对中文文档的支持，还要安装ConvertToUTF8 这个插件</p>\n<p>##自己用的插件</p>\n","excerpt":"","more":"<h2 id=\"下载安装-Sublime-Text\"><a href=\"#下载安装-Sublime-Text\" class=\"headerlink\" title=\"下载安装 Sublime Text\"></a>下载安装 Sublime Text</h2><p><a href=\"https://www.google.com\">google 知道</a><br>官网导航<a href=\"http://www.sublimetext.com/3\">Sublime Text 3</a></p>\n<h3 id=\"安装Package-Control\"><a href=\"#安装Package-Control\" class=\"headerlink\" title=\"安装Package Control\"></a>安装Package Control</h3><p>官网传送门 <a href=\"https://packagecontrol.io/installation\">install</a></p>\n<h4 id=\"sublime-text-3-安装-Package-Control\"><a href=\"#sublime-text-3-安装-Package-Control\" class=\"headerlink\" title=\"sublime-text 3 安装 Package Control\"></a>sublime-text 3 安装 Package Control</h4><p>以OS X为例子，打开sublime text 3 按住control + ~<br>输入以下内容 ##tips: 在代码上面三连击鼠标 左键就可以选择改行。复制了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class=\"string\">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure></p>\n<h4 id=\"完成后就可以command-shift-p-然后输入-PPIP-不是PPAP\"><a href=\"#完成后就可以command-shift-p-然后输入-PPIP-不是PPAP\" class=\"headerlink\" title=\"完成后就可以command + shift + p 然后输入 PPIP 不是PPAP ^_^)\"></a>完成后就可以command + shift + p 然后输入 PPIP 不是PPAP ^_^)</h4><p>   打开PPIP 后输入ChineseLocalization 安装后就可以用中文了。<br>为了对中文文档的支持，还要安装ConvertToUTF8 这个插件</p>\n<p>##自己用的插件</p>\n"},{"title":"Ubuntu Openvpn访问局域网资源","date":"2016-09-07T07:47:00.000Z","_content":"\n在一台非网关设备架设openvpn\n在配置好服务器后客户端无法访问局域网资源\n*openvpn 客户端IP地址段是按照默认的配置即10.8.0.0/8网段\n\n*以下所有配置都在服务器端*\n*默认已经安装好服务端配置好证书*\n如果没有请参考如下链接自行翻译\n传送门:[openvpen on ubuntu 14.04](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-14-04 \"openvpn\")\n\n服务器接口信息如下\n```\neth0 192.168.1.0/24 内网资源\neth1 公网ip地址\n```\n\n配置openvpn server配置文件\n``` bash\nvim /etc/openvpn/server.conf\n```\n\n添加两条\n```\npush \"route 192.168.1.0 255.255.255.0\"\npush \"route 外网网段 255.255.255.128\"\n```\n\n\n\n让客户端添加两条路由信息\n启动ip转发\n``` bash\necho 1 > /proc/sys/net/ipv4/ip_forward\n```\n\n##### 若要永久生效请手动修改sysctl.conf文件\n\n修改防火墙以ubuntu ufw为例\n让客户端可以访问这两个网卡\n``` plain\nvim /etc/ufw/before.rules\n增加\n# START OPENVPN RULES\n# # NAT table rules\n*nat\n:POSTROUTING ACCEPT [0:0]\n# Allow traffic from OpenVPN client to eth0\n-A POSTROUTING -s 10.8.0.0/8 -o eth1 -j MASQUERADE\n-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE\nCOMMIT\n```\n\n*不要删除这个文件上面的\\*filter这条信息*\n\n重启ufw\n``` bash\nufw reload\n```","source":"_posts/old_post_wp/Ubuntu Openvpn访问局域网资源.md","raw":"---\ntitle: Ubuntu Openvpn访问局域网资源\npermalink: ubuntu-openvpn-route\ntags:\n  - linux\n  - config\ncategories:\n  - Docs\ndate: 2016-09-07 15:47:00\n---\n\n在一台非网关设备架设openvpn\n在配置好服务器后客户端无法访问局域网资源\n*openvpn 客户端IP地址段是按照默认的配置即10.8.0.0/8网段\n\n*以下所有配置都在服务器端*\n*默认已经安装好服务端配置好证书*\n如果没有请参考如下链接自行翻译\n传送门:[openvpen on ubuntu 14.04](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-14-04 \"openvpn\")\n\n服务器接口信息如下\n```\neth0 192.168.1.0/24 内网资源\neth1 公网ip地址\n```\n\n配置openvpn server配置文件\n``` bash\nvim /etc/openvpn/server.conf\n```\n\n添加两条\n```\npush \"route 192.168.1.0 255.255.255.0\"\npush \"route 外网网段 255.255.255.128\"\n```\n\n\n\n让客户端添加两条路由信息\n启动ip转发\n``` bash\necho 1 > /proc/sys/net/ipv4/ip_forward\n```\n\n##### 若要永久生效请手动修改sysctl.conf文件\n\n修改防火墙以ubuntu ufw为例\n让客户端可以访问这两个网卡\n``` plain\nvim /etc/ufw/before.rules\n增加\n# START OPENVPN RULES\n# # NAT table rules\n*nat\n:POSTROUTING ACCEPT [0:0]\n# Allow traffic from OpenVPN client to eth0\n-A POSTROUTING -s 10.8.0.0/8 -o eth1 -j MASQUERADE\n-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE\nCOMMIT\n```\n\n*不要删除这个文件上面的\\*filter这条信息*\n\n重启ufw\n``` bash\nufw reload\n```","slug":"ubuntu-openvpn-route","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbj7002nuyxu2gxk82lv","content":"<p>在一台非网关设备架设openvpn<br>在配置好服务器后客户端无法访问局域网资源<br>*openvpn 客户端IP地址段是按照默认的配置即10.8.0.0/8网段</p>\n<p><em>以下所有配置都在服务器端</em><br><em>默认已经安装好服务端配置好证书</em><br>如果没有请参考如下链接自行翻译<br>传送门:<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-14-04\" title=\"openvpn\" target=\"_blank\" rel=\"external\">openvpen on ubuntu 14.04</a></p>\n<p>服务器接口信息如下<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">eth0 <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.0</span>/<span class=\"number\">24</span> 内网资源</div><div class=\"line\">eth1 公网ip地址</div></pre></td></tr></table></figure></p>\n<p>配置openvpn server配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/openvpn/server.conf</div></pre></td></tr></table></figure></p>\n<p>添加两条<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">push</span> \"<span class=\"selector-tag\">route</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.0</span> 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.255</span><span class=\"selector-class\">.0</span>\"</div><div class=\"line\"><span class=\"selector-tag\">push</span> \"<span class=\"selector-tag\">route</span> 外网网段 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.255</span><span class=\"selector-class\">.128</span>\"</div></pre></td></tr></table></figure></p>\n<p>让客户端添加两条路由信息<br>启动ip转发<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</div></pre></td></tr></table></figure></p>\n<h5 id=\"若要永久生效请手动修改sysctl-conf文件\"><a href=\"#若要永久生效请手动修改sysctl-conf文件\" class=\"headerlink\" title=\"若要永久生效请手动修改sysctl.conf文件\"></a>若要永久生效请手动修改sysctl.conf文件</h5><p>修改防火墙以ubuntu ufw为例<br>让客户端可以访问这两个网卡<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/ufw/before.rules</div><div class=\"line\">增加</div><div class=\"line\"># START OPENVPN RULES</div><div class=\"line\"># # NAT table rules</div><div class=\"line\">*nat</div><div class=\"line\">:POSTROUTING ACCEPT [0:0]</div><div class=\"line\"># Allow traffic from OpenVPN client to eth0</div><div class=\"line\">-A POSTROUTING -s 10.8.0.0/8 -o eth1 -j MASQUERADE</div><div class=\"line\">-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE</div><div class=\"line\">COMMIT</div></pre></td></tr></table></figure></p>\n<p><em>不要删除这个文件上面的\\</em>filter这条信息*</p>\n<p>重启ufw<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ufw reload</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>在一台非网关设备架设openvpn<br>在配置好服务器后客户端无法访问局域网资源<br>*openvpn 客户端IP地址段是按照默认的配置即10.8.0.0/8网段</p>\n<p><em>以下所有配置都在服务器端</em><br><em>默认已经安装好服务端配置好证书</em><br>如果没有请参考如下链接自行翻译<br>传送门:<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-14-04\" title=\"openvpn\">openvpen on ubuntu 14.04</a></p>\n<p>服务器接口信息如下<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">eth0 <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.0</span>/<span class=\"number\">24</span> 内网资源</div><div class=\"line\">eth1 公网ip地址</div></pre></td></tr></table></figure></p>\n<p>配置openvpn server配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/openvpn/server.conf</div></pre></td></tr></table></figure></p>\n<p>添加两条<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">push</span> \"<span class=\"selector-tag\">route</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.0</span> 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.255</span><span class=\"selector-class\">.0</span>\"</div><div class=\"line\"><span class=\"selector-tag\">push</span> \"<span class=\"selector-tag\">route</span> 外网网段 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.255</span><span class=\"selector-class\">.128</span>\"</div></pre></td></tr></table></figure></p>\n<p>让客户端添加两条路由信息<br>启动ip转发<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</div></pre></td></tr></table></figure></p>\n<h5 id=\"若要永久生效请手动修改sysctl-conf文件\"><a href=\"#若要永久生效请手动修改sysctl-conf文件\" class=\"headerlink\" title=\"若要永久生效请手动修改sysctl.conf文件\"></a>若要永久生效请手动修改sysctl.conf文件</h5><p>修改防火墙以ubuntu ufw为例<br>让客户端可以访问这两个网卡<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/ufw/before.rules</div><div class=\"line\">增加</div><div class=\"line\"># START OPENVPN RULES</div><div class=\"line\"># # NAT table rules</div><div class=\"line\">*nat</div><div class=\"line\">:POSTROUTING ACCEPT [0:0]</div><div class=\"line\"># Allow traffic from OpenVPN client to eth0</div><div class=\"line\">-A POSTROUTING -s 10.8.0.0/8 -o eth1 -j MASQUERADE</div><div class=\"line\">-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE</div><div class=\"line\">COMMIT</div></pre></td></tr></table></figure></p>\n<p><em>不要删除这个文件上面的\\</em>filter这条信息*</p>\n<p>重启ufw<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ufw reload</div></pre></td></tr></table></figure></p>\n"},{"title":"命令总结（一): find","date":"2016-01-08T16:38:49.000Z","_content":"\nfind算是平时使用比较频繁的命令\n总结一下(参考书籍和man find)\nfind 命令\nfind命令的一般形式如下:\n<pre>\nfind pathname -option [- print -exec -ok ...]\n</pre>\n\npathname 就是查找的目录路径 . 就是当前路径\n-print: 表示find 命令将匹配的文件输出的标准输出中\n-exec: 表示find命令对匹配的文件执行该参数锁给出的shell命令。相应命令的形式为\n‘command’ {} \\ ; #因为{}在shell中又特殊意义，因此要用\\来转义。\n-ok: 作用和-exec相同，但是会在执行命令的时候给出询问。推荐在执行rm mv chmod的命令前添加-ok\n\n-option:（*表示常用）\n-name * 按照文件名查找文件\n-perm * e.g. find . -perm 755 -exec ls -l {} \\; 找出当前目录下755权限的文件\n-prune 直接使用可以不再当前目录查找。不过可以配合-path -prune -o过滤指定目录。\n-user 按照文件所有者来查找\n-group 按照所属组\n-nogroup\n-nouser\n\n-mtime -n|+n 按照文件 更改 时间来查找 -n表示n天内，+n指n天前\n-atime ... 按照文件的 访问 时间来查找\n-ctime ... 按照文件 创建 时间 来查找\n\n还有对应的分钟级别的\n-mmin\n-amin\n-cmin\n\n-type 查找某个类型的文件（目录也是文件linux一切皆文件）\nb: 表示块设备文件 一般都是/dev/下的文件\nd: * 表示目录\nc: 表示字符设备文件 #比如/dev/null /dev/zero tty什么的。\np: 表示管道文件 #\nl: * 表示符号链接文件\nf: * 表示普通文件 最为常用 推荐使用，能加快查找速度\n\n-size +/- n[cwbkMG] 查找文件大小为指定的大小 +表示大于 e.g. find . -size +19M\n-depth: 查找文件时，首先查找当前目录的文件，在查询子目录。\n-fstype: 在指定的文件系统中查找文件.查询/etc/fstab查看系统文件系统。\n\n-mount: 表示在查找文件时不跨越文件系统mount点\n-newer file1 !file2 查找更改时间比file1早 是比file2晚的文件\n\n-follow 如果查找到的文件是链接文件就追踪到指向的文件。\n\n参考:《构建高可用linux服务器》于洪春\n\n优秀博客:\n\n[http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html](http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html)\n","source":"_posts/old_post_wp/find使用总结.md","raw":"---\ntitle: '命令总结（一): find'\ntags:\n  - linux\n  - shell\ncategories:\n  - Docs\ndate: 2016-01-09 00:38:49\npermalink: find-usage-demo-0\n---\n\nfind算是平时使用比较频繁的命令\n总结一下(参考书籍和man find)\nfind 命令\nfind命令的一般形式如下:\n<pre>\nfind pathname -option [- print -exec -ok ...]\n</pre>\n\npathname 就是查找的目录路径 . 就是当前路径\n-print: 表示find 命令将匹配的文件输出的标准输出中\n-exec: 表示find命令对匹配的文件执行该参数锁给出的shell命令。相应命令的形式为\n‘command’ {} \\ ; #因为{}在shell中又特殊意义，因此要用\\来转义。\n-ok: 作用和-exec相同，但是会在执行命令的时候给出询问。推荐在执行rm mv chmod的命令前添加-ok\n\n-option:（*表示常用）\n-name * 按照文件名查找文件\n-perm * e.g. find . -perm 755 -exec ls -l {} \\; 找出当前目录下755权限的文件\n-prune 直接使用可以不再当前目录查找。不过可以配合-path -prune -o过滤指定目录。\n-user 按照文件所有者来查找\n-group 按照所属组\n-nogroup\n-nouser\n\n-mtime -n|+n 按照文件 更改 时间来查找 -n表示n天内，+n指n天前\n-atime ... 按照文件的 访问 时间来查找\n-ctime ... 按照文件 创建 时间 来查找\n\n还有对应的分钟级别的\n-mmin\n-amin\n-cmin\n\n-type 查找某个类型的文件（目录也是文件linux一切皆文件）\nb: 表示块设备文件 一般都是/dev/下的文件\nd: * 表示目录\nc: 表示字符设备文件 #比如/dev/null /dev/zero tty什么的。\np: 表示管道文件 #\nl: * 表示符号链接文件\nf: * 表示普通文件 最为常用 推荐使用，能加快查找速度\n\n-size +/- n[cwbkMG] 查找文件大小为指定的大小 +表示大于 e.g. find . -size +19M\n-depth: 查找文件时，首先查找当前目录的文件，在查询子目录。\n-fstype: 在指定的文件系统中查找文件.查询/etc/fstab查看系统文件系统。\n\n-mount: 表示在查找文件时不跨越文件系统mount点\n-newer file1 !file2 查找更改时间比file1早 是比file2晚的文件\n\n-follow 如果查找到的文件是链接文件就追踪到指向的文件。\n\n参考:《构建高可用linux服务器》于洪春\n\n优秀博客:\n\n[http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html](http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html)\n","slug":"find-usage-demo-0","published":1,"updated":"2016-10-25T08:23:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbj9002ruyxusbj5plwb","content":"<p>find算是平时使用比较频繁的命令<br>总结一下(参考书籍和man find)<br>find 命令<br>find命令的一般形式如下:</p>\n<pre>\nfind pathname -option [- print -exec -ok ...]\n</pre>\n\n<p>pathname 就是查找的目录路径 . 就是当前路径<br>-print: 表示find 命令将匹配的文件输出的标准输出中<br>-exec: 表示find命令对匹配的文件执行该参数锁给出的shell命令。相应命令的形式为<br>‘command’ {} \\ ; #因为{}在shell中又特殊意义，因此要用\\来转义。<br>-ok: 作用和-exec相同，但是会在执行命令的时候给出询问。推荐在执行rm mv chmod的命令前添加-ok</p>\n<p>-option:（<em>表示常用）<br>-name </em> 按照文件名查找文件<br>-perm * e.g. find . -perm 755 -exec ls -l {} \\; 找出当前目录下755权限的文件<br>-prune 直接使用可以不再当前目录查找。不过可以配合-path -prune -o过滤指定目录。<br>-user 按照文件所有者来查找<br>-group 按照所属组<br>-nogroup<br>-nouser</p>\n<p>-mtime -n|+n 按照文件 更改 时间来查找 -n表示n天内，+n指n天前<br>-atime … 按照文件的 访问 时间来查找<br>-ctime … 按照文件 创建 时间 来查找</p>\n<p>还有对应的分钟级别的<br>-mmin<br>-amin<br>-cmin</p>\n<p>-type 查找某个类型的文件（目录也是文件linux一切皆文件）<br>b: 表示块设备文件 一般都是/dev/下的文件<br>d: <em> 表示目录<br>c: 表示字符设备文件 #比如/dev/null /dev/zero tty什么的。<br>p: 表示管道文件 #<br>l: </em> 表示符号链接文件<br>f: * 表示普通文件 最为常用 推荐使用，能加快查找速度</p>\n<p>-size +/- n[cwbkMG] 查找文件大小为指定的大小 +表示大于 e.g. find . -size +19M<br>-depth: 查找文件时，首先查找当前目录的文件，在查询子目录。<br>-fstype: 在指定的文件系统中查找文件.查询/etc/fstab查看系统文件系统。</p>\n<p>-mount: 表示在查找文件时不跨越文件系统mount点<br>-newer file1 !file2 查找更改时间比file1早 是比file2晚的文件</p>\n<p>-follow 如果查找到的文件是链接文件就追踪到指向的文件。</p>\n<p>参考:《构建高可用linux服务器》于洪春</p>\n<p>优秀博客:</p>\n<p><a href=\"http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html</a></p>\n","excerpt":"","more":"<p>find算是平时使用比较频繁的命令<br>总结一下(参考书籍和man find)<br>find 命令<br>find命令的一般形式如下:</p>\n<pre>\nfind pathname -option [- print -exec -ok ...]\n</pre>\n\n<p>pathname 就是查找的目录路径 . 就是当前路径<br>-print: 表示find 命令将匹配的文件输出的标准输出中<br>-exec: 表示find命令对匹配的文件执行该参数锁给出的shell命令。相应命令的形式为<br>‘command’ {} \\ ; #因为{}在shell中又特殊意义，因此要用\\来转义。<br>-ok: 作用和-exec相同，但是会在执行命令的时候给出询问。推荐在执行rm mv chmod的命令前添加-ok</p>\n<p>-option:（<em>表示常用）<br>-name </em> 按照文件名查找文件<br>-perm * e.g. find . -perm 755 -exec ls -l {} \\; 找出当前目录下755权限的文件<br>-prune 直接使用可以不再当前目录查找。不过可以配合-path -prune -o过滤指定目录。<br>-user 按照文件所有者来查找<br>-group 按照所属组<br>-nogroup<br>-nouser</p>\n<p>-mtime -n|+n 按照文件 更改 时间来查找 -n表示n天内，+n指n天前<br>-atime … 按照文件的 访问 时间来查找<br>-ctime … 按照文件 创建 时间 来查找</p>\n<p>还有对应的分钟级别的<br>-mmin<br>-amin<br>-cmin</p>\n<p>-type 查找某个类型的文件（目录也是文件linux一切皆文件）<br>b: 表示块设备文件 一般都是/dev/下的文件<br>d: <em> 表示目录<br>c: 表示字符设备文件 #比如/dev/null /dev/zero tty什么的。<br>p: 表示管道文件 #<br>l: </em> 表示符号链接文件<br>f: * 表示普通文件 最为常用 推荐使用，能加快查找速度</p>\n<p>-size +/- n[cwbkMG] 查找文件大小为指定的大小 +表示大于 e.g. find . -size +19M<br>-depth: 查找文件时，首先查找当前目录的文件，在查询子目录。<br>-fstype: 在指定的文件系统中查找文件.查询/etc/fstab查看系统文件系统。</p>\n<p>-mount: 表示在查找文件时不跨越文件系统mount点<br>-newer file1 !file2 查找更改时间比file1早 是比file2晚的文件</p>\n<p>-follow 如果查找到的文件是链接文件就追踪到指向的文件。</p>\n<p>参考:《构建高可用linux服务器》于洪春</p>\n<p>优秀博客:</p>\n<p><a href=\"http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html\">http://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html</a></p>\n"},{"title":"CentOS安装开发环境","date":"2015-12-16T01:30:46.000Z","_content":"\n包括gcc 开发库，为以后编译各种软件做准备\n\n``` bash\nyum groupinstall -y \"Compatibility libraries\" \"Base\" \"Development tools\"\nyum groupinstall -y \"debugging Tools\" \"Dial-up Networking Support\"\n```\n","source":"_posts/old_post_wp/CentOS安装开发环境.md","raw":"---\ntitle: CentOS安装开发环境\ntags:\n  - linux\n  - config\ncategories:\n  - Docs\ndate: 2015-12-16 09:30:46\npermalink: cetnos-dev-pkgs\n---\n\n包括gcc 开发库，为以后编译各种软件做准备\n\n``` bash\nyum groupinstall -y \"Compatibility libraries\" \"Base\" \"Development tools\"\nyum groupinstall -y \"debugging Tools\" \"Dial-up Networking Support\"\n```\n","slug":"cetnos-dev-pkgs","published":1,"updated":"2016-10-25T08:55:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbja002uuyxun48zb5n5","content":"<p>包括gcc 开发库，为以后编译各种软件做准备</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum groupinstall -y <span class=\"string\">\"Compatibility libraries\"</span> <span class=\"string\">\"Base\"</span> <span class=\"string\">\"Development tools\"</span></div><div class=\"line\">yum groupinstall -y <span class=\"string\">\"debugging Tools\"</span> <span class=\"string\">\"Dial-up Networking Support\"</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>包括gcc 开发库，为以后编译各种软件做准备</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum groupinstall -y <span class=\"string\">\"Compatibility libraries\"</span> <span class=\"string\">\"Base\"</span> <span class=\"string\">\"Development tools\"</span></div><div class=\"line\">yum groupinstall -y <span class=\"string\">\"debugging Tools\"</span> <span class=\"string\">\"Dial-up Networking Support\"</span></div></pre></td></tr></table></figure>\n"},{"title":"focus!","date":"2015-10-20T19:51:10.000Z","_content":"\ni have to focus on doing thing that i have to\nget rid of anything make me unsuitable\n","source":"_posts/old_post_wp/focus.md","raw":"---\ntitle: focus!\ncategories:\n  - 随笔\ndate: 2015-10-21 03:51:10\ntags:\n  - 随便写写\n---\n\ni have to focus on doing thing that i have to\nget rid of anything make me unsuitable\n","slug":"old_post_wp/focus","published":1,"updated":"2016-10-25T08:11:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjd002xuyxuvlv0y9s8","content":"<p>i have to focus on doing thing that i have to<br>get rid of anything make me unsuitable</p>\n","excerpt":"","more":"<p>i have to focus on doing thing that i have to<br>get rid of anything make me unsuitable</p>\n"},{"title":".gitignore忽略规则以及不生效的方法(转)","date":"2016-09-13T03:11:20.000Z","_content":"在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：\n``` plain\n*.a # 忽略所有 .a 结尾的文件\n!lib.a # 但 lib.a 除外\n/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/ # 忽略 build/ 目录下的所有文件\ndoc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n```\n\n有时候在项目开发过程中，**突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，**\n\n原因是**.gitignore只能忽略那些原来没有被track的文件。**\n如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：\n``` bash\ngit rm -r --cached .\ngit add .\ngit commit -m \"update .gitignore\"\n```\n\n[原贴链接](http://www.pfeng.org/archives/840)\n","source":"_posts/old_post_wp/gitignore无效.md","raw":"---\ntitle: .gitignore忽略规则以及不生效的方法(转)\ntags:\n  - git\n  - config\ncategories:\n  - Docs\ndate: 2016-09-13 11:11:20\npermalink: gitignore-uselsess\n---\n在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：\n``` plain\n*.a # 忽略所有 .a 结尾的文件\n!lib.a # 但 lib.a 除外\n/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/ # 忽略 build/ 目录下的所有文件\ndoc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n```\n\n有时候在项目开发过程中，**突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，**\n\n原因是**.gitignore只能忽略那些原来没有被track的文件。**\n如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：\n``` bash\ngit rm -r --cached .\ngit add .\ngit commit -m \"update .gitignore\"\n```\n\n[原贴链接](http://www.pfeng.org/archives/840)\n","slug":"gitignore-uselsess","published":1,"updated":"2016-10-25T09:02:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjf0030uyxub8bksoas","content":"<p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.a # 忽略所有 .a 结尾的文件</div><div class=\"line\">!lib.a # 但 lib.a 除外</div><div class=\"line\">/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</div><div class=\"line\">build/ # 忽略 build/ 目录下的所有文件</div><div class=\"line\">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</div></pre></td></tr></table></figure></p>\n<p>有时候在项目开发过程中，<strong>突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，</strong></p>\n<p>原因是<strong>.gitignore只能忽略那些原来没有被track的文件。</strong><br>如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm -r --cached .</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"update .gitignore\"</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.pfeng.org/archives/840\" target=\"_blank\" rel=\"external\">原贴链接</a></p>\n","excerpt":"","more":"<p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">*.a # 忽略所有 .a 结尾的文件</div><div class=\"line\">!lib.a # 但 lib.a 除外</div><div class=\"line\">/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</div><div class=\"line\">build/ # 忽略 build/ 目录下的所有文件</div><div class=\"line\">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</div></pre></td></tr></table></figure></p>\n<p>有时候在项目开发过程中，<strong>突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，</strong></p>\n<p>原因是<strong>.gitignore只能忽略那些原来没有被track的文件。</strong><br>如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm -r --cached .</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"update .gitignore\"</span></div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.pfeng.org/archives/840\">原贴链接</a></p>\n"},{"title":"goaccess 分析nginx日志","date":"2015-12-25T15:41:00.000Z","_content":"\n以我自己的阿里云主机为例\n环境:\nCentOS6.5\nLAMP\n运行的wordpress\n\nyum源:阿里云的epel源\n地址:\n[aliyun_mirros](http://mirrors.aliyun.com/help/epel)\n\ngoaccess官网\n[http://goaccess.io/](http://goaccess.io/)\n\n安装goaccess\nyum install -y goaccess\n配置crontab 每天晚上11点生成分析文件\n\ncrontab -e\n输入以下内容\n0  23  *  *  * /usr/bin/goaccess -d -f /var/log/nginx/access.log -a  > /www/log/nginxlog$(date +%y%m%d).html >/dev/null 2>&1\n\n### 然后就可以打开看了。不过是英文版的。\n","source":"_posts/old_post_wp/goaccess分析日志.md","raw":"---\ntitle: goaccess 分析nginx日志\ntags:\n  - linux\n  - nginx\ncategories:\n  - Docs\ndate: 2015-12-25 23:41:00\npermalink: goacess-nginx-0\n---\n\n以我自己的阿里云主机为例\n环境:\nCentOS6.5\nLAMP\n运行的wordpress\n\nyum源:阿里云的epel源\n地址:\n[aliyun_mirros](http://mirrors.aliyun.com/help/epel)\n\ngoaccess官网\n[http://goaccess.io/](http://goaccess.io/)\n\n安装goaccess\nyum install -y goaccess\n配置crontab 每天晚上11点生成分析文件\n\ncrontab -e\n输入以下内容\n0  23  *  *  * /usr/bin/goaccess -d -f /var/log/nginx/access.log -a  > /www/log/nginxlog$(date +%y%m%d).html >/dev/null 2>&1\n\n### 然后就可以打开看了。不过是英文版的。\n","slug":"goacess-nginx-0","published":1,"updated":"2016-10-25T08:16:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjh0033uyxul6qk9yux","content":"<p>以我自己的阿里云主机为例<br>环境:<br>CentOS6.5<br>LAMP<br>运行的wordpress</p>\n<p>yum源:阿里云的epel源<br>地址:<br><a href=\"http://mirrors.aliyun.com/help/epel\" target=\"_blank\" rel=\"external\">aliyun_mirros</a></p>\n<p>goaccess官网<br><a href=\"http://goaccess.io/\" target=\"_blank\" rel=\"external\">http://goaccess.io/</a></p>\n<p>安装goaccess<br>yum install -y goaccess<br>配置crontab 每天晚上11点生成分析文件</p>\n<p>crontab -e<br>输入以下内容<br>0  23  <em>  </em>  * /usr/bin/goaccess -d -f /var/log/nginx/access.log -a  &gt; /www/log/nginxlog$(date +%y%m%d).html &gt;/dev/null 2&gt;&amp;1</p>\n<h3 id=\"然后就可以打开看了。不过是英文版的。\"><a href=\"#然后就可以打开看了。不过是英文版的。\" class=\"headerlink\" title=\"然后就可以打开看了。不过是英文版的。\"></a>然后就可以打开看了。不过是英文版的。</h3>","excerpt":"","more":"<p>以我自己的阿里云主机为例<br>环境:<br>CentOS6.5<br>LAMP<br>运行的wordpress</p>\n<p>yum源:阿里云的epel源<br>地址:<br><a href=\"http://mirrors.aliyun.com/help/epel\">aliyun_mirros</a></p>\n<p>goaccess官网<br><a href=\"http://goaccess.io/\">http://goaccess.io/</a></p>\n<p>安装goaccess<br>yum install -y goaccess<br>配置crontab 每天晚上11点生成分析文件</p>\n<p>crontab -e<br>输入以下内容<br>0  23  <em>  </em>  * /usr/bin/goaccess -d -f /var/log/nginx/access.log -a  &gt; /www/log/nginxlog$(date +%y%m%d).html &gt;/dev/null 2&gt;&amp;1</p>\n<h3 id=\"然后就可以打开看了。不过是英文版的。\"><a href=\"#然后就可以打开看了。不过是英文版的。\" class=\"headerlink\" title=\"然后就可以打开看了。不过是英文版的。\"></a>然后就可以打开看了。不过是英文版的。</h3>"},{"title":"Iterm2 使用lrzsz","date":"2016-09-07T04:43:22.000Z","_content":"\n首先你肯定是OS X or MacOS\nos x自带的终端或者iterm2在使用rz sz的时候会卡主\n\niterm2给了个解决方案\n传送门:[https://github.com/mmastrac/iterm2-zmodem](https://github.com/mmastrac/iterm2-zmodem \"github\")\n\n首先安装好Iterm2 还有Homebrew\n\n然后\n安装lrzsz\n``` bash\nbrew install lrzsz\n```\n然后呢下载文件[https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master](https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master \"rzsz\")\n\n解压然后将两个文件复制到/usr/loca/bin目录\n\n然后打开iterm2 快捷键 command + , 或者找到首选项（preferences）-&gt;Profiles -&gt;Advanced -&gt;Triggers -Edit\n\n![tex](../../s/09/1_full.png)\n\n添加两条触发\n第一条 发送\nRegular expression: rz waiting to receive.\\*\\*B0100\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-send-zmodem.sh\nInstant: checked\n\n第二条接收文件\nRegular expression: \\*\\*B00000000000000\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-recv-zmodem.sh\nInstant: checked\n\n![](../../s/09/2_full.png)\n\n然后就可以在iterm2里面使用rz sz命令了\n在iterm2和OS X 10.11.6测试通过\n","source":"_posts/old_post_wp/iterm2使用lrzsz.md","raw":"---\ntitle: Iterm2 使用lrzsz\ntags:\n  - config\n  - OSX\ncategories:\n  - Docs\ndate: 2016-09-07 12:43:22\npermalink: osx-iterm2-lrzsz\n---\n\n首先你肯定是OS X or MacOS\nos x自带的终端或者iterm2在使用rz sz的时候会卡主\n\niterm2给了个解决方案\n传送门:[https://github.com/mmastrac/iterm2-zmodem](https://github.com/mmastrac/iterm2-zmodem \"github\")\n\n首先安装好Iterm2 还有Homebrew\n\n然后\n安装lrzsz\n``` bash\nbrew install lrzsz\n```\n然后呢下载文件[https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master](https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master \"rzsz\")\n\n解压然后将两个文件复制到/usr/loca/bin目录\n\n然后打开iterm2 快捷键 command + , 或者找到首选项（preferences）-&gt;Profiles -&gt;Advanced -&gt;Triggers -Edit\n\n![tex](../../s/09/1_full.png)\n\n添加两条触发\n第一条 发送\nRegular expression: rz waiting to receive.\\*\\*B0100\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-send-zmodem.sh\nInstant: checked\n\n第二条接收文件\nRegular expression: \\*\\*B00000000000000\nAction: Run Silent Coprocess\nParameters: /usr/local/bin/iterm2-recv-zmodem.sh\nInstant: checked\n\n![](../../s/09/2_full.png)\n\n然后就可以在iterm2里面使用rz sz命令了\n在iterm2和OS X 10.11.6测试通过\n","slug":"osx-iterm2-lrzsz","published":1,"updated":"2016-10-25T08:24:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjj0037uyxu1t3biwd8","content":"<p>首先你肯定是OS X or MacOS<br>os x自带的终端或者iterm2在使用rz sz的时候会卡主</p>\n<p>iterm2给了个解决方案<br>传送门:<a href=\"https://github.com/mmastrac/iterm2-zmodem\" title=\"github\" target=\"_blank\" rel=\"external\">https://github.com/mmastrac/iterm2-zmodem</a></p>\n<p>首先安装好Iterm2 还有Homebrew</p>\n<p>然后<br>安装lrzsz<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install lrzsz</div></pre></td></tr></table></figure></p>\n<p>然后呢下载文件<a href=\"https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master\" title=\"rzsz\" target=\"_blank\" rel=\"external\">https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master</a></p>\n<p>解压然后将两个文件复制到/usr/loca/bin目录</p>\n<p>然后打开iterm2 快捷键 command + , 或者找到首选项（preferences）-&gt;Profiles -&gt;Advanced -&gt;Triggers -Edit</p>\n<p><img src=\"../../s/09/1_full.png\" alt=\"tex\"></p>\n<p>添加两条触发<br>第一条 发送<br>Regular expression: rz waiting to receive.**B0100<br>Action: Run Silent Coprocess<br>Parameters: /usr/local/bin/iterm2-send-zmodem.sh<br>Instant: checked</p>\n<p>第二条接收文件<br>Regular expression: **B00000000000000<br>Action: Run Silent Coprocess<br>Parameters: /usr/local/bin/iterm2-recv-zmodem.sh<br>Instant: checked</p>\n<p><img src=\"../../s/09/2_full.png\" alt=\"\"></p>\n<p>然后就可以在iterm2里面使用rz sz命令了<br>在iterm2和OS X 10.11.6测试通过</p>\n","excerpt":"","more":"<p>首先你肯定是OS X or MacOS<br>os x自带的终端或者iterm2在使用rz sz的时候会卡主</p>\n<p>iterm2给了个解决方案<br>传送门:<a href=\"https://github.com/mmastrac/iterm2-zmodem\" title=\"github\">https://github.com/mmastrac/iterm2-zmodem</a></p>\n<p>首先安装好Iterm2 还有Homebrew</p>\n<p>然后<br>安装lrzsz<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install lrzsz</div></pre></td></tr></table></figure></p>\n<p>然后呢下载文件<a href=\"https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master\" title=\"rzsz\">https://codeload.github.com/mmastrac/iterm2-zmodem/zip/master</a></p>\n<p>解压然后将两个文件复制到/usr/loca/bin目录</p>\n<p>然后打开iterm2 快捷键 command + , 或者找到首选项（preferences）-&gt;Profiles -&gt;Advanced -&gt;Triggers -Edit</p>\n<p><img src=\"../../s/09/1_full.png\" alt=\"tex\"></p>\n<p>添加两条触发<br>第一条 发送<br>Regular expression: rz waiting to receive.**B0100<br>Action: Run Silent Coprocess<br>Parameters: /usr/local/bin/iterm2-send-zmodem.sh<br>Instant: checked</p>\n<p>第二条接收文件<br>Regular expression: **B00000000000000<br>Action: Run Silent Coprocess<br>Parameters: /usr/local/bin/iterm2-recv-zmodem.sh<br>Instant: checked</p>\n<p><img src=\"../../s/09/2_full.png\" alt=\"\"></p>\n<p>然后就可以在iterm2里面使用rz sz命令了<br>在iterm2和OS X 10.11.6测试通过</p>\n"},{"title":"ready to use markdown","toc":"ture","date":"2013-07-13T12:34:20.000Z","description":"this is a md","_content":"\n\n# Heading I\n``` bash\n$ curl -u skipper:iskipper file.inpeace.cn\n```\n\n## Heading 2\n*learn markdown is very important*\n\n\n#####heading 4\n\n\n## 架构优点\n*\t部署更加方便简单\n*\t维护更快速\n*\t可以重复使用\n\n#### docker run demo\n``` bash\n\tdocker run -d restart=always \\\n\t-p 80:80 \\\n\t-p 443:443 \\\n\t-v /webconf:/home/belle8/webconf/vhost \\\n\t--volumes-from phpenv \\\n\t--name nginx \\\n\tnginx:1.10\n```\n#### 非常简单的启动\nMore info: [Blog](https://www.inpeace.cn)\n","source":"_posts/old_post_wp/learnmd.md","raw":"title: ready to use markdown\ntoc: ture\ndate: 2013/7/13 20:34:20\ndescription: this is a md\n---\n\n\n# Heading I\n``` bash\n$ curl -u skipper:iskipper file.inpeace.cn\n```\n\n## Heading 2\n*learn markdown is very important*\n\n\n#####heading 4\n\n\n## 架构优点\n*\t部署更加方便简单\n*\t维护更快速\n*\t可以重复使用\n\n#### docker run demo\n``` bash\n\tdocker run -d restart=always \\\n\t-p 80:80 \\\n\t-p 443:443 \\\n\t-v /webconf:/home/belle8/webconf/vhost \\\n\t--volumes-from phpenv \\\n\t--name nginx \\\n\tnginx:1.10\n```\n#### 非常简单的启动\nMore info: [Blog](https://www.inpeace.cn)\n","slug":"old_post_wp/learnmd","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjl003auyxuteywaski","content":"<h1 id=\"Heading-I\"><a href=\"#Heading-I\" class=\"headerlink\" title=\"Heading I\"></a>Heading I</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -u skipper:iskipper file.inpeace.cn</div></pre></td></tr></table></figure>\n<h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><p><em>learn markdown is very important</em></p>\n<p>#####heading 4</p>\n<h2 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h2><ul>\n<li>部署更加方便简单</li>\n<li>维护更快速</li>\n<li>可以重复使用</li>\n</ul>\n<h4 id=\"docker-run-demo\"><a href=\"#docker-run-demo\" class=\"headerlink\" title=\"docker run demo\"></a>docker run demo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> restart=always \\</div><div class=\"line\">-p 80:80 \\</div><div class=\"line\">-p 443:443 \\</div><div class=\"line\">-v /webconf:/home/belle8/webconf/vhost \\</div><div class=\"line\">--volumes-from phpenv \\</div><div class=\"line\">--name nginx \\</div><div class=\"line\">nginx:1.10</div></pre></td></tr></table></figure>\n<h4 id=\"非常简单的启动\"><a href=\"#非常简单的启动\" class=\"headerlink\" title=\"非常简单的启动\"></a>非常简单的启动</h4><p>More info: <a href=\"https://www.inpeace.cn\" target=\"_blank\" rel=\"external\">Blog</a></p>\n","excerpt":"","more":"<h1 id=\"Heading-I\"><a href=\"#Heading-I\" class=\"headerlink\" title=\"Heading I\"></a>Heading I</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -u skipper:iskipper file.inpeace.cn</div></pre></td></tr></table></figure>\n<h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><p><em>learn markdown is very important</em></p>\n<p>#####heading 4</p>\n<h2 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h2><ul>\n<li>部署更加方便简单</li>\n<li>维护更快速</li>\n<li>可以重复使用</li>\n</ul>\n<h4 id=\"docker-run-demo\"><a href=\"#docker-run-demo\" class=\"headerlink\" title=\"docker run demo\"></a>docker run demo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> restart=always \\</div><div class=\"line\">-p 80:80 \\</div><div class=\"line\">-p 443:443 \\</div><div class=\"line\">-v /webconf:/home/belle8/webconf/vhost \\</div><div class=\"line\">--volumes-from phpenv \\</div><div class=\"line\">--name nginx \\</div><div class=\"line\">nginx:1.10</div></pre></td></tr></table></figure>\n<h4 id=\"非常简单的启动\"><a href=\"#非常简单的启动\" class=\"headerlink\" title=\"非常简单的启动\"></a>非常简单的启动</h4><p>More info: <a href=\"https://www.inpeace.cn\">Blog</a></p>\n"},{"title":"linux常用指令记录","date":"2016-10-21T02:55:59.000Z","_content":"*此片文章将会记录日常工作学习到有用shell。方便日后查询*\n好记星不如烂笔头\n\n``` bash\n#查看进程按照内存大小排序\nps -e -o \"%C : %p : %z : %a\"|sort -k5 -nr\n#按照CPU排序\nps -e -o \"%C : %p : %z : %a\"|sort -nr\n#剩余内存\nfree -m |grep \"Mem\" | awk \"{print $2}\"\n#统计连接数\nnetstat -an|awk '/^tcp/ {++S[$NF]} END {for (a in S) print a,S[a]}'\n#当前目录所有文件按照大小排序\nll |awk '{print $9}'|grep -Ev '^\\.'|xargs du -h|sort -h\n#curl使用用户名密码访问\ncurl -u username:password url\n#过滤掉attac*,ucser* 还有当前目录根.\nll |grep -e '^d'|awk '{print $9}'|grep -vE '(attac*|uc_ser*|\\.)'|xargs du -sh\n```\n","source":"_posts/old_post_wp/linux 常用shell命令.md","raw":"---\ntitle: linux常用指令记录\ntags:\n  - linux\n  - shell\ncategories:\n  - Docs\ndate: 2016-10-21 10:55:59\npermalink: linux-shell-command-notebook-0\n---\n*此片文章将会记录日常工作学习到有用shell。方便日后查询*\n好记星不如烂笔头\n\n``` bash\n#查看进程按照内存大小排序\nps -e -o \"%C : %p : %z : %a\"|sort -k5 -nr\n#按照CPU排序\nps -e -o \"%C : %p : %z : %a\"|sort -nr\n#剩余内存\nfree -m |grep \"Mem\" | awk \"{print $2}\"\n#统计连接数\nnetstat -an|awk '/^tcp/ {++S[$NF]} END {for (a in S) print a,S[a]}'\n#当前目录所有文件按照大小排序\nll |awk '{print $9}'|grep -Ev '^\\.'|xargs du -h|sort -h\n#curl使用用户名密码访问\ncurl -u username:password url\n#过滤掉attac*,ucser* 还有当前目录根.\nll |grep -e '^d'|awk '{print $9}'|grep -vE '(attac*|uc_ser*|\\.)'|xargs du -sh\n```\n","slug":"linux-shell-command-notebook-0","published":1,"updated":"2016-10-25T09:01:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjn003duyxuh1fbz3s8","content":"<p><em>此片文章将会记录日常工作学习到有用shell。方便日后查询</em><br>好记星不如烂笔头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#查看进程按照内存大小排序</span></div><div class=\"line\">ps <span class=\"_\">-e</span> -o <span class=\"string\">\"%C : %p : %z : %a\"</span>|sort -k5 -nr</div><div class=\"line\"><span class=\"comment\">#按照CPU排序</span></div><div class=\"line\">ps <span class=\"_\">-e</span> -o <span class=\"string\">\"%C : %p : %z : %a\"</span>|sort -nr</div><div class=\"line\"><span class=\"comment\">#剩余内存</span></div><div class=\"line\">free -m |grep <span class=\"string\">\"Mem\"</span> | awk <span class=\"string\">\"&#123;print <span class=\"variable\">$2</span>&#125;\"</span></div><div class=\"line\"><span class=\"comment\">#统计连接数</span></div><div class=\"line\">netstat -an|awk <span class=\"string\">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for (a in S) print a,S[a]&#125;'</span></div><div class=\"line\"><span class=\"comment\">#当前目录所有文件按照大小排序</span></div><div class=\"line\">ll |awk <span class=\"string\">'&#123;print $9&#125;'</span>|grep -Ev <span class=\"string\">'^\\.'</span>|xargs du -h|sort -h</div><div class=\"line\"><span class=\"comment\">#curl使用用户名密码访问</span></div><div class=\"line\">curl -u username:password url</div><div class=\"line\"><span class=\"comment\">#过滤掉attac*,ucser* 还有当前目录根.</span></div><div class=\"line\">ll |grep <span class=\"_\">-e</span> <span class=\"string\">'^d'</span>|awk <span class=\"string\">'&#123;print $9&#125;'</span>|grep -vE <span class=\"string\">'(attac*|uc_ser*|\\.)'</span>|xargs du -sh</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><em>此片文章将会记录日常工作学习到有用shell。方便日后查询</em><br>好记星不如烂笔头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#查看进程按照内存大小排序</span></div><div class=\"line\">ps <span class=\"_\">-e</span> -o <span class=\"string\">\"%C : %p : %z : %a\"</span>|sort -k5 -nr</div><div class=\"line\"><span class=\"comment\">#按照CPU排序</span></div><div class=\"line\">ps <span class=\"_\">-e</span> -o <span class=\"string\">\"%C : %p : %z : %a\"</span>|sort -nr</div><div class=\"line\"><span class=\"comment\">#剩余内存</span></div><div class=\"line\">free -m |grep <span class=\"string\">\"Mem\"</span> | awk <span class=\"string\">\"&#123;print <span class=\"variable\">$2</span>&#125;\"</span></div><div class=\"line\"><span class=\"comment\">#统计连接数</span></div><div class=\"line\">netstat -an|awk <span class=\"string\">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for (a in S) print a,S[a]&#125;'</span></div><div class=\"line\"><span class=\"comment\">#当前目录所有文件按照大小排序</span></div><div class=\"line\">ll |awk <span class=\"string\">'&#123;print $9&#125;'</span>|grep -Ev <span class=\"string\">'^\\.'</span>|xargs du -h|sort -h</div><div class=\"line\"><span class=\"comment\">#curl使用用户名密码访问</span></div><div class=\"line\">curl -u username:password url</div><div class=\"line\"><span class=\"comment\">#过滤掉attac*,ucser* 还有当前目录根.</span></div><div class=\"line\">ll |grep <span class=\"_\">-e</span> <span class=\"string\">'^d'</span>|awk <span class=\"string\">'&#123;print $9&#125;'</span>|grep -vE <span class=\"string\">'(attac*|uc_ser*|\\.)'</span>|xargs du -sh</div></pre></td></tr></table></figure>\n"},{"title":"logstash 2.3 启动脚本 简陋版","date":"2016-05-10T09:54:19.000Z","_content":"\n本脚本是用于启动logstash的脚本在ubuntu 14.04.3测试通过\n\n根据自己的需要\n请修改一下内容:\n``` plain\nlogstash_bin=\"\"\nlogstash_conf=\"\"\nlogstash_log=\"\"\npid_file=\"\"\n```\n\n##### 的值为你的logstash bin目录路径 配置文件绝对路径 log绝对路径\n\n``` bash\n#!/bin/bash\n#www.inpeace.cn\n#skipper i@inpeace.cn for logstash 2.3.1\n#please check your java env right\n#v0.1 20160510\nlogstash_bin=\"\"\nlogstash_conf=\"\"\nlogstash_log=\"\"\npid_file=\"\"\npid=$(ps -ef|grep java|grep logstash|awk '{print $2}')\n\nstart () {\n\techo \"Now starting logstash it will cost a little time\"\n        ${logstash_bin}/logstash -f ${logstash_conf} -r -l ${logstash_log} &amp; &gt;/dev/null 2&gt;&amp;1\n\techo $pid &gt; ${pid_file}\n}\n\nstop () {\n\techo \"Stoping logstash\"\n\tkill $pid\n}\n\nrestart () {\n\tstop\n\tstart\n}\n\ncase $1 in\n        start)\n                start\n                ;;\n        stop)\n                stop\n                ;;\n        restart)\n                stop\n                start\n                ;;\n        *)\n                echo \"Usage: $0 {start|stop|restart|}\"\n                exit 1\n                ;;\nesac\n\nexit 0\n</pre>\n","source":"_posts/old_post_wp/logstash启动脚本简陋.md","raw":"---\ntitle: logstash 2.3 启动脚本 简陋版\ntags:\n  - shell\n  - linux\n  - config\n  - elk\ncategories:\n  - Docs\ndate: 2016-05-10 17:54:19\npermalink: logstash-init-shell\n---\n\n本脚本是用于启动logstash的脚本在ubuntu 14.04.3测试通过\n\n根据自己的需要\n请修改一下内容:\n``` plain\nlogstash_bin=\"\"\nlogstash_conf=\"\"\nlogstash_log=\"\"\npid_file=\"\"\n```\n\n##### 的值为你的logstash bin目录路径 配置文件绝对路径 log绝对路径\n\n``` bash\n#!/bin/bash\n#www.inpeace.cn\n#skipper i@inpeace.cn for logstash 2.3.1\n#please check your java env right\n#v0.1 20160510\nlogstash_bin=\"\"\nlogstash_conf=\"\"\nlogstash_log=\"\"\npid_file=\"\"\npid=$(ps -ef|grep java|grep logstash|awk '{print $2}')\n\nstart () {\n\techo \"Now starting logstash it will cost a little time\"\n        ${logstash_bin}/logstash -f ${logstash_conf} -r -l ${logstash_log} &amp; &gt;/dev/null 2&gt;&amp;1\n\techo $pid &gt; ${pid_file}\n}\n\nstop () {\n\techo \"Stoping logstash\"\n\tkill $pid\n}\n\nrestart () {\n\tstop\n\tstart\n}\n\ncase $1 in\n        start)\n                start\n                ;;\n        stop)\n                stop\n                ;;\n        restart)\n                stop\n                start\n                ;;\n        *)\n                echo \"Usage: $0 {start|stop|restart|}\"\n                exit 1\n                ;;\nesac\n\nexit 0\n</pre>\n","slug":"logstash-init-shell","published":1,"updated":"2016-10-25T08:36:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjq003huyxun24ekk2o","content":"<p>本脚本是用于启动logstash的脚本在ubuntu 14.04.3测试通过</p>\n<p>根据自己的需要<br>请修改一下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">logstash_bin=&quot;&quot;</div><div class=\"line\">logstash_conf=&quot;&quot;</div><div class=\"line\">logstash_log=&quot;&quot;</div><div class=\"line\">pid_file=&quot;&quot;</div></pre></td></tr></table></figure></p>\n<h5 id=\"的值为你的logstash-bin目录路径-配置文件绝对路径-log绝对路径\"><a href=\"#的值为你的logstash-bin目录路径-配置文件绝对路径-log绝对路径\" class=\"headerlink\" title=\"的值为你的logstash bin目录路径 配置文件绝对路径 log绝对路径\"></a>的值为你的logstash bin目录路径 配置文件绝对路径 log绝对路径</h5><p>``` bash</p>\n<p>#!/bin/bash</p>\n<p>#www.inpeace.cn</p>\n<p>#skipper i@inpeace.cn for logstash 2.3.1</p>\n<p>#please check your java env right</p>\n<p>#v0.1 20160510<br>logstash_bin=””<br>logstash_conf=””<br>logstash_log=””<br>pid_file=””<br>pid=$(ps -ef|grep java|grep logstash|awk ‘{print $2}’)</p>\n<p>start () {<br>    echo “Now starting logstash it will cost a little time”<br>        ${logstash_bin}/logstash -f ${logstash_conf} -r -l ${logstash_log} &amp; &gt;/dev/null 2&gt;&amp;1<br>    echo $pid &gt; ${pid_file}<br>}</p>\n<p>stop () {<br>    echo “Stoping logstash”<br>    kill $pid<br>}</p>\n<p>restart () {<br>    stop<br>    start<br>}</p>\n<p>case $1 in<br>        start)<br>                start<br>                ;;<br>        stop)<br>                stop<br>                ;;<br>        restart)<br>                stop<br>                start<br>                ;;<br>        *)<br>                echo “Usage: $0 {start|stop|restart|}”<br>                exit 1<br>                ;;<br>esac</p>\n<p>exit 0<br></p>\n","excerpt":"","more":"<p>本脚本是用于启动logstash的脚本在ubuntu 14.04.3测试通过</p>\n<p>根据自己的需要<br>请修改一下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">logstash_bin=&quot;&quot;</div><div class=\"line\">logstash_conf=&quot;&quot;</div><div class=\"line\">logstash_log=&quot;&quot;</div><div class=\"line\">pid_file=&quot;&quot;</div></pre></td></tr></table></figure></p>\n<h5 id=\"的值为你的logstash-bin目录路径-配置文件绝对路径-log绝对路径\"><a href=\"#的值为你的logstash-bin目录路径-配置文件绝对路径-log绝对路径\" class=\"headerlink\" title=\"的值为你的logstash bin目录路径 配置文件绝对路径 log绝对路径\"></a>的值为你的logstash bin目录路径 配置文件绝对路径 log绝对路径</h5><p>``` bash</p>\n<p>#!/bin/bash</p>\n<p>#www.inpeace.cn</p>\n<p>#skipper i@inpeace.cn for logstash 2.3.1</p>\n<p>#please check your java env right</p>\n<p>#v0.1 20160510<br>logstash_bin=””<br>logstash_conf=””<br>logstash_log=””<br>pid_file=””<br>pid=$(ps -ef|grep java|grep logstash|awk ‘{print $2}’)</p>\n<p>start () {<br>    echo “Now starting logstash it will cost a little time”<br>        ${logstash_bin}/logstash -f ${logstash_conf} -r -l ${logstash_log} &amp; &gt;/dev/null 2&gt;&amp;1<br>    echo $pid &gt; ${pid_file}<br>}</p>\n<p>stop () {<br>    echo “Stoping logstash”<br>    kill $pid<br>}</p>\n<p>restart () {<br>    stop<br>    start<br>}</p>\n<p>case $1 in<br>        start)<br>                start<br>                ;;<br>        stop)<br>                stop<br>                ;;<br>        restart)<br>                stop<br>                start<br>                ;;<br>        *)<br>                echo “Usage: $0 {start|stop|restart|}”<br>                exit 1<br>                ;;<br>esac</p>\n<p>exit 0<br></pre></p>\n"},{"title":"linux备份文件权限","date":"2015-12-01T15:25:25.000Z","_content":"\n备份文件权限\n\numount 所有不需要被处理的设备，例如NTFS/FAT 这类不能保存权限的分区，可能的话也umount 你的home（~），然后使用getfacl 保存所有文件的权限，例如\n\n<pre class=\"lang:default decode:true \" >sudo getfacl -R / &gt;sysfacl-root-$(date +%Y-%m-%d).facl </pre>\n\n保管好这个权限存档文件，有朝一日手滑之后你会想起来它的。\n恢复文件权限\n\n<!--more-->\n\n同样umount 所有不需要被处理的设备，然后从文件权限备份中批量恢复权限\n\n<pre class=\"lang:default decode:true \" >sudo setfacl --restore=ur_facl_bak_file</pre>\n\n没了，有效防止chmod -R 755 /etc 之类的灾难。\n制约危险指令\n\n自不必说的首先就是 chmod 和 rm 这两个危险指令应该尽量受到制约，它们90% 悲剧的源头\n\n<pre class=\"lang:default decode:true \" >\nalias chmod='/usr/bin/env chmod --preserve-root'\nalias rm='/usr/bin/env rm -I --preserve-root'\n</pre>\n\n然而实质性的东西并没有改变，《UNIX痛恨者手册》中就花了很大的篇幅来批评 rm 这类不负责任的指令。Linux 把这些都一股脑推给了用户，然而并没有多少用户愿意去封装这些指令，或者干脆做一个更加安全的实现。这些原始的指令仍然被高频率使用。\n类似的，你或许还要 alias 一些其他的指令：\n\n<pre class=\"lang:default decode:true \" >alias cp='/usr/bin/env cp -i'\nalias mv='/usr/bin/env mv -i'\nalias ln='/usr/bin/env ln -i'\nalias chown='/usr/bin/env chown --preserve-root'\nalias chgrp='/usr/bin/env chgrp --preserve-root'</pre>\n\n原帖\n[http://blog.csdn.net/ispeller/article/details/45534323](http://blog.csdn.net/ispeller/article/details/45534323)\n","source":"_posts/old_post_wp/linux备份文件权限.md","raw":"---\ntitle: linux备份文件权限\ntags:\n  - linux\n  - Tips\ncategories:\n  - Docs\ndate: 2015-12-01 23:25:25\npermalink: linxu-backup-your-rights\n---\n\n备份文件权限\n\numount 所有不需要被处理的设备，例如NTFS/FAT 这类不能保存权限的分区，可能的话也umount 你的home（~），然后使用getfacl 保存所有文件的权限，例如\n\n<pre class=\"lang:default decode:true \" >sudo getfacl -R / &gt;sysfacl-root-$(date +%Y-%m-%d).facl </pre>\n\n保管好这个权限存档文件，有朝一日手滑之后你会想起来它的。\n恢复文件权限\n\n<!--more-->\n\n同样umount 所有不需要被处理的设备，然后从文件权限备份中批量恢复权限\n\n<pre class=\"lang:default decode:true \" >sudo setfacl --restore=ur_facl_bak_file</pre>\n\n没了，有效防止chmod -R 755 /etc 之类的灾难。\n制约危险指令\n\n自不必说的首先就是 chmod 和 rm 这两个危险指令应该尽量受到制约，它们90% 悲剧的源头\n\n<pre class=\"lang:default decode:true \" >\nalias chmod='/usr/bin/env chmod --preserve-root'\nalias rm='/usr/bin/env rm -I --preserve-root'\n</pre>\n\n然而实质性的东西并没有改变，《UNIX痛恨者手册》中就花了很大的篇幅来批评 rm 这类不负责任的指令。Linux 把这些都一股脑推给了用户，然而并没有多少用户愿意去封装这些指令，或者干脆做一个更加安全的实现。这些原始的指令仍然被高频率使用。\n类似的，你或许还要 alias 一些其他的指令：\n\n<pre class=\"lang:default decode:true \" >alias cp='/usr/bin/env cp -i'\nalias mv='/usr/bin/env mv -i'\nalias ln='/usr/bin/env ln -i'\nalias chown='/usr/bin/env chown --preserve-root'\nalias chgrp='/usr/bin/env chgrp --preserve-root'</pre>\n\n原帖\n[http://blog.csdn.net/ispeller/article/details/45534323](http://blog.csdn.net/ispeller/article/details/45534323)\n","slug":"linxu-backup-your-rights","published":1,"updated":"2016-10-25T08:37:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjs003juyxuexjlan87","content":"<p>备份文件权限</p>\n<p>umount 所有不需要被处理的设备，例如NTFS/FAT 这类不能保存权限的分区，可能的话也umount 你的home（~），然后使用getfacl 保存所有文件的权限，例如</p>\n<pre class=\"lang:default decode:true \">sudo getfacl -R / &gt;sysfacl-root-$(date +%Y-%m-%d).facl </pre>\n\n<p>保管好这个权限存档文件，有朝一日手滑之后你会想起来它的。<br>恢复文件权限</p>\n<a id=\"more\"></a>\n<p>同样umount 所有不需要被处理的设备，然后从文件权限备份中批量恢复权限</p>\n<pre class=\"lang:default decode:true \">sudo setfacl --restore=ur_facl_bak_file</pre>\n\n<p>没了，有效防止chmod -R 755 /etc 之类的灾难。<br>制约危险指令</p>\n<p>自不必说的首先就是 chmod 和 rm 这两个危险指令应该尽量受到制约，它们90% 悲剧的源头</p>\n<pre class=\"lang:default decode:true \">\nalias chmod='/usr/bin/env chmod --preserve-root'\nalias rm='/usr/bin/env rm -I --preserve-root'\n</pre>\n\n<p>然而实质性的东西并没有改变，《UNIX痛恨者手册》中就花了很大的篇幅来批评 rm 这类不负责任的指令。Linux 把这些都一股脑推给了用户，然而并没有多少用户愿意去封装这些指令，或者干脆做一个更加安全的实现。这些原始的指令仍然被高频率使用。<br>类似的，你或许还要 alias 一些其他的指令：</p>\n<pre class=\"lang:default decode:true \">alias cp='/usr/bin/env cp -i'\nalias mv='/usr/bin/env mv -i'\nalias ln='/usr/bin/env ln -i'\nalias chown='/usr/bin/env chown --preserve-root'\nalias chgrp='/usr/bin/env chgrp --preserve-root'</pre>\n\n<p>原帖<br><a href=\"http://blog.csdn.net/ispeller/article/details/45534323\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ispeller/article/details/45534323</a></p>\n","excerpt":"<p>备份文件权限</p>\n<p>umount 所有不需要被处理的设备，例如NTFS/FAT 这类不能保存权限的分区，可能的话也umount 你的home（~），然后使用getfacl 保存所有文件的权限，例如</p>\n<pre class=\"lang:default decode:true \" >sudo getfacl -R / &gt;sysfacl-root-$(date +%Y-%m-%d).facl </pre>\n\n<p>保管好这个权限存档文件，有朝一日手滑之后你会想起来它的。<br>恢复文件权限</p>","more":"<p>同样umount 所有不需要被处理的设备，然后从文件权限备份中批量恢复权限</p>\n<pre class=\"lang:default decode:true \" >sudo setfacl --restore=ur_facl_bak_file</pre>\n\n<p>没了，有效防止chmod -R 755 /etc 之类的灾难。<br>制约危险指令</p>\n<p>自不必说的首先就是 chmod 和 rm 这两个危险指令应该尽量受到制约，它们90% 悲剧的源头</p>\n<pre class=\"lang:default decode:true \" >\nalias chmod='/usr/bin/env chmod --preserve-root'\nalias rm='/usr/bin/env rm -I --preserve-root'\n</pre>\n\n<p>然而实质性的东西并没有改变，《UNIX痛恨者手册》中就花了很大的篇幅来批评 rm 这类不负责任的指令。Linux 把这些都一股脑推给了用户，然而并没有多少用户愿意去封装这些指令，或者干脆做一个更加安全的实现。这些原始的指令仍然被高频率使用。<br>类似的，你或许还要 alias 一些其他的指令：</p>\n<pre class=\"lang:default decode:true \" >alias cp='/usr/bin/env cp -i'\nalias mv='/usr/bin/env mv -i'\nalias ln='/usr/bin/env ln -i'\nalias chown='/usr/bin/env chown --preserve-root'\nalias chgrp='/usr/bin/env chgrp --preserve-root'</pre>\n\n<p>原帖<br><a href=\"http://blog.csdn.net/ispeller/article/details/45534323\">http://blog.csdn.net/ispeller/article/details/45534323</a></p>"},{"title":"xshell 或SecureCRT传输文件工具","date":"2015-12-14T08:19:17.000Z","_content":"\nlrzsz\n安装方法\ncentos\n``` bash\nyum install -y lrzsz\n```\nubuntu:\n\n``` bash\napt install -y lrzsz\n```\n使用方法\n``` bash\nsz file 将文件发送出来\nrz 将文件传输都linux中去\n```\n\n*具体可以参见 rz -h 或者  sz -h*\n","source":"_posts/old_post_wp/lrzsz使用.md","raw":"---\ntitle: xshell 或SecureCRT传输文件工具\ntags:\n  - linux\n  - 实用工具\ncategories:\n  - Docs\ndate: 2015-12-14 16:19:17\npermalink: linux-lrzsz-usage-demo0\n---\n\nlrzsz\n安装方法\ncentos\n``` bash\nyum install -y lrzsz\n```\nubuntu:\n\n``` bash\napt install -y lrzsz\n```\n使用方法\n``` bash\nsz file 将文件发送出来\nrz 将文件传输都linux中去\n```\n\n*具体可以参见 rz -h 或者  sz -h*\n","slug":"linux-lrzsz-usage-demo0","published":1,"updated":"2016-10-25T08:36:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjv003nuyxu2ocjjvrs","content":"<p>lrzsz<br>安装方法<br>centos<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y lrzsz</div></pre></td></tr></table></figure></p>\n<p>ubuntu:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt install -y lrzsz</div></pre></td></tr></table></figure>\n<p>使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sz file 将文件发送出来</div><div class=\"line\">rz 将文件传输都linux中去</div></pre></td></tr></table></figure></p>\n<p><em>具体可以参见 rz -h 或者  sz -h</em></p>\n","excerpt":"","more":"<p>lrzsz<br>安装方法<br>centos<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y lrzsz</div></pre></td></tr></table></figure></p>\n<p>ubuntu:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt install -y lrzsz</div></pre></td></tr></table></figure>\n<p>使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sz file 将文件发送出来</div><div class=\"line\">rz 将文件传输都linux中去</div></pre></td></tr></table></figure></p>\n<p><em>具体可以参见 rz -h 或者  sz -h</em></p>\n"},{"title":"lua编译报错libreadline.so: undefined reference to","date":"2015-11-18T06:01:33.000Z","_content":"\n因为编译lua需要readline\nreadline又需要ncurses\n修改lua安装包src/MakeFile 109行\n\n<pre class=\"lang:default decode:true \" >linux: $(MAKE) $(ALL) SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline -lncurses\"</pre>\n","source":"_posts/old_post_wp/lua编译报错.md","raw":"---\ntitle: 'lua编译报错libreadline.so: undefined reference to'\ntags:\n  - linux\n  - errors\ncategories:\n  - Docs\ndate: 2015-11-18 14:01:33\npermalink: linxu-lua-error-0\n---\n\n因为编译lua需要readline\nreadline又需要ncurses\n修改lua安装包src/MakeFile 109行\n\n<pre class=\"lang:default decode:true \" >linux: $(MAKE) $(ALL) SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline -lncurses\"</pre>\n","slug":"linxu-lua-error-0","published":1,"updated":"2016-10-25T08:50:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbjy003quyxugo68imzh","content":"<p>因为编译lua需要readline<br>readline又需要ncurses<br>修改lua安装包src/MakeFile 109行</p>\n<pre class=\"lang:default decode:true \">linux: $(MAKE) $(ALL) SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline -lncurses\"</pre>\n","excerpt":"","more":"<p>因为编译lua需要readline<br>readline又需要ncurses<br>修改lua安装包src/MakeFile 109行</p>\n<pre class=\"lang:default decode:true \" >linux: $(MAKE) $(ALL) SYSCFLAGS=\"-DLUA_USE_LINUX\" SYSLIBS=\"-Wl,-E -ldl -lreadline -lncurses\"</pre>\n"},{"title":"mycli 自动补全 语法高亮","date":"2015-11-02T15:11:08.000Z","_content":"\n#### nice tool for mysql\n安装指导\n[http://mycli.net/install](http://mycli.net/install)\n``` bash\npip install mycli\n```\n\n##### 2种用法\n\n``` bash\nmycli mysql://root@localhost:3306\n# 或者\nmycli -h localhost -u root\n```\n","source":"_posts/old_post_wp/mycli.md","raw":"---\ntitle: mycli 自动补全 语法高亮\ntags:\n  - linux\n  - mysql\n  - 实用工具\n  - OSX\ncategories:\n  - Docs\ndate: 2015-11-02 23:11:08\npermalink: mycli-nice-mysql-client-tools\n---\n\n#### nice tool for mysql\n安装指导\n[http://mycli.net/install](http://mycli.net/install)\n``` bash\npip install mycli\n```\n\n##### 2种用法\n\n``` bash\nmycli mysql://root@localhost:3306\n# 或者\nmycli -h localhost -u root\n```\n","slug":"mycli-nice-mysql-client-tools","published":1,"updated":"2016-10-25T08:41:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbk1003tuyxury0bmyjn","content":"<h4 id=\"nice-tool-for-mysql\"><a href=\"#nice-tool-for-mysql\" class=\"headerlink\" title=\"nice tool for mysql\"></a>nice tool for mysql</h4><p>安装指导<br><a href=\"http://mycli.net/install\" target=\"_blank\" rel=\"external\">http://mycli.net/install</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install mycli</div></pre></td></tr></table></figure></p>\n<h5 id=\"2种用法\"><a href=\"#2种用法\" class=\"headerlink\" title=\"2种用法\"></a>2种用法</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mycli mysql://root@localhost:3306</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">mycli -h localhost -u root</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"nice-tool-for-mysql\"><a href=\"#nice-tool-for-mysql\" class=\"headerlink\" title=\"nice tool for mysql\"></a>nice tool for mysql</h4><p>安装指导<br><a href=\"http://mycli.net/install\">http://mycli.net/install</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install mycli</div></pre></td></tr></table></figure></p>\n<h5 id=\"2种用法\"><a href=\"#2种用法\" class=\"headerlink\" title=\"2种用法\"></a>2种用法</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mycli mysql://root@localhost:3306</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">mycli -h localhost -u root</div></pre></td></tr></table></figure>\n"},{"title":"linux proc目录学习（转）","date":"2015-11-29T10:26:00.000Z","_content":"\n    Linux-proc\n\n    proc 文件系统\n\n    在Linux中有额外的机制可以为内核和内核模块将信息发送给进程-- /proc 文件系统。最初设计的目的是允许更方便的对进程信息进行访问（因此得名），现在它被每一个有有趣的东西报告的内核使用，例如/proc/modules 有模块的列表/proc/meminfo 有内存使用的统计表。\n<!--more-->\n\n    　　使用proc 文件系统的方法和使用设备驱动程序非常相似--创建一个/proc 文件需要的所有信息的结构，包括任何处理函数的指针（在我们的例子中只有一个，当某人试图从/proc 文件读时调用的那一个）。然后，init_module 在内核中登记该结构而cleanup_module 注销它。\n\n    　　我们使用proc_register_dynamic(这是在2.0 版中的情况，在2.2 版中如果我们将节点设置为0系统将自动为我们做到) 的原因是我们不想预先决定我们的文件的节点数字，而是为防止冲突而由内核决定它。通常的文件系统存在于磁盘上而不是内存中（/proc 在内存中），在这中情况下，节点数是是指向文件的索引节点所在的磁盘位置的指针。节点包含文件的信息（例如文件的存取权限）和指向磁盘位置或文件数据可以被找到的几个位置的指针。\n\n    　　因为当文件被打开或关闭的时候不能得到调用，所以在这个模块中没有地方放置MOD_INC_USE_COUNT 和MOD_DEC_USE_COUNT，并且，如果文件被打开随后模块被移除，我们没有办法避免后果。在下一章我们会看到一个艰难的但更灵活的可以处理/proc文件的实现方式，它也可以让我们防止那个问题。\n\n    http://www.2cto.com/os/201202/119552.html\n\n    Linux 内核提供了一种通过/proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。尽管在各种硬件平台上的Linux 系统的/proc 文件系统的基本概念都是相同的，但本文只讨论基于intel x86 架构的Linux /proc 文件系统。\n\n    _________________ _________________ _________________\n\n    /proc --- 一个虚拟文件系统\n\n    /proc 文件系统是一种内核和内核模块用来向进程(process) 发送信息的机制(所以叫做/proc)。这个伪文件系统让你可以和内核内部数据结构进行交互，获取 有关进程的有用信息，在运行中(on the fly) 改变设置(通过改变内核参数)。 与其他文件系统不同，/proc 存在于内存之中而不是硬盘上。如果你察看文件/proc/mounts (和mount 命令一样列出所有已经加载的文件系统)，你会看到其中 一行是这样的：\n\n    grep proc /proc/mounts\n    /proc /proc proc rw 0 0\n\n    /proc 由内核控制，没有承载/proc 的设备。因为/proc 主要存放由内核控制的状态信息，所以大部分这些信息的逻辑位置位于内核控制的内存。对/proc 进行一次'ls -l' 可以看到大部分文件都是0 字节大的；不过察看这些文件的时候，确实可以看到一些信息。这怎么可能？这是因为/proc 文件系统和其他常规的文件系统一样把自己注册到虚拟文件系统层(VFS) 了。然而，直到当VFS 调用它，请求文件、目录的i-node 的时候，/proc 文件系统才根据内核中的信息建立相应的文件和目录。\n\n    加载proc 文件系统\n\n    如果系统中还没有加载proc 文件系统，可以通过如下命令加载proc 文件系统：\n\n    mount -t proc proc /proc\n    上述命令将成功加载你的proc 文件系统。更多细节请阅读mount 命令的man page。\n\n    察看/proc 的文件\n\n    /proc 的文件可以用于访问有关内核的状态、计算机的属性、正在运行的进程的状态等信息。大部分/proc 中的文件和目录提供系统物理环境最新的信息。尽管/proc 中的文件是虚拟的，但它们仍可以使用任何文件编辑器或像'more', 'less'或'cat'这样的程序来查看。当编辑程序试图打开一个虚拟文件时，这个文件就通过内核中的信息被凭空地(on the fly) 创建了。这是一些我从我的系统中得到的一些有趣结果：\n\n    $ ls -l /proc/cpuinfo\n    -r--r--r-- 1 root root 0 Dec 25 11:01 /proc/cpuinfo\n\n    $ file /proc/cpuinfo\n    /proc/cpuinfo: empty\n\n    $ cat /proc/cpuinfo\n\n    processor : 0\n    vendor_id : GenuineIntel\n    cpu family : 6\n    model : 8\n    model name : Pentium III (Coppermine)\n    stepping : 6\n    cpu MHz : 1000.119\n    cache size : 256 KB\n    fdiv_bug : no\n    hlt_bug : no\n    sep_bug : no\n    f00f_bug : no\n    coma_bug : no\n    fpu : yes\n    fpu_exception : yes\n    cpuid level : 2\n    wp : yes\n    flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\n    cmov pat pse36 mmx fxsr xmm\n    bogomips : 1998.85\n\n    processor : 3\n    vendor_id : GenuineIntel\n    cpu family : 6\n    model : 8\n    model name : Pentium III (Coppermine)\n    stepping : 6\n    cpu MHz : 1000.119\n    cache size : 256 KB\n    fdiv_bug : no\n    hlt_bug : no\n    sep_bug : no\n    f00f_bug : no\n    coma_bug : no\n    fpu : yes\n    fpu_exception : yes\n    cpuid level : 2\n    wp : yes\n    flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\n    cmov pat pse36 mmx fxsr xmm\n    bogomips : 1992.29\n\n    这是一个从双CPU 的系统中得到的结果，上述大部分的信息十分清楚地给出了这个系统的有用的硬件信息。有些/proc 的文件是经过编码的，不同的工具可以被用来解释这些编码过的信息并输出成可读的形式。这样的工具包括：'top', 'ps', 'apm' 等。\n\n    得到有用的系统/内核信息\n\n    proc 文件系统可以被用于收集有用的关于系统和运行中的内核的信息。下面是一些重要的文件：\n\n    * /proc/cpuinfo - CPU 的信息(型号, 家族, 缓存大小等)\n    * /proc/meminfo - 物理内存、交换空间等的信息\n    * /proc/mounts - 已加载的文件系统的列表\n    * /proc/devices - 可用设备的列表\n    * /proc/filesystems - 被支持的文件系统\n    * /proc/modules - 已加载的模块\n    * /proc/version - 内核版本\n    * /proc/cmdline - 系统启动时输入的内核命令行参数\n\n    proc 中的文件远不止上面列出的这么多。想要进一步了解的读者可以对/proc 的每一个文件都'more'一下或读参考文献[1]获取更多的有关/proc 目录中的文件的信息。我建议使用'more'而不是'cat'，除非你知道这个文件很小，因为有些文件(比如kcore) 可能会非常长。\n\n    有关运行中的进程的信息\n\n    /proc 文件系统可以用于获取运行中的进程的信息。在/proc 中有一些编号的子目录。每个编号的目录对应一个进程id (PID)。这样，每一个运行中的进程/proc 中都有一个用它的PID 命名的目录。这些子目录中包含可以提供有关进程的状态和环境的重要细节信息的文件。让我们试着查找一个运行中的进程。\n\n    $ ps -aef | grep mozilla\n    root 32558 32425 8 22:53 pts/1 00:01:23 /usr/bin/mozilla\n\n    上述命令显示有一个正在运行的mozilla 进程的PID 是32558。相对应的，/proc 中应该有一个名叫32558 的目录\n\n    $ ls -l /proc/32558\n    total 0\n    -r--r--r-- 1 root root 0 Dec 25 22:59 cmdline\n    -r--r--r-- 1 root root 0 Dec 25 22:59 cpu\n    lrwxrwxrwx 1 root root 0 Dec 25 22:59 cwd -> /proc/\n    -r-------- 1 root root 0 Dec 25 22:59 environ\n    lrwxrwxrwx 1 root root 0 Dec 25 22:59 exe -> /usr/bin/mozilla*\n    dr-x------ 2 root root 0 Dec 25 22:59 fd/\n    -r--r--r-- 1 root root 0 Dec 25 22:59 maps\n    -rw------- 1 root root 0 Dec 25 22:59 mem\n    -r--r--r-- 1 root root 0 Dec 25 22:59 mounts\n    lrwxrwxrwx 1 root root 0 Dec 25 22:59 root -> //\n    -r--r--r-- 1 root root 0 Dec 25 22:59 stat\n    -r--r--r-- 1 root root 0 Dec 25 22:59 statm\n    -r--r--r-- 1 root root 0 Dec 25 22:59 status\n\n    文件\"cmdline\" 包含启动进程时调用的命令行。\"envir\" 进程的环境变两。\"status\" 是进程的状态信息，包括启动进程的用户的用户ID (UID) 和组ID(GID) ，父进程ID (PPID)，还有进程当前的状态，比如\"Sleelping\"和\"Running\"。每个进程的目录都有几个符号链接，\"cwd\"是指向进程当前工作目录的符号链接，\"exe\"指向运行的进程的可执行程序，\"root\"指向被这个进程看作是根目录的目录(通常是\"/\")。目录\"fd\"包含指向进程使用的文件描述符的链接。\"cpu\"仅在运行SMP 内核时出现，里面是按CPU 划分的进程时间。\n\n    /proc/self 是一个有趣的子目录，它使得程序可以方便地使用/proc 查找本进程地信息。/proc/self 是一个链接到/proc 中访问/proc 的进程所对应的PID 的目录的符号链接。\n\n    通过/proc 与内核交互\n\n    上面讨论的大部分/proc 的文件是只读的。而实际上/proc 文件系统通过/proc 中可读写的文件提供了对内核的交互机制。写这些文件可以改变内核的状态，因而要慎重改动这些文件。/proc/sys 目录存放所有可读写的文件的目录，可以被用于改变内核行为。\n\n    /proc/sys/kernel - 这个目录包含反通用内核行为的信息。/proc/sys/kernel/{domainname, hostname} 存放着机器/网络的域名和主机名。这些文件可以用于修改这些名字。\n\n    $ hostname\n    machinename.domainname.com\n\n    $ cat /proc/sys/kernel/domainname\n    domainname.com\n\n    $ cat /proc/sys/kernel/hostname\n    machinename\n\n    $ echo \"new-machinename\" > /proc/sys/kernel/hostname\n\n    $ hostname\n    new-machinename.domainname.com\n\n    这样，通过修改/proc 文件系统中的文件，我们可以修改主机名。很多其他可配置的文件存在于/proc/sys/kernel/。这里不可能列出所有这些文件，读者可以自己去这个目录查看以得到更多细节信息。\n    另一个可配置的目录是/proc/sys/net。这个目录中的文件可以用于修改机器/网络的网络属性。比如，简单修改一个文件，你可以在网络上瘾藏匿的计算机。\n\n    $ echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n    这将在网络上瘾藏你的机器，因为它不响应icmp_echo。主机将不会响应其他主机发出的ping 查询。\n\n    $ ping machinename.domainname.com\n    no answer from machinename.domainname.com\n\n    要改回缺省设置，只要\n\n    $ echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n    /proc/sys 下还有许多其它可以用于改变内核属性。读者可以通过参考文献[1], [2] 获取更多信息。\n\n    结论\n\n    /proc 文件系统提供了一个基于文件的Linux 内部接口。它可以用于确定系统的各种不同设备和进程的状态。对他们进行配置。因而，理解和应用有关这个文件系统的知识是理解你的Linux 系统的关键。\n\n    原文：http://www.sudu.cn/info/html/edu/20070101/292381.html\n\n    什么是proc文件系统\n    proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。它的目录结构如下：\n    目录名称 目录内容\n    apm 高级电源管理信息\n    cmdline 内核命令行\n    Cpuinfo 关于Cpu信息\n    Devices 可以用到的设备（块设备/字符设备）\n    Dma 使用的DMA通道\n    Filesystems 支持的文件系统\n    Interrupts 中断的使用\n    Ioports I/O端口的使用\n    Kcore 内核核心印象\n    Kmsg 内核消息\n    Ksyms 内核符号表\n    Loadavg 负载均衡\n    Locks 内核锁\n    Meminfo 内存信息\n    Misc 杂项\n    Modules 加载模块列表\n    Mounts 加载的文件系统\n    Partitions 系统识别的分区表\n    Rtc 实时时钟\n    Slabinfo Slab池信息\n    Stat 全面统计状态表\n    Swaps 对换空间的利用情况\n    Version 内核版本\n    Uptime 系统正常运行时间\n    并不是所有这些目录在你的系统中都有，这取决于你的内核配置和装载的模块。另外，在/proc下还有三个很重要的目录：net，scsi和sys。Sys目录是可写的，可以通过它来访问或修改内核的参数（见下一部分），而net和scsi则依赖于内核配置。例如，如果系统不支持scsi，则scsi 目录不存在。\n    除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的PID号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。Proc文件系统的名字就是由之而起。进程目录的结构如下：\n    目录名称 目录内容\n    Cmdline 命令行参数\n    Environ 环境变量值\n    Fd 一个包含所有文件描述符的目录\n    Mem 进程的内存被利用情况\n    Stat 进程状态\n    Status 进程当前状态，以可读的方式显示出来\n    Cwd 当前工作目录的链接\n    Exe 指向该进程的执行命令文件\n    Maps 内存映象\n    Statm 进程内存状态信息\n    Root 链接此进程的root目录\n    用户如果要查看系统信息，可以用cat命令。例如：\n    # cat /proc/interrupts\n    CPU0\n    0: 8728810 XT-PIC timer\n    1: 8Array5 XT-PIC keyboard\n    2: 0 XT-PIC cascade\n    3: 5316Array5 XT-PIC aha152x\n    4: 2014133 XT-PIC serial\n    5: 44401 XT-PIC pcnet_cs\n    8: 2 XT-PIC rtc\n    11: 8 XT-PIC i82365\n    12: 182Array18 XT-PIC Mouse\n    13: 1 XT-PIC fpu PS/2\n    14: 1232265 XT-PIC ide0\n    15: 7 XT-PIC ide1\n    NMI: 0\n    用户还可以实现修改内核参数。在/proc文件系统中有一个有趣的目录：/proc/sys。它不仅提供了内核信息，而且可以通过它修改内核参数，来优化你的系统。但是你必须很小心，因为可能会造成系统崩溃。最好是先找一台无关紧要的机子，调试成功后再应用到你的系统上。\n    要改变内核的参数，只要用vi编辑或echo参数重定向到文件中即可。下面有一个例子：\n    # cat /proc/sys/fs/file-max\n    40Array6\n    # echo 81Array2 > /proc/sys/fs/file-max\n    # cat /proc/sys/fs/file-max\n    81Array2\n    如果你优化了参数，则可以把它们写成添加到文件rc.local中，使它在系统启动时自动完成修改。\n    /proc文件系统中网络参数\n    /proc/sys/kernel\n    内核共享内存限制,默认最小为4M.两个参数可以改成一样.加大.\n    /proc/sys/kernel/shmall 40Array6\n    /proc/sys/kernel/shmmax 33554432\n\n    /proc/sys/net/ipv4/\n    该目录包含的是和tcp/ip协议相关的各种参数，下面我们就对这些网络参数加以详细的说明。\n    ip_forward 参数类型：BOOLEAN\n    0 - 关闭(默认值)\n    not 0 - 打开ip转发\n    在网络本地接口之间转发数据报。该参数非常特殊，对该参数的修改将导致其它所有相关配置参数恢复其默认值(对于主机参阅RFC1122，对于路由器参见RFC1812)\n    /proc/sys/net/ipv4/ip_conntrack_max 65440 (默认)\n    ip_default_ttl 参数类型：INTEGER\n    默认值为64 。表示IP数据报的Time To Live值。\n    ip_no_pmtu_disc 参数类型：BOOLEAN\n    关闭路径MTU探测，默认值为FALSE\n    ipfrag_high_thresh 参数类型：整型\n    用来组装分段的IP包的最大内存量。当ipfrag_high_thresh数量的内存被分配来用来组装IP包，则IP分片处理器将丢弃数据报直到ipfrag_low_thresh数量的内存被用来组装IP包。\n    ipfrag_low_thresh 参数类型：整型\n    参见ipfrag_high_thresh。\n    ipfrag_time 参数类型：整型\n    保存一个IP分片在内存中的时间。\n    inet_peer_threshold 参数类型：整型\n    INET对端存储器某个合适值，当超过该阀值条目将被丢弃。该阀值同样决定生存时间以及废物收集通过的时间间隔。条目越多?存活期越低?GC 间隔越短\n    inet_peer_minttl 参数类型：整型\n    条目的最低存活期。在重组端必须要有足够的碎片(fragment)存活期。这个最低存活期必须保证缓冲池容积是否少于inet_peer_threshold。该值以jiffies为单位测量。\n    inet_peer_maxttl 参数类型：整型\n    条目的最大存活期。在此期限到达之后?如果缓冲池没有耗尽压力的话(例如?缓冲池中的条目数目非常少)?不使用的条目将会超时。该值以jiffies为单位测量。\n    inet_peer_gc_mintime 参数类型：整型\n    废物收集(GC)通过的最短间隔。这个间隔会影响到缓冲池中内存的高压力。 该值以jiffies为单位测量。\n    inet_peer_gc_maxtime 参数类型：整型\n    废物收集(GC)通过的最大间隔，这个间隔会影响到缓冲池中内存的低压力。 该值以jiffies为单位测量。\n    tcp_syn_retries 参数类型：整型\n    对于一个新建连接，内核要发送多少个SYN 连接请求才决定放弃。不应该大于255，默认值是5，对应于180秒左右。\n    tcp_synack_retries 参数类型：整型\n    对于远端的连接请求SYN，内核会发送SYN ＋ACK数据报，以确认收到上一个SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的SYN+ACK 数目。\n    tcp_keepalive_time 参数类型：整型\n    当keepalive打开的情况下，TCP发送keepalive消息的频率，默认值是2个小时。\n    tcp_keepalive_probes 参数类型：整型\n    TCP发送keepalive探测以确定该连接已经断开的次数，默认值是Array。\n    tcp_keepalive_interval 参数类型：整型\n    探测消息发送的频率，乘以tcp_keepalive_probes就得到对于从开始探测以来没有响应的连接杀除的时间。默认值为75秒，也就是没有活动的连接将在大约11分钟以后将被丢弃。\n    tcp_retries1 参数类型：整型\n    当出现可疑情况而必须向网络层报告这个可疑状况之前?需要进行多少次重试。最低的RFC 数值是3 ?这也是默认值?根据RTO的值大约在3秒- 8分钟之间。\n    tcp_retries2 参数类型：整型\n    在丢弃激活的TCP连接之前?需要进行多少次重试。RFC1122规定，该值必须大于100秒。默认值为15，根据RTO的值来决定，相当于13-30分钟，\n    tcp_orphan_retries 参数类型：整型\n    在近端丢弃TCP连接之前?要进行多少次重试。默认值是7 个?相当于50秒- 16分钟?视RTO 而定。如果您的系统是负载很大的web服务器?那么也许需要降低该值?这类sockets 可能会耗费大量的资源。另外参的考tcp_max_orphans 。\n    tcp_fin_timeout 参数类型：整型\n    对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为60 秒。过去在2.2版本的内核中是180 秒。您可以设置该值?但需要注意?如果您的机器为负载很重的web服务器?您可能要冒内存被大量无效数据报填满的风险?FIN-WAIT-2 sockets 的危险性低于FIN-WAIT-1 ?因为它们最多只吃1.5K 的内存?但是它们存在时间更长。另外参考tcp_max_orphans。\n    tcp_max_tw_buckets 参数类型：整型\n    系统在同时所处理的最大timewait sockets 数目。如果超过此数的话?time-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要人为的降低这个限制?不过?如果网络条件需要比默认值更多?则可以提高它(或许还要增加内存)。\n    tcp_tw_recycle 参数类型：布尔\n    打开快速TIME-WAIT sockets 回收。默认值是1。除非得到技术专家的建议或要求?请不要随意修改这个值。\n    tcp_max_orphans 参数类型：整型\n    系统所能处理不属于任何进程的TCP sockets最大数量。假如超过这个数量?那么不属于任何进程的连接会被立即reset，并同时显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要依赖这个或是人为的降低这个限制\n    tcp_abort_on_overflow 参数类型：布尔\n    当守护进程太忙而不能接受新的连接，就象对方发送reset消息，默认值是false。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。\n    tcp_syncookies 参数类型：整型\n    只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击。默认值是false。\n    注意：该选项千万不能用于那些没有收到攻击的高负载服务器，如果在日志中出现synflood消息，但是调查发现没有收到synflood攻击，而是合法用户的连接负载过高的原因，你应该调整其它参数来提高服务器性能。参考: tcp_max_syn_backlog, tcp_synack_retries, tcp_abort_on_overflow.\n    syncookie严重的违背TCP协议，不允许使用TCP扩展，可能对某些服务导致严重的性能影响(如SMTP转发)。\n    tcp_stdurg 参数类型：整型\n    使用TCP urg pointer 字段中的主机请求解释功能。大部份的主机都使用老旧的BSD解释，因此如果您在Linux 打开它?或会导致不能和它们正确沟通。默认值为为?FALSE\n    tcp_max_syn_backlog 参数类型：整型\n    对于那些依然还未获得客户端确认的连接请求?需要保存在队列中最大数目。对于超过128Mb 内存的系统?默认值是1024 ?低于128Mb 的则为128。如果服务器经常出现过载?可以尝试增加这个数字。警告?假如您将此值设为大于1024?最好修改include/net/tcp.h 里面的TCP_SYNQ_HSIZE ?以保持TCP_SYNQ_HSIZE*16 0)或者bytes-bytes/2^(-tcp_adv_win_scale)(如果tcp_adv_win_scale  128Mb 32768-61000\n    0)则系统将忽略所有发送给自己的ICMP ECHO请求或那些广播地址的请求。\n    icmp_destunreach_rate - 整数\n    icmp_paramprob_rate - 整数\n    icmp_timeexceed_rate - 整数\n    icmp_echoreply_rate - 整数(not enabled per default)\n    限制发向特定目标的ICMP数据报的最大速率。0表示没有任何限制，否则表示jiffies数据单位中允许发送的个数。\n    icmp_ignore_bogus_error_responses - 布尔类型\n    某些路由器违背RFC1122标准，其对广播帧发送伪造的响应来应答。这种违背行为通常会被以告警的方式记录在系统日志中。如果该选项设置为True，内核不会记录这种警告信息。默认值为False。\n    (1) Jiffie: 内核使用的内部时间单位，在i386系统上大小为1/100s，在Alpha中为1/1024S。在/usr/include/asm/param.h中的HZ定义有特定系统的值。\n    conf/interface/*:\n    conf/all/*是特定的，用来修改所有接口的设置，is special and changes the settings for all interfaces.\n    Change special settings per interface.\n    log_martians - 布尔类型\n    记录带有不允许的地址的数据报到内核日志中。\n    accept_redirects - 布尔类型\n    收发接收ICMP重定向消息。对于主机来说默认为True，对于用作路由器时默认值为False。\n    forwarding - 布尔类型\n    在该接口打开转发功能\n    mc_forwarding - 布尔类型\n    是否进行多播路由。只有内核编译有CONFIG_MROUTE并且有路由服务程序在运行该参数才有效。\n    proxy_arp - 布尔类型\n    打开proxy arp功能。\n    shared_media - 布尔类型\n    发送(路由器)或接收(主机) RFC1620 共享媒体重定向。覆盖ip_secure_redirects的值。默认为True。\n    secure_redirects - 布尔类型\n    仅仅接收发给默认网关列表中网关的ICMP重定向消息，默认值是TRUE。\n    send_redirects - 布尔类型\n    如果是router，发送重定向消息，默认值是TRUE\n    bootp_relay - 布尔类型\n    接收源地址为0.b.c.d，目的地址不是本机的数据报。用来支持BOOTP转发服务进程，该进程将捕获并转发该包。默认为False，目前还没有实现。\n    accept_source_route - 布尔类型\n    接收带有SRR选项的数据报。对于主机来说默认为False，对于用作路由器时默认值为True。\n    rp_filter 参数类型\n    1 - 通过反向路径回溯进行源地址验证(在RFC1812中定义)。对于单穴主机和stub网络路由器推荐使用该选项。\n    0 - 不通过反向路径回溯进行源地址验证。\n    默认值为0。某些发布在启动时自动将其打开。\n    /proc/sys/net/ipv4/netfilter\n    ip_conntrack_buckets\n    ip_conntrack_count\n    ip_conntrack_generic_timeout\n    ip_conntrack_icmp_timeout\n    ip_conntrack_log_invalid\n    ip_conntrack_max 65536(默认)\n    ip_conntrack_tcp_be_liberal\n    ip_conntrack_tcp_loose\n    ip_conntrack_tcp_max_retrans\n    ip_conntrack_tcp_timeout_close\n    ip_conntrack_tcp_timeout_close_wait\n    ip_conntrack_tcp_timeout_established 432000(单位为秒,5天)\n    ip_conntrack_tcp_timeout_fin_wait\n    ip_conntrack_tcp_timeout_last_ack\n    ip_conntrack_tcp_timeout_max_retrans\n    ip_conntrack_tcp_timeout_syn_recv\n    ip_conntrack_tcp_timeout_syn_sent\n    ip_conntrack_tcp_timeout_time_wait\n    ip_conntrack_udp_timeout\n    ip_conntrack_udp_timeout_stream\n\n    #\n\n    #\n    #\n\n    Linux Linux Linux Linux 中/proc /proc /proc /proc 目录下文件详解\n    声明：可以自由转载本文, 但请务必保留本文的完整性。\n    作者：张子坚\n    email:zhangzijian@163.com\n    说明：本文所涉及示例均在fedora core3 下得到。\n    --------------------------------------------------------------------------------\n    /proc 文件系统下的多种文件提供的系统信息不是针对某个特定进程的, 而是能够在整个系统范围的上下文\n    中使用。可以使用的文件随系统配置的变化而变化。命令procinfo 能够显示基于其中某些文件的多种系统\n    信息。\n    以下详细描述/proc 下的文件:\n    --------------------------------------------------------------------------------\n    /proc/cmdline 文件\n    这个文件给出了内核启动的命令行。它和用于进程的cmdline 项非常相似。\n    示例：\n    [root@localhost proc]# cat cmdline\n    ro root=LABEL=/ rhgb quiet\n    --------------------------------------------------------------------------------\n    /proc/cpuinfo 文件\n    这个文件提供了有关系统CPU 的多种信息。这些信息是从内核里对CPU 的测试代码中得到的。文件列出\n    了CPU 的普通型号 （386,486,586,686 等 ）, 以及能得到的更多特定信息 （ 制造商, 型号和版本 ） 。 文件还包含\n    了以bogomips 表示的处理器速度, 而且如果检测到CPU 的多种特性或者bug, 文件还会包含相应的标志。这\n    个文件的格式为：文件由多行构成, 每行包括一个域名称, 一个冒号和一个值。\n    示例：\n    [root@localhost proc]# cat cpuinfo\n    processor : 0\n    vendor_id : AuthenticAMD\n    cpu family : 6\n    model : 8\n    model name : AMD Athlon(tm) XP 1800+\n    stepping : 1\n    cpu MHz : 1530.165\n    cache size : 256 KB\n    fdiv_bug : no\n    hlt_bug : no\n    f00f_bug : nocoma_bug : no\n    fpu : yes\n    fpu_exception : yes\n    cpuid level : 1\n    wp : yes\n    flags : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 mmx fxsr sse syscall mmxext\n    3dnowext 3dnow\n    bogomips : 2998.27\n    --------------------------------------------------------------------------------\n    /proc/devices 文件\n    这个文件列出字符和块设备的主设备号, 以及分配到这些设备号的设备名称。\n    示例：\n    [root@localhost /]# cat /proc/devices\n    Character devices:\n    1 mem\n    4 /dev/vc/0\n    4 tty\n    4 ttyS\n    5 /dev/tty\n    5 /dev/console\n    5 /dev/ptmx\n    6 lp\n    7 vcs\n    10 misc\n    13 input\n    14 sound\n    29 fb\n    36 netlink\n    116 alsa\n    128 ptm\n    136 pts\n    180 usb\n    Block devices:\n    1 ramdisk\n    2 fd\n    3 ide0\n    9 md\n    22 ide1\n    253 device-mapper\n    254 mdp\n    --------------------------------------------------------------------------------/proc/dma 文件\n    这个文件列出由驱动程序保留的DMA 通道和保留它们的驱动程序名称 。casade 项供用于把次DMA 控制器\n    从主控制器分出的DMA 行所使用; 这一行不能用于其它用途。\n    示例：\n    [root@localhost ~]# cat /proc/dma\n    4: cascade\n    --------------------------------------------------------------------------------\n    /proc/filesystems 文件\n    这个文件列出可供使用的文件系统类型, 一种类型一行 。 虽然它们通常是编入内核的文件系统类型, 但该文件\n    还可以包含可加载的内核模块加入的其它文件系统类型。\n    示例：\n    [root@localhost proc]# cat /proc/filesystems\n    nodev sysfs\n    nodev rootfs\n    nodev bdev\n    nodev proc\n    nodev sockfs\n    nodev binfmt_misc\n    nodev usbfs\n    nodev usbdevfs\n    nodev futexfs\n    nodev tmpfs\n    nodev pipefs\n    nodev eventpollfs\n    nodev devpts\n    ext2\n    nodev ramfs\n    nodev hugetlbfs\n    iso9660\n    nodev mqueue\n    nodev selinuxfs\n    ext3\n    nodev rpc_pipefs\n    nodev autofs\n    --------------------------------------------------------------------------------\n    /proc/interrupts 文件\n    这个文件的每一行都有一个保留的中断 。 每行中的域有 ： 中断号, 本行中断的发生次数, 可能带有一个加号的\n    域（SA_INTERRUPT 标志设置）, 以及登记这个中断的驱动程序的名字。可以在安装新硬件前, 像查看\n    /proc/dma 和/proc/ioports 一样用cat 命令手工查看手头的这个文件 。 这几个文件列出了当前投入使用的资源\n    （但是不包括那些没有加载驱动程序的硬件所使用的资源 ） 。\n    示例：\n    [root@localhost SPECS]# cat /proc/interruptsCPU0\n    0: 7039406 XT-PIC timer\n    1: 6533 XT-PIC i8042\n    2: 0 XT-PIC cascade\n    3: 0 XT-PIC uhci_hcd\n    5: 108 XT-PIC VIA8233, uhci_hcd\n    8: 1 XT-PIC rtc\n    9: 0 XT-PIC acpi\n    10: 0 XT-PIC ehci_hcd\n    11: 17412 XT-PIC uhci_hcd, eth0\n    12: 140314 XT-PIC i8042\n    14: 37897 XT-PIC ide0\n    15: 60813 XT-PIC ide1\n    NMI: 0\n    ERR: 1\n    --------------------------------------------------------------------------------\n    /proc/ioports 文件\n    这个文件列出了诸如磁盘驱动器, 以太网卡和声卡设备等多种设备驱动程序登记的许多I/O 端口范围。\n    示例：\n    [root@localhost SPECS]# cat /proc/ioports\n    0000-001f : dma1\n    0020-0021 : pic1\n    0040-0043 : timer0\n    0050-0053 : timer1\n    0060-006f : keyboard\n    0070-0077 : rtc\n    0080-008f : dma page reg\n    00a0-00a1 : pic2\n    00c0-00df : dma2\n    00f0-00ff : fpu\n    0170-0177 : ide1\n    01f0-01f7 : ide0\n    0376-0376 : ide1\n    0378-037a : parport0\n    037b-037f : parport0\n    03c0-03df : vga+\n    03f6-03f6 : ide0\n    03f8-03ff : serial\n    0800-0803 : PM1a_EVT_BLK\n    0804-0805 : PM1a_CNT_BLK\n    0808-080b : PM_TMR\n    0810-0815 : ACPI CPU throttle\n    0820-0823 : GPE0_BLK0cf8-0cff : PCI conf1\n    dc00-dcff : 0000:00:12.0\n    dc00-dcff : via-rhine\n    e000-e0ff : 0000:00:11.5\n    e000-e0ff : VIA8233\n    e400-e41f : 0000:00:10.0\n    e400-e41f : uhci_hcd\n    e800-e81f : 0000:00:10.1\n    e800-e81f : uhci_hcd\n    ec00-ec1f : 0000:00:10.2\n    ec00-ec1f : uhci_hcd\n    fc00-fc0f : 0000:00:11.1\n    fc00-fc07 : ide0\n    fc08-fc0f : ide1\n    --------------------------------------------------------------------------------\n    /proc/kcore 文件\n    这个文件是系统的物理内存以core 文件格式保存的文件。例如,GDB 能用它考察内核的数据结构。它不是\n    纯文本, 而是/proc 目录下为数不多的几个二进制格式的项之一。\n    示例：\n    暂无\n    --------------------------------------------------------------------------------\n    /proc/kmsg 文件\n    这个文件用于检索用printk 生成的内核消息。任何时刻只能有一个具有超级用户权限的进程可以读取这个\n    文件。也可以用系统调用syslog 检索这些消息。通常使用工具dmesg 或守护进程klogd 检索这些消息。\n    示例：\n    暂无\n    --------------------------------------------------------------------------------\n    /proc/ksyms 文件\n    这个文件列出了已经登记的内核符号; 这些符号给出了变量或函数的地址 。 每行给出一个符号的地址, 符号名\n    称以及登记这个符号的模块。程序ksyms,insmod 和kmod 使用这个文件。它还列出了正在运行的任务数,\n    总任务数和最后分配的PID 。\n    示例：\n    暂无\n    --------------------------------------------------------------------------------\n    /proc/loadavg 文件\n    这个文件给出以几个不同的时间间隔计算的系统平均负载, 这就如同uptime 命令显示的结果那样 。 前三个数\n    字是平均负载 。 这是通过计算过去1 分钟,5 分钟,15 分钟里运行队列中的平均任务数得到的 。 随后是正在运行\n    的任务数和总任务数。最后是上次使用的进程号。\n    示例：[root@localhost ~]# cat /proc/loadavg\n    0.11 0.16 0.14 3/126 3912\n    --------------------------------------------------------------------------------\n    /proc/locks 文件\n    这个文件包含在打开的文件上的加锁信息。文件中的每一行描述了特定文件和文档上的加锁信息以及对文\n    件施加的锁的类型。内核也可以需要时对文件施加强制性锁。\n    示例：\n    [root@localhost redhat]# cat /proc/locks\n    1: POSIX ADVISORY READ 3822 03:0a:1067117 0 EOF\n    2: POSIX ADVISORY READ 3822 03:0a:1067138 0 EOF\n    3: POSIX ADVISORY WRITE 3326 03:0a:2326540 0 EOF\n    4: POSIX ADVISORY WRITE 2639 03:0a:2966595 0 EOF\n    5: FLOCK ADVISORY WRITE 2591 03:0a:2966586 0 EOF\n    6: POSIX ADVISORY WRITE 2540 03:0a:2966578 0 EOF\n    7: POSIX ADVISORY WRITE 2530 03:0a:2966579 0 EOF\n    8: POSIX ADVISORY WRITE 2402 03:0a:2966563 0 EOF\n    9: POSIX ADVISORY WRITE 2371 03:0a:2966561 0 EOF\n    --------------------------------------------------------------------------------\n    /proc/mdstat 文件\n    这个文件包含了由md 设备驱动程序控制的RAID 设备信息。\n    示例：\n    [root@localhost ~]# cat /proc/mdstat\n    Personalities :\n    unused devices: <none>\n    --------------------------------------------------------------------------------\n    /proc/meminfo 文件\n    这个文件给出了内存状态的信息 。 它显示出系统中空闲内存, 已用物理内存和交换内存的总量 。 它还显示出\n    内核使用的共享内存和缓冲区总量。这些信息的格式和free 命令显示的结果类似。\n    示例：\n    [root@localhost ~]# cat /proc/meminfo\n    MemTotal: 223812 kB\n    MemFree: 3764 kB\n    Buffers: 9148 kB\n    Cached: 92112 kB\n    SwapCached: 364 kB\n    Active: 183640 kB\n    Inactive: 17196 kB\n    HighTotal: 0 kB\n    HighFree: 0 kB\n    LowTotal: 223812 kB\n    LowFree: 3764 kBSwapTotal: 626524 kB\n    SwapFree: 620328 kB\n    Dirty: 12 kB\n    Writeback: 0 kB\n    Mapped: 142880 kB\n    Slab: 12668 kB\n    Committed_AS: 376732 kB\n    PageTables: 2336 kB\n    VmallocTotal: 3907576 kB\n    VmallocUsed: 2968 kB\n    VmallocChunk: 3904224 kB\n    HugePages_Total: 0\n    HugePages_Free: 0\n    Hugepagesize: 4096 kB\n    --------------------------------------------------------------------------------\n    /proc/misc 文件\n    这个文件报告用内核函数misc_register 登记的设备驱动程序。\n    示例：\n    [root@localhost ~]# cat /proc/misc\n    63 device-mapper\n    175 agpgart\n    135 rtc\n    --------------------------------------------------------------------------------\n    /proc/modules 文件\n    这个文件给出可加载内核模块的信息 。lsmod 程序用这些信息显示有关模块的名称, 大小, 使用数目方面的信\n    息。\n    示例：\n    [root@localhost /]# cat /proc/modules\n    md5 4033 1 - Live 0x10a7f000\n    ipv6 232577 8 - Live 0x10b0c000\n    parport_pc 24705 1 - Live 0x10a8b000\n    lp 11565 0 - Live 0x10a7b000\n    parport 41737 2 parport_pc,lp, Live 0x10a55000\n    autofs4 24005 0 - Live 0x10a74000\n    i2c_dev 10433 0 - Live 0x109d2000\n    i2c_core 22081 1 i2c_dev, Live 0x10a6d000\n    sunrpc 160421 1 - Live 0x10a9d000\n    ipt_REJECT 6465 1 - Live 0x109da000\n    ipt_state 1857 5 - Live 0x109eb000\n    ip_conntrack 40693 1 ipt_state, Live 0x10a62000\n    iptable_filter 2753 1 - Live 0x10896000\n    ip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter, Live 0x109ed000dm_mod 54741 0 - Live 0x109f8000\n    button 6481 0 - Live 0x10905000\n    battery 8517 0 - Live 0x109d6000\n    ac 4805 0 - Live 0x10908000\n    uhci_hcd 31449 0 - Live 0x109dd000\n    ehci_hcd 31557 0 - Live 0x10949000\n    snd_via82xx 27237 2 - Live 0x10953000\n    snd_ac97_codec 64401 1 snd_via82xx, Live 0x10912000\n    snd_pcm_oss 47609 0 - Live 0x1093c000\n    snd_mixer_oss 17217 2 snd_pcm_oss, Live 0x1090c000\n    snd_pcm 97993 2 snd_via82xx,snd_pcm_oss, Live 0x10923000\n    snd_timer 29765 1 snd_pcm, Live 0x108ec000\n    snd_page_alloc 9673 2 snd_via82xx,snd_pcm, Live 0x108bd000\n    gameport 4801 1 snd_via82xx, Live 0x108a6000\n    snd_mpu401_uart 8769 1 snd_via82xx, Live 0x108b9000\n    snd_rawmidi 26725 1 snd_mpu401_uart, Live 0x108e4000\n    snd_seq_device 8137 1 snd_rawmidi, Live 0x1083b000\n    snd 54053 11\n    snd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\n    d_seq_device, Live 0x108f6000\n    soundcore 9889 2 snd, Live 0x1089b000\n    via_rhine 23497 0 - Live 0x1089f000\n    mii 4673 1 via_rhine, Live 0x10893000\n    floppy 58609 0 - Live 0x108a9000\n    ext3 116809 1 - Live 0x10875000\n    jbd 74969 1 ext3, Live 0x10861000\n    lsmod 命令显示结果如下：\n    [root@localhost /]# lsmod\n    Module Size Used by\n    md5 4033 1\n    ipv6 232577 8\n    parport_pc 24705 1\n    lp 11565 0\n    parport 41737 2 parport_pc,lp\n    autofs4 24005 0\n    i2c_dev 10433 0\n    i2c_core 22081 1 i2c_dev\n    sunrpc 160421 1\n    ipt_REJECT 6465 1\n    ipt_state 1857 5\n    ip_conntrack 40693 1 ipt_state\n    iptable_filter 2753 1ip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter\n    dm_mod 54741 0\n    button 6481 0\n    battery 8517 0\n    ac 4805 0\n    uhci_hcd 31449 0\n    ehci_hcd 31557 0\n    snd_via82xx 27237 2\n    snd_ac97_codec 64401 1 snd_via82xx\n    snd_pcm_oss 47609 0\n    snd_mixer_oss 17217 2 snd_pcm_oss\n    snd_pcm 97993 2 snd_via82xx,snd_pcm_oss\n    snd_timer 29765 1 snd_pcm\n    snd_page_alloc 9673 2 snd_via82xx,snd_pcm\n    gameport 4801 1 snd_via82xx\n    snd_mpu401_uart 8769 1 snd_via82xx\n    snd_rawmidi 26725 1 snd_mpu401_uart\n    snd_seq_device 8137 1 snd_rawmidi\n    snd 54053 11\n    snd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\n    d_seq_device\n    soundcore 9889 2 snd\n    via_rhine 23497 0\n    mii 4673 1 via_rhine\n    floppy 58609 0\n    ext3 116809 1\n    jbd 74969 1 ext3\n    --------------------------------------------------------------------------------\n    /proc/mounts 文件\n    这个文件以/etc/mtab 文件的格式给出当前系统所安装的文件系统信息。这个文件也能反映出任何手工安装\n    从而在/etc/mtab 文件中没有包含的文件系统。\n    示例：\n    [root@localhost /]# cat /proc/mounts\n    rootfs / rootfs rw 0 0\n    /proc /proc proc rw,nodiratime 0 0\n    none /dev tmpfs rw 0 0\n    /dev/root / ext3 rw 0 0\n    none /dev tmpfs rw 0 0\n    none /selinux selinuxfs rw 0 0\n    /proc /proc proc rw,nodiratime 0 0\n    /proc/bus/usb /proc/bus/usb usbfs rw 0 0\n    /sys /sys sysfs rw 0 0none /dev/pts devpts rw 0 0\n    none /dev/shm tmpfs rw 0 0\n    none /proc/sys/fs/binfmt_misc binfmt_misc rw 0 0\n    sunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw 0 0\n    --------------------------------------------------------------------------------\n    /proc/pci 文件\n    这个文件给出PCI 设备的信息。用它可以方便地诊断PCI 问题。你可以从这个文件中检索到的信息包括诸\n    如IDE 接口或USB 控制器这样的设备, 总线, 设备和功能编号, 设备延迟以及IRQ 编号。\n    示例：\n    [root@localhost /]# cat /proc/pci\n    PCI devices found:\n    Bus 0, device 0, function 0:\n    Class 0600: PCI device 1106:3116 (rev 0).\n    Master Capable. Latency=8.\n    Prefetchable 32 bit memory at 0xe0000000 [0xe7ffffff].\n    Bus 0, device 1, function 0:\n    Class 0604: PCI device 1106:b091 (rev 0).\n    Master Capable. No bursts. Min Gnt=12.\n    Bus 0, device 16, function 2:\n    Class 0c03: PCI device 1106:3038 (rev 12.\n    IRQ 5.\n    Master Capable. Latency=32.\n    I/O at 0xec00 [0xec1f].\n    Bus 0, device 16, function 1:\n    Class 0c03: PCI device 1106:3038 (rev 12.\n    IRQ 3.\n    Master Capable. Latency=32.\n    I/O at 0xe800 [0xe81f].\n    Bus 0, device 16, function 0:\n    Class 0c03: PCI device 1106:3038 (rev 12.\n    IRQ 11.\n    Master Capable. Latency=32.\n    I/O at 0xe400 [0xe41f].\n    Bus 0, device 16, function 3:\n    Class 0c03: PCI device 1106:3104 (rev 130).\n    IRQ 10.\n    Master Capable. Latency=32.\n    Non-prefetchable 32 bit memory at 0xdfffff00 [0xdfffffff].\n    Bus 0, device 17, function 0:\n    Class 0601: PCI device 1106:3177 (rev 0).\n    Bus 0, device 17, function 1:Class 0101: PCI device 1106:0571 (rev 6).\n    IRQ 255.\n    Master Capable. Latency=32.\n    I/O at 0xfc00 [0xfc0f].\n    Bus 0, device 17, function 5:\n    Class 0401: PCI device 1106:3059 (rev 80).\n    IRQ 5.\n    I/O at 0xe000 [0xe0ff].\n    Bus 0, device 18, function 0:\n    Class 0200: PCI device 1106:3065 (rev 116).\n    IRQ 11.\n    Master Capable. Latency=32\\. Min Gnt=3.Max Lat=8.\n    I/O at 0xdc00 [0xdcff].\n    Non-prefetchable 32 bit memory at 0xdffffe00 [0xdffffeff].\n    Bus 1, device 0, function 0:\n    Class 0300: PCI device 5333:8d04 (rev 0).\n    IRQ 11.\n    Master Capable. Latency=32\\. Min Gnt=4.Max Lat=255.\n    Non-prefetchable 32 bit memory at 0xdfe80000 [0xdfefffff].\n    Prefetchable 32 bit memory at 0xd0000000 [0xd7ffffff].\n    --------------------------------------------------------------------------------\n    /proc/stat 文件\n    这个文件包含的信息有CPU 利用率, 磁盘, 内存页, 内存对换, 全部中断, 接触开关以及赏赐自举时间（自1970\n    年1 月1 日起的秒数 ） 。\n    示例：\n    [root@localhost /]# cat /proc/stat\n    cpu 31994 3898 7161 381600 15254 451 0\n    cpu0 31994 3898 7161 381600 15254 451 0\n    intr 4615930 4404290 3364 0 0 12 0 7 0 2 0 0 12618 112114 0 44142 39381\n    ctxt 1310498\n    btime 1148891913\n    processes 4249\n    procs_running 4\n    procs_blocked 0\n    --------------------------------------------------------------------------------\n    /proc/uptime 文件\n    这个文件给出自从上次系统自举以来的秒数, 以及其中有多少秒处于空闲 。 这主要供uptime 程序使用 。 比较\n    这两个数字能够告诉你长期来看CPU 周期浪费的比例。\n    示例：\n    [root@localhost /]# cat /proc/uptime\n    4477.04 4021.10--------------------------------------------------------------------------------\n    /proc/version 文件\n    这个文件只有一行内容, 说明正在运行的内核版本。可以用标准的编程方法进行分析获得所需的系统信息 。\n    示例：\n    [root@localhost /]# cat /proc/version\n    Linux version 2.6.9-1.667 ( bhcompile@tweety.build.redhat.com ) (gcc version 3.4.2 20041017 (Red Hat\n    3.4.2-6.fc3)) #1 Tue Nov 2 14:41:25 EST 2004\n    --------------------------------------------------------------------------------\n    /proc/net 子目录\n    此目录下的文件描述或修改了联网代码的行为。可以通过使用 arp,netstat,route 和ipfwadm 命令设置或查询\n    这些特殊文件中的许多文件。\n    示例：\n    [root@localhost /]# ls /proc/net\n    anycast6 ip_conntrack mcfilter6 rt6_stats tcp\n    arp ip_conntrack_expect netlink rt_acct tcp6\n    dev ip_mr_cache netstat rt_cache udp\n    dev_mcast ip_mr_vif packet snmp udp6\n    dev_snmp6 ip_tables_matches psched snmp6 unix\n    if_inet6 ip_tables_names raw sockstat wireless\n    igmp ip_tables_targets raw6 sockstat6\n    igmp6 ipv6_route route softnet_stat\n    ip6_flowlabel mcfilter rpc stat\n    --------------------------------------------------------------------------------\n    以下摘要介绍此目录下文件的功能：\n    arp\n    转储每个网络接口的arp 表中dev 包的统计\n    dev\n    来自网络设备的统计\n    dev_mcast\n    列出二层（数据链路层）多播组\n    igmp\n    加入的IGMP 多播组\n    netlink\n    netlink 套接口的信息\n    netstat\n    网络流量的多种统计。第一行是信息头, 带有每个变量的名称。接下来的一行保存相应变量的值\n    raw\n    原始套接口的套接口表\n    route\n    静态路由表\n    rpc\n    包含RPC 信息的目录rt_cache\n    路由缓冲\n    snmp\n    snmp agent 的ip/icmp/tcp/udp 协议统计; 各行交替给出字段名和值\n    sockstat\n    列出使用的tcp/udp/raw/pac/syc_cookies 的数量\n    tcp\n    TCP 连接的套接口\n    udp\n    UDP 连接的套接口表\n    unix\n    UNIX 域套接口的套接口表\n    --------------------------------------------------------------------------------\n    示例：[root@localhost /]# cat /proc/net/route\n    Iface Destination Gateway Flags RefCnt Use Metric Mask MTU\n    Window IRTT\n    eth0 0035C2DA 00000000 0001 0 0 0 80FFFFF0\n    eth0 0000FEA9 00000000 0001 0 0 0 0000FFF0\n    eth0 00000000 0135C2DA 0003 0 0 0 00000000\n    --------------------------------------------------------------------------------\n    [root@localhost /]# cat /proc/net/tcp\n    sl local_address rem_address st tx_queue rx_queue tr tm->when retrnsmt uid timeout inode\n    0: 00000000:8000 00000000:0000 0A 00000000:00000000 00:00000000 00000000 29 0 9525 1\n    0dde7500 3000 0 0 2 -1\n    1: 00000000:006F 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 9484 1\n    0dde79e0 3000 0 0 2 -1\n    2: 0100007F:0277 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10049 1\n    0a8e3a00 3000 0 0 2 -1\n    3: 0100007F:14D7 00000000:0000 0A 00000000:00000000 00:00000000 00000000 99 0 9847 1\n    0dde7020 3000 0 0 2 -1\n    4: 0100007F:0019 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10286 1\n    0a8e3520 3000 0 0 2 -1\n    --------------------------------------------------------------------------------\n    [root@localhost /]# cat /proc/net/arp\n    IP address HW type Flags HW address Mask Device\n    218.194.53.1 0x1 0x2 00:0D:BC:78:07:3F * eth0\n    --------------------------------------------------------------------------------\n    [root@localhost /]# cat /proc/net/udp\n    sl local_address rem_address st tx_queue rx_queue tr tm->when retrnsmt uid timeout inode\n    0: 00000000:8000 00000000:0000 07 00000000:00000000 00:00000000 00000000 29 0 9520 2\n    0b4ef7c0\n    105: 00000000:14E9 00000000:0000 07 00000000:00000000 00:00000000 00000000 99 0 10284 20b4ef040\n    111: 00000000:006F 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9483 2\n    0b4efcc0\n    116: 00000000:02F4 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9511 2\n    0b4efa40\n    119: 00000000:0277 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 10050 2\n    0b4ef2c0\n    --------------------------------------------------------------------------------\n    /proc/scsi 子目录\n    此目录下包含一个列出了所有检测到的SCSI 设备的文件, 并且为每种控制器驱动程序提供一个目录, 在这个\n    目录下又为已安装的此种控制器的每个实例提供一个子目录。\n    示例：\n    由于本人的机器没有SCSI 设备, 顾暂时无法提供示例。\n    --------------------------------------------------------------------------------\n    /proc/sys 子目录\n    在此目录下有许多子目录 。 此目录中的许多项都可以用来调整系统的性能 。 这个目录包含信息太多, 无法介\n    绍全部。只在示例中展示目录下的一些文件。\n    示例：[root@localhost /]# ls /proc/sys\n    debug dev fs kernel net proc sunrpc vm\n    --------------------------------------------------------------------------------\n    [root@localhost ~]# ls /proc/sys/fs\n    aio-max-nr dentry-state file-nr lease-break-time overflowgid\n    aio-nr dir-notify-enable inode-nr leases-enable overflowuid\n    binfmt_misc file-max inode-state mqueue quota\n    --------------------------------------------------------------------------------\n    [root@localhost ~]# ls /proc/sys/kernel\n    acct hotplug panic sem\n    cad_pid modprobe panic_on_oops shmall\n    cap-bound msgmax pid_max shmmax\n    core_pattern msgmnb print-fatal-signals shmmni\n    core_uses_pid msgmni printk sysrq\n    ctrl-alt-del ngroups_max printk_ratelimit tainted\n    domainname osrelease printk_ratelimit_burst threads-max\n    exec-shield ostype pty vdso\n    exec-shield-randomize overflowgid random version\n    hostname overflowuid real-root-dev\n    --------------------------------------------------------------------------------\n    [root@localhost ~]# ls /proc/sys/net\n    core ethernet ipv4 ipv6 unix\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# ls /proc/sys/vmblock_dump laptop_mode nr_pdflush_threads\n    dirty_background_ratio legacy_va_layout overcommit_memory\n    dirty_expire_centisecs lower_zone_protection overcommit_ratio\n    dirty_ratio max_map_count page-cluster\n    dirty_writeback_centisecs min_free_kbytes swappiness\n    hugetlb_shm_group nr_hugepages vfs_cache_pressure\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# ls /proc/sys/net/ipv4\n    conf tcp_fack\n    icmp_echo_ignore_all tcp_fin_timeout\n    icmp_echo_ignore_broadcasts tcp_frto\n    icmp_ignore_bogus_error_responses tcp_keepalive_intvl\n    icmp_ratelimit tcp_keepalive_probes\n    icmp_ratemask tcp_keepalive_time\n    igmp_max_memberships tcp_low_latency\n    igmp_max_msf tcp_max_orphans\n    inet_peer_gc_maxtime tcp_max_syn_backlog\n    inet_peer_gc_mintime tcp_max_tw_buckets\n    inet_peer_maxttl tcp_mem\n    inet_peer_minttl tcp_moderate_rcvbuf\n    inet_peer_threshold tcp_no_metrics_save\n    ip_autoconfig tcp_orphan_retries\n    ip_conntrack_max tcp_reordering\n    ip_default_ttl tcp_retrans_collapse\n    ip_dynaddr tcp_retries1\n    ip_forward tcp_retries2\n    ipfrag_high_thresh tcp_rfc1337\n    ipfrag_low_thresh tcp_rmem\n    ipfrag_secret_interval tcp_sack\n    ipfrag_time tcp_stdurg\n    ip_local_port_range tcp_synack_retries\n    ip_nonlocal_bind tcp_syncookies\n    ip_no_pmtu_disc tcp_syn_retries\n    neigh tcp_timestamps\n    netfilter tcp_tso_win_divisor\n    route tcp_tw_recycle\n    tcp_abort_on_overflow tcp_tw_reuse\n    tcp_adv_win_scale tcp_vegas_alpha\n    tcp_app_win tcp_vegas_beta\n    tcp_bic tcp_vegas_cong_avoid\n    tcp_bic_fast_convergence tcp_vegas_gamma\n    tcp_bic_low_window tcp_westwood\n    tcp_dsack tcp_window_scalingtcp_ecn tcp_wmem\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# cat /proc/sys/kernel/shmall\n    2097152\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# cat /proc/sys/kernel/osrelease\n    2.6.9-1.667\n    --------------------------------------------------------------------------------\n    总结 ：/proc 文件系统包含了大量的有关当前系统状态的信息 。proc 的手册页中也有对这些文件的解释文档 。\n    把文件和分析这些文件的工具产生的输出进行比较能够更加清晰地了解这些文件\n","source":"_posts/old_post_wp/linux proc 目录.md","raw":"---\ntitle: linux proc目录学习（转）\ntags:\n  - linux\ncategories:\n  - Docs\ndate: 2015-11-29 18:26:00\npermalink: linux-proc-0\n---\n\n    Linux-proc\n\n    proc 文件系统\n\n    在Linux中有额外的机制可以为内核和内核模块将信息发送给进程-- /proc 文件系统。最初设计的目的是允许更方便的对进程信息进行访问（因此得名），现在它被每一个有有趣的东西报告的内核使用，例如/proc/modules 有模块的列表/proc/meminfo 有内存使用的统计表。\n<!--more-->\n\n    　　使用proc 文件系统的方法和使用设备驱动程序非常相似--创建一个/proc 文件需要的所有信息的结构，包括任何处理函数的指针（在我们的例子中只有一个，当某人试图从/proc 文件读时调用的那一个）。然后，init_module 在内核中登记该结构而cleanup_module 注销它。\n\n    　　我们使用proc_register_dynamic(这是在2.0 版中的情况，在2.2 版中如果我们将节点设置为0系统将自动为我们做到) 的原因是我们不想预先决定我们的文件的节点数字，而是为防止冲突而由内核决定它。通常的文件系统存在于磁盘上而不是内存中（/proc 在内存中），在这中情况下，节点数是是指向文件的索引节点所在的磁盘位置的指针。节点包含文件的信息（例如文件的存取权限）和指向磁盘位置或文件数据可以被找到的几个位置的指针。\n\n    　　因为当文件被打开或关闭的时候不能得到调用，所以在这个模块中没有地方放置MOD_INC_USE_COUNT 和MOD_DEC_USE_COUNT，并且，如果文件被打开随后模块被移除，我们没有办法避免后果。在下一章我们会看到一个艰难的但更灵活的可以处理/proc文件的实现方式，它也可以让我们防止那个问题。\n\n    http://www.2cto.com/os/201202/119552.html\n\n    Linux 内核提供了一种通过/proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。尽管在各种硬件平台上的Linux 系统的/proc 文件系统的基本概念都是相同的，但本文只讨论基于intel x86 架构的Linux /proc 文件系统。\n\n    _________________ _________________ _________________\n\n    /proc --- 一个虚拟文件系统\n\n    /proc 文件系统是一种内核和内核模块用来向进程(process) 发送信息的机制(所以叫做/proc)。这个伪文件系统让你可以和内核内部数据结构进行交互，获取 有关进程的有用信息，在运行中(on the fly) 改变设置(通过改变内核参数)。 与其他文件系统不同，/proc 存在于内存之中而不是硬盘上。如果你察看文件/proc/mounts (和mount 命令一样列出所有已经加载的文件系统)，你会看到其中 一行是这样的：\n\n    grep proc /proc/mounts\n    /proc /proc proc rw 0 0\n\n    /proc 由内核控制，没有承载/proc 的设备。因为/proc 主要存放由内核控制的状态信息，所以大部分这些信息的逻辑位置位于内核控制的内存。对/proc 进行一次'ls -l' 可以看到大部分文件都是0 字节大的；不过察看这些文件的时候，确实可以看到一些信息。这怎么可能？这是因为/proc 文件系统和其他常规的文件系统一样把自己注册到虚拟文件系统层(VFS) 了。然而，直到当VFS 调用它，请求文件、目录的i-node 的时候，/proc 文件系统才根据内核中的信息建立相应的文件和目录。\n\n    加载proc 文件系统\n\n    如果系统中还没有加载proc 文件系统，可以通过如下命令加载proc 文件系统：\n\n    mount -t proc proc /proc\n    上述命令将成功加载你的proc 文件系统。更多细节请阅读mount 命令的man page。\n\n    察看/proc 的文件\n\n    /proc 的文件可以用于访问有关内核的状态、计算机的属性、正在运行的进程的状态等信息。大部分/proc 中的文件和目录提供系统物理环境最新的信息。尽管/proc 中的文件是虚拟的，但它们仍可以使用任何文件编辑器或像'more', 'less'或'cat'这样的程序来查看。当编辑程序试图打开一个虚拟文件时，这个文件就通过内核中的信息被凭空地(on the fly) 创建了。这是一些我从我的系统中得到的一些有趣结果：\n\n    $ ls -l /proc/cpuinfo\n    -r--r--r-- 1 root root 0 Dec 25 11:01 /proc/cpuinfo\n\n    $ file /proc/cpuinfo\n    /proc/cpuinfo: empty\n\n    $ cat /proc/cpuinfo\n\n    processor : 0\n    vendor_id : GenuineIntel\n    cpu family : 6\n    model : 8\n    model name : Pentium III (Coppermine)\n    stepping : 6\n    cpu MHz : 1000.119\n    cache size : 256 KB\n    fdiv_bug : no\n    hlt_bug : no\n    sep_bug : no\n    f00f_bug : no\n    coma_bug : no\n    fpu : yes\n    fpu_exception : yes\n    cpuid level : 2\n    wp : yes\n    flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\n    cmov pat pse36 mmx fxsr xmm\n    bogomips : 1998.85\n\n    processor : 3\n    vendor_id : GenuineIntel\n    cpu family : 6\n    model : 8\n    model name : Pentium III (Coppermine)\n    stepping : 6\n    cpu MHz : 1000.119\n    cache size : 256 KB\n    fdiv_bug : no\n    hlt_bug : no\n    sep_bug : no\n    f00f_bug : no\n    coma_bug : no\n    fpu : yes\n    fpu_exception : yes\n    cpuid level : 2\n    wp : yes\n    flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\n    cmov pat pse36 mmx fxsr xmm\n    bogomips : 1992.29\n\n    这是一个从双CPU 的系统中得到的结果，上述大部分的信息十分清楚地给出了这个系统的有用的硬件信息。有些/proc 的文件是经过编码的，不同的工具可以被用来解释这些编码过的信息并输出成可读的形式。这样的工具包括：'top', 'ps', 'apm' 等。\n\n    得到有用的系统/内核信息\n\n    proc 文件系统可以被用于收集有用的关于系统和运行中的内核的信息。下面是一些重要的文件：\n\n    * /proc/cpuinfo - CPU 的信息(型号, 家族, 缓存大小等)\n    * /proc/meminfo - 物理内存、交换空间等的信息\n    * /proc/mounts - 已加载的文件系统的列表\n    * /proc/devices - 可用设备的列表\n    * /proc/filesystems - 被支持的文件系统\n    * /proc/modules - 已加载的模块\n    * /proc/version - 内核版本\n    * /proc/cmdline - 系统启动时输入的内核命令行参数\n\n    proc 中的文件远不止上面列出的这么多。想要进一步了解的读者可以对/proc 的每一个文件都'more'一下或读参考文献[1]获取更多的有关/proc 目录中的文件的信息。我建议使用'more'而不是'cat'，除非你知道这个文件很小，因为有些文件(比如kcore) 可能会非常长。\n\n    有关运行中的进程的信息\n\n    /proc 文件系统可以用于获取运行中的进程的信息。在/proc 中有一些编号的子目录。每个编号的目录对应一个进程id (PID)。这样，每一个运行中的进程/proc 中都有一个用它的PID 命名的目录。这些子目录中包含可以提供有关进程的状态和环境的重要细节信息的文件。让我们试着查找一个运行中的进程。\n\n    $ ps -aef | grep mozilla\n    root 32558 32425 8 22:53 pts/1 00:01:23 /usr/bin/mozilla\n\n    上述命令显示有一个正在运行的mozilla 进程的PID 是32558。相对应的，/proc 中应该有一个名叫32558 的目录\n\n    $ ls -l /proc/32558\n    total 0\n    -r--r--r-- 1 root root 0 Dec 25 22:59 cmdline\n    -r--r--r-- 1 root root 0 Dec 25 22:59 cpu\n    lrwxrwxrwx 1 root root 0 Dec 25 22:59 cwd -> /proc/\n    -r-------- 1 root root 0 Dec 25 22:59 environ\n    lrwxrwxrwx 1 root root 0 Dec 25 22:59 exe -> /usr/bin/mozilla*\n    dr-x------ 2 root root 0 Dec 25 22:59 fd/\n    -r--r--r-- 1 root root 0 Dec 25 22:59 maps\n    -rw------- 1 root root 0 Dec 25 22:59 mem\n    -r--r--r-- 1 root root 0 Dec 25 22:59 mounts\n    lrwxrwxrwx 1 root root 0 Dec 25 22:59 root -> //\n    -r--r--r-- 1 root root 0 Dec 25 22:59 stat\n    -r--r--r-- 1 root root 0 Dec 25 22:59 statm\n    -r--r--r-- 1 root root 0 Dec 25 22:59 status\n\n    文件\"cmdline\" 包含启动进程时调用的命令行。\"envir\" 进程的环境变两。\"status\" 是进程的状态信息，包括启动进程的用户的用户ID (UID) 和组ID(GID) ，父进程ID (PPID)，还有进程当前的状态，比如\"Sleelping\"和\"Running\"。每个进程的目录都有几个符号链接，\"cwd\"是指向进程当前工作目录的符号链接，\"exe\"指向运行的进程的可执行程序，\"root\"指向被这个进程看作是根目录的目录(通常是\"/\")。目录\"fd\"包含指向进程使用的文件描述符的链接。\"cpu\"仅在运行SMP 内核时出现，里面是按CPU 划分的进程时间。\n\n    /proc/self 是一个有趣的子目录，它使得程序可以方便地使用/proc 查找本进程地信息。/proc/self 是一个链接到/proc 中访问/proc 的进程所对应的PID 的目录的符号链接。\n\n    通过/proc 与内核交互\n\n    上面讨论的大部分/proc 的文件是只读的。而实际上/proc 文件系统通过/proc 中可读写的文件提供了对内核的交互机制。写这些文件可以改变内核的状态，因而要慎重改动这些文件。/proc/sys 目录存放所有可读写的文件的目录，可以被用于改变内核行为。\n\n    /proc/sys/kernel - 这个目录包含反通用内核行为的信息。/proc/sys/kernel/{domainname, hostname} 存放着机器/网络的域名和主机名。这些文件可以用于修改这些名字。\n\n    $ hostname\n    machinename.domainname.com\n\n    $ cat /proc/sys/kernel/domainname\n    domainname.com\n\n    $ cat /proc/sys/kernel/hostname\n    machinename\n\n    $ echo \"new-machinename\" > /proc/sys/kernel/hostname\n\n    $ hostname\n    new-machinename.domainname.com\n\n    这样，通过修改/proc 文件系统中的文件，我们可以修改主机名。很多其他可配置的文件存在于/proc/sys/kernel/。这里不可能列出所有这些文件，读者可以自己去这个目录查看以得到更多细节信息。\n    另一个可配置的目录是/proc/sys/net。这个目录中的文件可以用于修改机器/网络的网络属性。比如，简单修改一个文件，你可以在网络上瘾藏匿的计算机。\n\n    $ echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n    这将在网络上瘾藏你的机器，因为它不响应icmp_echo。主机将不会响应其他主机发出的ping 查询。\n\n    $ ping machinename.domainname.com\n    no answer from machinename.domainname.com\n\n    要改回缺省设置，只要\n\n    $ echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n    /proc/sys 下还有许多其它可以用于改变内核属性。读者可以通过参考文献[1], [2] 获取更多信息。\n\n    结论\n\n    /proc 文件系统提供了一个基于文件的Linux 内部接口。它可以用于确定系统的各种不同设备和进程的状态。对他们进行配置。因而，理解和应用有关这个文件系统的知识是理解你的Linux 系统的关键。\n\n    原文：http://www.sudu.cn/info/html/edu/20070101/292381.html\n\n    什么是proc文件系统\n    proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。它的目录结构如下：\n    目录名称 目录内容\n    apm 高级电源管理信息\n    cmdline 内核命令行\n    Cpuinfo 关于Cpu信息\n    Devices 可以用到的设备（块设备/字符设备）\n    Dma 使用的DMA通道\n    Filesystems 支持的文件系统\n    Interrupts 中断的使用\n    Ioports I/O端口的使用\n    Kcore 内核核心印象\n    Kmsg 内核消息\n    Ksyms 内核符号表\n    Loadavg 负载均衡\n    Locks 内核锁\n    Meminfo 内存信息\n    Misc 杂项\n    Modules 加载模块列表\n    Mounts 加载的文件系统\n    Partitions 系统识别的分区表\n    Rtc 实时时钟\n    Slabinfo Slab池信息\n    Stat 全面统计状态表\n    Swaps 对换空间的利用情况\n    Version 内核版本\n    Uptime 系统正常运行时间\n    并不是所有这些目录在你的系统中都有，这取决于你的内核配置和装载的模块。另外，在/proc下还有三个很重要的目录：net，scsi和sys。Sys目录是可写的，可以通过它来访问或修改内核的参数（见下一部分），而net和scsi则依赖于内核配置。例如，如果系统不支持scsi，则scsi 目录不存在。\n    除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的PID号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。Proc文件系统的名字就是由之而起。进程目录的结构如下：\n    目录名称 目录内容\n    Cmdline 命令行参数\n    Environ 环境变量值\n    Fd 一个包含所有文件描述符的目录\n    Mem 进程的内存被利用情况\n    Stat 进程状态\n    Status 进程当前状态，以可读的方式显示出来\n    Cwd 当前工作目录的链接\n    Exe 指向该进程的执行命令文件\n    Maps 内存映象\n    Statm 进程内存状态信息\n    Root 链接此进程的root目录\n    用户如果要查看系统信息，可以用cat命令。例如：\n    # cat /proc/interrupts\n    CPU0\n    0: 8728810 XT-PIC timer\n    1: 8Array5 XT-PIC keyboard\n    2: 0 XT-PIC cascade\n    3: 5316Array5 XT-PIC aha152x\n    4: 2014133 XT-PIC serial\n    5: 44401 XT-PIC pcnet_cs\n    8: 2 XT-PIC rtc\n    11: 8 XT-PIC i82365\n    12: 182Array18 XT-PIC Mouse\n    13: 1 XT-PIC fpu PS/2\n    14: 1232265 XT-PIC ide0\n    15: 7 XT-PIC ide1\n    NMI: 0\n    用户还可以实现修改内核参数。在/proc文件系统中有一个有趣的目录：/proc/sys。它不仅提供了内核信息，而且可以通过它修改内核参数，来优化你的系统。但是你必须很小心，因为可能会造成系统崩溃。最好是先找一台无关紧要的机子，调试成功后再应用到你的系统上。\n    要改变内核的参数，只要用vi编辑或echo参数重定向到文件中即可。下面有一个例子：\n    # cat /proc/sys/fs/file-max\n    40Array6\n    # echo 81Array2 > /proc/sys/fs/file-max\n    # cat /proc/sys/fs/file-max\n    81Array2\n    如果你优化了参数，则可以把它们写成添加到文件rc.local中，使它在系统启动时自动完成修改。\n    /proc文件系统中网络参数\n    /proc/sys/kernel\n    内核共享内存限制,默认最小为4M.两个参数可以改成一样.加大.\n    /proc/sys/kernel/shmall 40Array6\n    /proc/sys/kernel/shmmax 33554432\n\n    /proc/sys/net/ipv4/\n    该目录包含的是和tcp/ip协议相关的各种参数，下面我们就对这些网络参数加以详细的说明。\n    ip_forward 参数类型：BOOLEAN\n    0 - 关闭(默认值)\n    not 0 - 打开ip转发\n    在网络本地接口之间转发数据报。该参数非常特殊，对该参数的修改将导致其它所有相关配置参数恢复其默认值(对于主机参阅RFC1122，对于路由器参见RFC1812)\n    /proc/sys/net/ipv4/ip_conntrack_max 65440 (默认)\n    ip_default_ttl 参数类型：INTEGER\n    默认值为64 。表示IP数据报的Time To Live值。\n    ip_no_pmtu_disc 参数类型：BOOLEAN\n    关闭路径MTU探测，默认值为FALSE\n    ipfrag_high_thresh 参数类型：整型\n    用来组装分段的IP包的最大内存量。当ipfrag_high_thresh数量的内存被分配来用来组装IP包，则IP分片处理器将丢弃数据报直到ipfrag_low_thresh数量的内存被用来组装IP包。\n    ipfrag_low_thresh 参数类型：整型\n    参见ipfrag_high_thresh。\n    ipfrag_time 参数类型：整型\n    保存一个IP分片在内存中的时间。\n    inet_peer_threshold 参数类型：整型\n    INET对端存储器某个合适值，当超过该阀值条目将被丢弃。该阀值同样决定生存时间以及废物收集通过的时间间隔。条目越多?存活期越低?GC 间隔越短\n    inet_peer_minttl 参数类型：整型\n    条目的最低存活期。在重组端必须要有足够的碎片(fragment)存活期。这个最低存活期必须保证缓冲池容积是否少于inet_peer_threshold。该值以jiffies为单位测量。\n    inet_peer_maxttl 参数类型：整型\n    条目的最大存活期。在此期限到达之后?如果缓冲池没有耗尽压力的话(例如?缓冲池中的条目数目非常少)?不使用的条目将会超时。该值以jiffies为单位测量。\n    inet_peer_gc_mintime 参数类型：整型\n    废物收集(GC)通过的最短间隔。这个间隔会影响到缓冲池中内存的高压力。 该值以jiffies为单位测量。\n    inet_peer_gc_maxtime 参数类型：整型\n    废物收集(GC)通过的最大间隔，这个间隔会影响到缓冲池中内存的低压力。 该值以jiffies为单位测量。\n    tcp_syn_retries 参数类型：整型\n    对于一个新建连接，内核要发送多少个SYN 连接请求才决定放弃。不应该大于255，默认值是5，对应于180秒左右。\n    tcp_synack_retries 参数类型：整型\n    对于远端的连接请求SYN，内核会发送SYN ＋ACK数据报，以确认收到上一个SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的SYN+ACK 数目。\n    tcp_keepalive_time 参数类型：整型\n    当keepalive打开的情况下，TCP发送keepalive消息的频率，默认值是2个小时。\n    tcp_keepalive_probes 参数类型：整型\n    TCP发送keepalive探测以确定该连接已经断开的次数，默认值是Array。\n    tcp_keepalive_interval 参数类型：整型\n    探测消息发送的频率，乘以tcp_keepalive_probes就得到对于从开始探测以来没有响应的连接杀除的时间。默认值为75秒，也就是没有活动的连接将在大约11分钟以后将被丢弃。\n    tcp_retries1 参数类型：整型\n    当出现可疑情况而必须向网络层报告这个可疑状况之前?需要进行多少次重试。最低的RFC 数值是3 ?这也是默认值?根据RTO的值大约在3秒- 8分钟之间。\n    tcp_retries2 参数类型：整型\n    在丢弃激活的TCP连接之前?需要进行多少次重试。RFC1122规定，该值必须大于100秒。默认值为15，根据RTO的值来决定，相当于13-30分钟，\n    tcp_orphan_retries 参数类型：整型\n    在近端丢弃TCP连接之前?要进行多少次重试。默认值是7 个?相当于50秒- 16分钟?视RTO 而定。如果您的系统是负载很大的web服务器?那么也许需要降低该值?这类sockets 可能会耗费大量的资源。另外参的考tcp_max_orphans 。\n    tcp_fin_timeout 参数类型：整型\n    对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为60 秒。过去在2.2版本的内核中是180 秒。您可以设置该值?但需要注意?如果您的机器为负载很重的web服务器?您可能要冒内存被大量无效数据报填满的风险?FIN-WAIT-2 sockets 的危险性低于FIN-WAIT-1 ?因为它们最多只吃1.5K 的内存?但是它们存在时间更长。另外参考tcp_max_orphans。\n    tcp_max_tw_buckets 参数类型：整型\n    系统在同时所处理的最大timewait sockets 数目。如果超过此数的话?time-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要人为的降低这个限制?不过?如果网络条件需要比默认值更多?则可以提高它(或许还要增加内存)。\n    tcp_tw_recycle 参数类型：布尔\n    打开快速TIME-WAIT sockets 回收。默认值是1。除非得到技术专家的建议或要求?请不要随意修改这个值。\n    tcp_max_orphans 参数类型：整型\n    系统所能处理不属于任何进程的TCP sockets最大数量。假如超过这个数量?那么不属于任何进程的连接会被立即reset，并同时显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要依赖这个或是人为的降低这个限制\n    tcp_abort_on_overflow 参数类型：布尔\n    当守护进程太忙而不能接受新的连接，就象对方发送reset消息，默认值是false。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。\n    tcp_syncookies 参数类型：整型\n    只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击。默认值是false。\n    注意：该选项千万不能用于那些没有收到攻击的高负载服务器，如果在日志中出现synflood消息，但是调查发现没有收到synflood攻击，而是合法用户的连接负载过高的原因，你应该调整其它参数来提高服务器性能。参考: tcp_max_syn_backlog, tcp_synack_retries, tcp_abort_on_overflow.\n    syncookie严重的违背TCP协议，不允许使用TCP扩展，可能对某些服务导致严重的性能影响(如SMTP转发)。\n    tcp_stdurg 参数类型：整型\n    使用TCP urg pointer 字段中的主机请求解释功能。大部份的主机都使用老旧的BSD解释，因此如果您在Linux 打开它?或会导致不能和它们正确沟通。默认值为为?FALSE\n    tcp_max_syn_backlog 参数类型：整型\n    对于那些依然还未获得客户端确认的连接请求?需要保存在队列中最大数目。对于超过128Mb 内存的系统?默认值是1024 ?低于128Mb 的则为128。如果服务器经常出现过载?可以尝试增加这个数字。警告?假如您将此值设为大于1024?最好修改include/net/tcp.h 里面的TCP_SYNQ_HSIZE ?以保持TCP_SYNQ_HSIZE*16 0)或者bytes-bytes/2^(-tcp_adv_win_scale)(如果tcp_adv_win_scale  128Mb 32768-61000\n    0)则系统将忽略所有发送给自己的ICMP ECHO请求或那些广播地址的请求。\n    icmp_destunreach_rate - 整数\n    icmp_paramprob_rate - 整数\n    icmp_timeexceed_rate - 整数\n    icmp_echoreply_rate - 整数(not enabled per default)\n    限制发向特定目标的ICMP数据报的最大速率。0表示没有任何限制，否则表示jiffies数据单位中允许发送的个数。\n    icmp_ignore_bogus_error_responses - 布尔类型\n    某些路由器违背RFC1122标准，其对广播帧发送伪造的响应来应答。这种违背行为通常会被以告警的方式记录在系统日志中。如果该选项设置为True，内核不会记录这种警告信息。默认值为False。\n    (1) Jiffie: 内核使用的内部时间单位，在i386系统上大小为1/100s，在Alpha中为1/1024S。在/usr/include/asm/param.h中的HZ定义有特定系统的值。\n    conf/interface/*:\n    conf/all/*是特定的，用来修改所有接口的设置，is special and changes the settings for all interfaces.\n    Change special settings per interface.\n    log_martians - 布尔类型\n    记录带有不允许的地址的数据报到内核日志中。\n    accept_redirects - 布尔类型\n    收发接收ICMP重定向消息。对于主机来说默认为True，对于用作路由器时默认值为False。\n    forwarding - 布尔类型\n    在该接口打开转发功能\n    mc_forwarding - 布尔类型\n    是否进行多播路由。只有内核编译有CONFIG_MROUTE并且有路由服务程序在运行该参数才有效。\n    proxy_arp - 布尔类型\n    打开proxy arp功能。\n    shared_media - 布尔类型\n    发送(路由器)或接收(主机) RFC1620 共享媒体重定向。覆盖ip_secure_redirects的值。默认为True。\n    secure_redirects - 布尔类型\n    仅仅接收发给默认网关列表中网关的ICMP重定向消息，默认值是TRUE。\n    send_redirects - 布尔类型\n    如果是router，发送重定向消息，默认值是TRUE\n    bootp_relay - 布尔类型\n    接收源地址为0.b.c.d，目的地址不是本机的数据报。用来支持BOOTP转发服务进程，该进程将捕获并转发该包。默认为False，目前还没有实现。\n    accept_source_route - 布尔类型\n    接收带有SRR选项的数据报。对于主机来说默认为False，对于用作路由器时默认值为True。\n    rp_filter 参数类型\n    1 - 通过反向路径回溯进行源地址验证(在RFC1812中定义)。对于单穴主机和stub网络路由器推荐使用该选项。\n    0 - 不通过反向路径回溯进行源地址验证。\n    默认值为0。某些发布在启动时自动将其打开。\n    /proc/sys/net/ipv4/netfilter\n    ip_conntrack_buckets\n    ip_conntrack_count\n    ip_conntrack_generic_timeout\n    ip_conntrack_icmp_timeout\n    ip_conntrack_log_invalid\n    ip_conntrack_max 65536(默认)\n    ip_conntrack_tcp_be_liberal\n    ip_conntrack_tcp_loose\n    ip_conntrack_tcp_max_retrans\n    ip_conntrack_tcp_timeout_close\n    ip_conntrack_tcp_timeout_close_wait\n    ip_conntrack_tcp_timeout_established 432000(单位为秒,5天)\n    ip_conntrack_tcp_timeout_fin_wait\n    ip_conntrack_tcp_timeout_last_ack\n    ip_conntrack_tcp_timeout_max_retrans\n    ip_conntrack_tcp_timeout_syn_recv\n    ip_conntrack_tcp_timeout_syn_sent\n    ip_conntrack_tcp_timeout_time_wait\n    ip_conntrack_udp_timeout\n    ip_conntrack_udp_timeout_stream\n\n    #\n\n    #\n    #\n\n    Linux Linux Linux Linux 中/proc /proc /proc /proc 目录下文件详解\n    声明：可以自由转载本文, 但请务必保留本文的完整性。\n    作者：张子坚\n    email:zhangzijian@163.com\n    说明：本文所涉及示例均在fedora core3 下得到。\n    --------------------------------------------------------------------------------\n    /proc 文件系统下的多种文件提供的系统信息不是针对某个特定进程的, 而是能够在整个系统范围的上下文\n    中使用。可以使用的文件随系统配置的变化而变化。命令procinfo 能够显示基于其中某些文件的多种系统\n    信息。\n    以下详细描述/proc 下的文件:\n    --------------------------------------------------------------------------------\n    /proc/cmdline 文件\n    这个文件给出了内核启动的命令行。它和用于进程的cmdline 项非常相似。\n    示例：\n    [root@localhost proc]# cat cmdline\n    ro root=LABEL=/ rhgb quiet\n    --------------------------------------------------------------------------------\n    /proc/cpuinfo 文件\n    这个文件提供了有关系统CPU 的多种信息。这些信息是从内核里对CPU 的测试代码中得到的。文件列出\n    了CPU 的普通型号 （386,486,586,686 等 ）, 以及能得到的更多特定信息 （ 制造商, 型号和版本 ） 。 文件还包含\n    了以bogomips 表示的处理器速度, 而且如果检测到CPU 的多种特性或者bug, 文件还会包含相应的标志。这\n    个文件的格式为：文件由多行构成, 每行包括一个域名称, 一个冒号和一个值。\n    示例：\n    [root@localhost proc]# cat cpuinfo\n    processor : 0\n    vendor_id : AuthenticAMD\n    cpu family : 6\n    model : 8\n    model name : AMD Athlon(tm) XP 1800+\n    stepping : 1\n    cpu MHz : 1530.165\n    cache size : 256 KB\n    fdiv_bug : no\n    hlt_bug : no\n    f00f_bug : nocoma_bug : no\n    fpu : yes\n    fpu_exception : yes\n    cpuid level : 1\n    wp : yes\n    flags : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 mmx fxsr sse syscall mmxext\n    3dnowext 3dnow\n    bogomips : 2998.27\n    --------------------------------------------------------------------------------\n    /proc/devices 文件\n    这个文件列出字符和块设备的主设备号, 以及分配到这些设备号的设备名称。\n    示例：\n    [root@localhost /]# cat /proc/devices\n    Character devices:\n    1 mem\n    4 /dev/vc/0\n    4 tty\n    4 ttyS\n    5 /dev/tty\n    5 /dev/console\n    5 /dev/ptmx\n    6 lp\n    7 vcs\n    10 misc\n    13 input\n    14 sound\n    29 fb\n    36 netlink\n    116 alsa\n    128 ptm\n    136 pts\n    180 usb\n    Block devices:\n    1 ramdisk\n    2 fd\n    3 ide0\n    9 md\n    22 ide1\n    253 device-mapper\n    254 mdp\n    --------------------------------------------------------------------------------/proc/dma 文件\n    这个文件列出由驱动程序保留的DMA 通道和保留它们的驱动程序名称 。casade 项供用于把次DMA 控制器\n    从主控制器分出的DMA 行所使用; 这一行不能用于其它用途。\n    示例：\n    [root@localhost ~]# cat /proc/dma\n    4: cascade\n    --------------------------------------------------------------------------------\n    /proc/filesystems 文件\n    这个文件列出可供使用的文件系统类型, 一种类型一行 。 虽然它们通常是编入内核的文件系统类型, 但该文件\n    还可以包含可加载的内核模块加入的其它文件系统类型。\n    示例：\n    [root@localhost proc]# cat /proc/filesystems\n    nodev sysfs\n    nodev rootfs\n    nodev bdev\n    nodev proc\n    nodev sockfs\n    nodev binfmt_misc\n    nodev usbfs\n    nodev usbdevfs\n    nodev futexfs\n    nodev tmpfs\n    nodev pipefs\n    nodev eventpollfs\n    nodev devpts\n    ext2\n    nodev ramfs\n    nodev hugetlbfs\n    iso9660\n    nodev mqueue\n    nodev selinuxfs\n    ext3\n    nodev rpc_pipefs\n    nodev autofs\n    --------------------------------------------------------------------------------\n    /proc/interrupts 文件\n    这个文件的每一行都有一个保留的中断 。 每行中的域有 ： 中断号, 本行中断的发生次数, 可能带有一个加号的\n    域（SA_INTERRUPT 标志设置）, 以及登记这个中断的驱动程序的名字。可以在安装新硬件前, 像查看\n    /proc/dma 和/proc/ioports 一样用cat 命令手工查看手头的这个文件 。 这几个文件列出了当前投入使用的资源\n    （但是不包括那些没有加载驱动程序的硬件所使用的资源 ） 。\n    示例：\n    [root@localhost SPECS]# cat /proc/interruptsCPU0\n    0: 7039406 XT-PIC timer\n    1: 6533 XT-PIC i8042\n    2: 0 XT-PIC cascade\n    3: 0 XT-PIC uhci_hcd\n    5: 108 XT-PIC VIA8233, uhci_hcd\n    8: 1 XT-PIC rtc\n    9: 0 XT-PIC acpi\n    10: 0 XT-PIC ehci_hcd\n    11: 17412 XT-PIC uhci_hcd, eth0\n    12: 140314 XT-PIC i8042\n    14: 37897 XT-PIC ide0\n    15: 60813 XT-PIC ide1\n    NMI: 0\n    ERR: 1\n    --------------------------------------------------------------------------------\n    /proc/ioports 文件\n    这个文件列出了诸如磁盘驱动器, 以太网卡和声卡设备等多种设备驱动程序登记的许多I/O 端口范围。\n    示例：\n    [root@localhost SPECS]# cat /proc/ioports\n    0000-001f : dma1\n    0020-0021 : pic1\n    0040-0043 : timer0\n    0050-0053 : timer1\n    0060-006f : keyboard\n    0070-0077 : rtc\n    0080-008f : dma page reg\n    00a0-00a1 : pic2\n    00c0-00df : dma2\n    00f0-00ff : fpu\n    0170-0177 : ide1\n    01f0-01f7 : ide0\n    0376-0376 : ide1\n    0378-037a : parport0\n    037b-037f : parport0\n    03c0-03df : vga+\n    03f6-03f6 : ide0\n    03f8-03ff : serial\n    0800-0803 : PM1a_EVT_BLK\n    0804-0805 : PM1a_CNT_BLK\n    0808-080b : PM_TMR\n    0810-0815 : ACPI CPU throttle\n    0820-0823 : GPE0_BLK0cf8-0cff : PCI conf1\n    dc00-dcff : 0000:00:12.0\n    dc00-dcff : via-rhine\n    e000-e0ff : 0000:00:11.5\n    e000-e0ff : VIA8233\n    e400-e41f : 0000:00:10.0\n    e400-e41f : uhci_hcd\n    e800-e81f : 0000:00:10.1\n    e800-e81f : uhci_hcd\n    ec00-ec1f : 0000:00:10.2\n    ec00-ec1f : uhci_hcd\n    fc00-fc0f : 0000:00:11.1\n    fc00-fc07 : ide0\n    fc08-fc0f : ide1\n    --------------------------------------------------------------------------------\n    /proc/kcore 文件\n    这个文件是系统的物理内存以core 文件格式保存的文件。例如,GDB 能用它考察内核的数据结构。它不是\n    纯文本, 而是/proc 目录下为数不多的几个二进制格式的项之一。\n    示例：\n    暂无\n    --------------------------------------------------------------------------------\n    /proc/kmsg 文件\n    这个文件用于检索用printk 生成的内核消息。任何时刻只能有一个具有超级用户权限的进程可以读取这个\n    文件。也可以用系统调用syslog 检索这些消息。通常使用工具dmesg 或守护进程klogd 检索这些消息。\n    示例：\n    暂无\n    --------------------------------------------------------------------------------\n    /proc/ksyms 文件\n    这个文件列出了已经登记的内核符号; 这些符号给出了变量或函数的地址 。 每行给出一个符号的地址, 符号名\n    称以及登记这个符号的模块。程序ksyms,insmod 和kmod 使用这个文件。它还列出了正在运行的任务数,\n    总任务数和最后分配的PID 。\n    示例：\n    暂无\n    --------------------------------------------------------------------------------\n    /proc/loadavg 文件\n    这个文件给出以几个不同的时间间隔计算的系统平均负载, 这就如同uptime 命令显示的结果那样 。 前三个数\n    字是平均负载 。 这是通过计算过去1 分钟,5 分钟,15 分钟里运行队列中的平均任务数得到的 。 随后是正在运行\n    的任务数和总任务数。最后是上次使用的进程号。\n    示例：[root@localhost ~]# cat /proc/loadavg\n    0.11 0.16 0.14 3/126 3912\n    --------------------------------------------------------------------------------\n    /proc/locks 文件\n    这个文件包含在打开的文件上的加锁信息。文件中的每一行描述了特定文件和文档上的加锁信息以及对文\n    件施加的锁的类型。内核也可以需要时对文件施加强制性锁。\n    示例：\n    [root@localhost redhat]# cat /proc/locks\n    1: POSIX ADVISORY READ 3822 03:0a:1067117 0 EOF\n    2: POSIX ADVISORY READ 3822 03:0a:1067138 0 EOF\n    3: POSIX ADVISORY WRITE 3326 03:0a:2326540 0 EOF\n    4: POSIX ADVISORY WRITE 2639 03:0a:2966595 0 EOF\n    5: FLOCK ADVISORY WRITE 2591 03:0a:2966586 0 EOF\n    6: POSIX ADVISORY WRITE 2540 03:0a:2966578 0 EOF\n    7: POSIX ADVISORY WRITE 2530 03:0a:2966579 0 EOF\n    8: POSIX ADVISORY WRITE 2402 03:0a:2966563 0 EOF\n    9: POSIX ADVISORY WRITE 2371 03:0a:2966561 0 EOF\n    --------------------------------------------------------------------------------\n    /proc/mdstat 文件\n    这个文件包含了由md 设备驱动程序控制的RAID 设备信息。\n    示例：\n    [root@localhost ~]# cat /proc/mdstat\n    Personalities :\n    unused devices: <none>\n    --------------------------------------------------------------------------------\n    /proc/meminfo 文件\n    这个文件给出了内存状态的信息 。 它显示出系统中空闲内存, 已用物理内存和交换内存的总量 。 它还显示出\n    内核使用的共享内存和缓冲区总量。这些信息的格式和free 命令显示的结果类似。\n    示例：\n    [root@localhost ~]# cat /proc/meminfo\n    MemTotal: 223812 kB\n    MemFree: 3764 kB\n    Buffers: 9148 kB\n    Cached: 92112 kB\n    SwapCached: 364 kB\n    Active: 183640 kB\n    Inactive: 17196 kB\n    HighTotal: 0 kB\n    HighFree: 0 kB\n    LowTotal: 223812 kB\n    LowFree: 3764 kBSwapTotal: 626524 kB\n    SwapFree: 620328 kB\n    Dirty: 12 kB\n    Writeback: 0 kB\n    Mapped: 142880 kB\n    Slab: 12668 kB\n    Committed_AS: 376732 kB\n    PageTables: 2336 kB\n    VmallocTotal: 3907576 kB\n    VmallocUsed: 2968 kB\n    VmallocChunk: 3904224 kB\n    HugePages_Total: 0\n    HugePages_Free: 0\n    Hugepagesize: 4096 kB\n    --------------------------------------------------------------------------------\n    /proc/misc 文件\n    这个文件报告用内核函数misc_register 登记的设备驱动程序。\n    示例：\n    [root@localhost ~]# cat /proc/misc\n    63 device-mapper\n    175 agpgart\n    135 rtc\n    --------------------------------------------------------------------------------\n    /proc/modules 文件\n    这个文件给出可加载内核模块的信息 。lsmod 程序用这些信息显示有关模块的名称, 大小, 使用数目方面的信\n    息。\n    示例：\n    [root@localhost /]# cat /proc/modules\n    md5 4033 1 - Live 0x10a7f000\n    ipv6 232577 8 - Live 0x10b0c000\n    parport_pc 24705 1 - Live 0x10a8b000\n    lp 11565 0 - Live 0x10a7b000\n    parport 41737 2 parport_pc,lp, Live 0x10a55000\n    autofs4 24005 0 - Live 0x10a74000\n    i2c_dev 10433 0 - Live 0x109d2000\n    i2c_core 22081 1 i2c_dev, Live 0x10a6d000\n    sunrpc 160421 1 - Live 0x10a9d000\n    ipt_REJECT 6465 1 - Live 0x109da000\n    ipt_state 1857 5 - Live 0x109eb000\n    ip_conntrack 40693 1 ipt_state, Live 0x10a62000\n    iptable_filter 2753 1 - Live 0x10896000\n    ip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter, Live 0x109ed000dm_mod 54741 0 - Live 0x109f8000\n    button 6481 0 - Live 0x10905000\n    battery 8517 0 - Live 0x109d6000\n    ac 4805 0 - Live 0x10908000\n    uhci_hcd 31449 0 - Live 0x109dd000\n    ehci_hcd 31557 0 - Live 0x10949000\n    snd_via82xx 27237 2 - Live 0x10953000\n    snd_ac97_codec 64401 1 snd_via82xx, Live 0x10912000\n    snd_pcm_oss 47609 0 - Live 0x1093c000\n    snd_mixer_oss 17217 2 snd_pcm_oss, Live 0x1090c000\n    snd_pcm 97993 2 snd_via82xx,snd_pcm_oss, Live 0x10923000\n    snd_timer 29765 1 snd_pcm, Live 0x108ec000\n    snd_page_alloc 9673 2 snd_via82xx,snd_pcm, Live 0x108bd000\n    gameport 4801 1 snd_via82xx, Live 0x108a6000\n    snd_mpu401_uart 8769 1 snd_via82xx, Live 0x108b9000\n    snd_rawmidi 26725 1 snd_mpu401_uart, Live 0x108e4000\n    snd_seq_device 8137 1 snd_rawmidi, Live 0x1083b000\n    snd 54053 11\n    snd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\n    d_seq_device, Live 0x108f6000\n    soundcore 9889 2 snd, Live 0x1089b000\n    via_rhine 23497 0 - Live 0x1089f000\n    mii 4673 1 via_rhine, Live 0x10893000\n    floppy 58609 0 - Live 0x108a9000\n    ext3 116809 1 - Live 0x10875000\n    jbd 74969 1 ext3, Live 0x10861000\n    lsmod 命令显示结果如下：\n    [root@localhost /]# lsmod\n    Module Size Used by\n    md5 4033 1\n    ipv6 232577 8\n    parport_pc 24705 1\n    lp 11565 0\n    parport 41737 2 parport_pc,lp\n    autofs4 24005 0\n    i2c_dev 10433 0\n    i2c_core 22081 1 i2c_dev\n    sunrpc 160421 1\n    ipt_REJECT 6465 1\n    ipt_state 1857 5\n    ip_conntrack 40693 1 ipt_state\n    iptable_filter 2753 1ip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter\n    dm_mod 54741 0\n    button 6481 0\n    battery 8517 0\n    ac 4805 0\n    uhci_hcd 31449 0\n    ehci_hcd 31557 0\n    snd_via82xx 27237 2\n    snd_ac97_codec 64401 1 snd_via82xx\n    snd_pcm_oss 47609 0\n    snd_mixer_oss 17217 2 snd_pcm_oss\n    snd_pcm 97993 2 snd_via82xx,snd_pcm_oss\n    snd_timer 29765 1 snd_pcm\n    snd_page_alloc 9673 2 snd_via82xx,snd_pcm\n    gameport 4801 1 snd_via82xx\n    snd_mpu401_uart 8769 1 snd_via82xx\n    snd_rawmidi 26725 1 snd_mpu401_uart\n    snd_seq_device 8137 1 snd_rawmidi\n    snd 54053 11\n    snd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\n    d_seq_device\n    soundcore 9889 2 snd\n    via_rhine 23497 0\n    mii 4673 1 via_rhine\n    floppy 58609 0\n    ext3 116809 1\n    jbd 74969 1 ext3\n    --------------------------------------------------------------------------------\n    /proc/mounts 文件\n    这个文件以/etc/mtab 文件的格式给出当前系统所安装的文件系统信息。这个文件也能反映出任何手工安装\n    从而在/etc/mtab 文件中没有包含的文件系统。\n    示例：\n    [root@localhost /]# cat /proc/mounts\n    rootfs / rootfs rw 0 0\n    /proc /proc proc rw,nodiratime 0 0\n    none /dev tmpfs rw 0 0\n    /dev/root / ext3 rw 0 0\n    none /dev tmpfs rw 0 0\n    none /selinux selinuxfs rw 0 0\n    /proc /proc proc rw,nodiratime 0 0\n    /proc/bus/usb /proc/bus/usb usbfs rw 0 0\n    /sys /sys sysfs rw 0 0none /dev/pts devpts rw 0 0\n    none /dev/shm tmpfs rw 0 0\n    none /proc/sys/fs/binfmt_misc binfmt_misc rw 0 0\n    sunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw 0 0\n    --------------------------------------------------------------------------------\n    /proc/pci 文件\n    这个文件给出PCI 设备的信息。用它可以方便地诊断PCI 问题。你可以从这个文件中检索到的信息包括诸\n    如IDE 接口或USB 控制器这样的设备, 总线, 设备和功能编号, 设备延迟以及IRQ 编号。\n    示例：\n    [root@localhost /]# cat /proc/pci\n    PCI devices found:\n    Bus 0, device 0, function 0:\n    Class 0600: PCI device 1106:3116 (rev 0).\n    Master Capable. Latency=8.\n    Prefetchable 32 bit memory at 0xe0000000 [0xe7ffffff].\n    Bus 0, device 1, function 0:\n    Class 0604: PCI device 1106:b091 (rev 0).\n    Master Capable. No bursts. Min Gnt=12.\n    Bus 0, device 16, function 2:\n    Class 0c03: PCI device 1106:3038 (rev 12.\n    IRQ 5.\n    Master Capable. Latency=32.\n    I/O at 0xec00 [0xec1f].\n    Bus 0, device 16, function 1:\n    Class 0c03: PCI device 1106:3038 (rev 12.\n    IRQ 3.\n    Master Capable. Latency=32.\n    I/O at 0xe800 [0xe81f].\n    Bus 0, device 16, function 0:\n    Class 0c03: PCI device 1106:3038 (rev 12.\n    IRQ 11.\n    Master Capable. Latency=32.\n    I/O at 0xe400 [0xe41f].\n    Bus 0, device 16, function 3:\n    Class 0c03: PCI device 1106:3104 (rev 130).\n    IRQ 10.\n    Master Capable. Latency=32.\n    Non-prefetchable 32 bit memory at 0xdfffff00 [0xdfffffff].\n    Bus 0, device 17, function 0:\n    Class 0601: PCI device 1106:3177 (rev 0).\n    Bus 0, device 17, function 1:Class 0101: PCI device 1106:0571 (rev 6).\n    IRQ 255.\n    Master Capable. Latency=32.\n    I/O at 0xfc00 [0xfc0f].\n    Bus 0, device 17, function 5:\n    Class 0401: PCI device 1106:3059 (rev 80).\n    IRQ 5.\n    I/O at 0xe000 [0xe0ff].\n    Bus 0, device 18, function 0:\n    Class 0200: PCI device 1106:3065 (rev 116).\n    IRQ 11.\n    Master Capable. Latency=32\\. Min Gnt=3.Max Lat=8.\n    I/O at 0xdc00 [0xdcff].\n    Non-prefetchable 32 bit memory at 0xdffffe00 [0xdffffeff].\n    Bus 1, device 0, function 0:\n    Class 0300: PCI device 5333:8d04 (rev 0).\n    IRQ 11.\n    Master Capable. Latency=32\\. Min Gnt=4.Max Lat=255.\n    Non-prefetchable 32 bit memory at 0xdfe80000 [0xdfefffff].\n    Prefetchable 32 bit memory at 0xd0000000 [0xd7ffffff].\n    --------------------------------------------------------------------------------\n    /proc/stat 文件\n    这个文件包含的信息有CPU 利用率, 磁盘, 内存页, 内存对换, 全部中断, 接触开关以及赏赐自举时间（自1970\n    年1 月1 日起的秒数 ） 。\n    示例：\n    [root@localhost /]# cat /proc/stat\n    cpu 31994 3898 7161 381600 15254 451 0\n    cpu0 31994 3898 7161 381600 15254 451 0\n    intr 4615930 4404290 3364 0 0 12 0 7 0 2 0 0 12618 112114 0 44142 39381\n    ctxt 1310498\n    btime 1148891913\n    processes 4249\n    procs_running 4\n    procs_blocked 0\n    --------------------------------------------------------------------------------\n    /proc/uptime 文件\n    这个文件给出自从上次系统自举以来的秒数, 以及其中有多少秒处于空闲 。 这主要供uptime 程序使用 。 比较\n    这两个数字能够告诉你长期来看CPU 周期浪费的比例。\n    示例：\n    [root@localhost /]# cat /proc/uptime\n    4477.04 4021.10--------------------------------------------------------------------------------\n    /proc/version 文件\n    这个文件只有一行内容, 说明正在运行的内核版本。可以用标准的编程方法进行分析获得所需的系统信息 。\n    示例：\n    [root@localhost /]# cat /proc/version\n    Linux version 2.6.9-1.667 ( bhcompile@tweety.build.redhat.com ) (gcc version 3.4.2 20041017 (Red Hat\n    3.4.2-6.fc3)) #1 Tue Nov 2 14:41:25 EST 2004\n    --------------------------------------------------------------------------------\n    /proc/net 子目录\n    此目录下的文件描述或修改了联网代码的行为。可以通过使用 arp,netstat,route 和ipfwadm 命令设置或查询\n    这些特殊文件中的许多文件。\n    示例：\n    [root@localhost /]# ls /proc/net\n    anycast6 ip_conntrack mcfilter6 rt6_stats tcp\n    arp ip_conntrack_expect netlink rt_acct tcp6\n    dev ip_mr_cache netstat rt_cache udp\n    dev_mcast ip_mr_vif packet snmp udp6\n    dev_snmp6 ip_tables_matches psched snmp6 unix\n    if_inet6 ip_tables_names raw sockstat wireless\n    igmp ip_tables_targets raw6 sockstat6\n    igmp6 ipv6_route route softnet_stat\n    ip6_flowlabel mcfilter rpc stat\n    --------------------------------------------------------------------------------\n    以下摘要介绍此目录下文件的功能：\n    arp\n    转储每个网络接口的arp 表中dev 包的统计\n    dev\n    来自网络设备的统计\n    dev_mcast\n    列出二层（数据链路层）多播组\n    igmp\n    加入的IGMP 多播组\n    netlink\n    netlink 套接口的信息\n    netstat\n    网络流量的多种统计。第一行是信息头, 带有每个变量的名称。接下来的一行保存相应变量的值\n    raw\n    原始套接口的套接口表\n    route\n    静态路由表\n    rpc\n    包含RPC 信息的目录rt_cache\n    路由缓冲\n    snmp\n    snmp agent 的ip/icmp/tcp/udp 协议统计; 各行交替给出字段名和值\n    sockstat\n    列出使用的tcp/udp/raw/pac/syc_cookies 的数量\n    tcp\n    TCP 连接的套接口\n    udp\n    UDP 连接的套接口表\n    unix\n    UNIX 域套接口的套接口表\n    --------------------------------------------------------------------------------\n    示例：[root@localhost /]# cat /proc/net/route\n    Iface Destination Gateway Flags RefCnt Use Metric Mask MTU\n    Window IRTT\n    eth0 0035C2DA 00000000 0001 0 0 0 80FFFFF0\n    eth0 0000FEA9 00000000 0001 0 0 0 0000FFF0\n    eth0 00000000 0135C2DA 0003 0 0 0 00000000\n    --------------------------------------------------------------------------------\n    [root@localhost /]# cat /proc/net/tcp\n    sl local_address rem_address st tx_queue rx_queue tr tm->when retrnsmt uid timeout inode\n    0: 00000000:8000 00000000:0000 0A 00000000:00000000 00:00000000 00000000 29 0 9525 1\n    0dde7500 3000 0 0 2 -1\n    1: 00000000:006F 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 9484 1\n    0dde79e0 3000 0 0 2 -1\n    2: 0100007F:0277 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10049 1\n    0a8e3a00 3000 0 0 2 -1\n    3: 0100007F:14D7 00000000:0000 0A 00000000:00000000 00:00000000 00000000 99 0 9847 1\n    0dde7020 3000 0 0 2 -1\n    4: 0100007F:0019 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10286 1\n    0a8e3520 3000 0 0 2 -1\n    --------------------------------------------------------------------------------\n    [root@localhost /]# cat /proc/net/arp\n    IP address HW type Flags HW address Mask Device\n    218.194.53.1 0x1 0x2 00:0D:BC:78:07:3F * eth0\n    --------------------------------------------------------------------------------\n    [root@localhost /]# cat /proc/net/udp\n    sl local_address rem_address st tx_queue rx_queue tr tm->when retrnsmt uid timeout inode\n    0: 00000000:8000 00000000:0000 07 00000000:00000000 00:00000000 00000000 29 0 9520 2\n    0b4ef7c0\n    105: 00000000:14E9 00000000:0000 07 00000000:00000000 00:00000000 00000000 99 0 10284 20b4ef040\n    111: 00000000:006F 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9483 2\n    0b4efcc0\n    116: 00000000:02F4 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9511 2\n    0b4efa40\n    119: 00000000:0277 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 10050 2\n    0b4ef2c0\n    --------------------------------------------------------------------------------\n    /proc/scsi 子目录\n    此目录下包含一个列出了所有检测到的SCSI 设备的文件, 并且为每种控制器驱动程序提供一个目录, 在这个\n    目录下又为已安装的此种控制器的每个实例提供一个子目录。\n    示例：\n    由于本人的机器没有SCSI 设备, 顾暂时无法提供示例。\n    --------------------------------------------------------------------------------\n    /proc/sys 子目录\n    在此目录下有许多子目录 。 此目录中的许多项都可以用来调整系统的性能 。 这个目录包含信息太多, 无法介\n    绍全部。只在示例中展示目录下的一些文件。\n    示例：[root@localhost /]# ls /proc/sys\n    debug dev fs kernel net proc sunrpc vm\n    --------------------------------------------------------------------------------\n    [root@localhost ~]# ls /proc/sys/fs\n    aio-max-nr dentry-state file-nr lease-break-time overflowgid\n    aio-nr dir-notify-enable inode-nr leases-enable overflowuid\n    binfmt_misc file-max inode-state mqueue quota\n    --------------------------------------------------------------------------------\n    [root@localhost ~]# ls /proc/sys/kernel\n    acct hotplug panic sem\n    cad_pid modprobe panic_on_oops shmall\n    cap-bound msgmax pid_max shmmax\n    core_pattern msgmnb print-fatal-signals shmmni\n    core_uses_pid msgmni printk sysrq\n    ctrl-alt-del ngroups_max printk_ratelimit tainted\n    domainname osrelease printk_ratelimit_burst threads-max\n    exec-shield ostype pty vdso\n    exec-shield-randomize overflowgid random version\n    hostname overflowuid real-root-dev\n    --------------------------------------------------------------------------------\n    [root@localhost ~]# ls /proc/sys/net\n    core ethernet ipv4 ipv6 unix\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# ls /proc/sys/vmblock_dump laptop_mode nr_pdflush_threads\n    dirty_background_ratio legacy_va_layout overcommit_memory\n    dirty_expire_centisecs lower_zone_protection overcommit_ratio\n    dirty_ratio max_map_count page-cluster\n    dirty_writeback_centisecs min_free_kbytes swappiness\n    hugetlb_shm_group nr_hugepages vfs_cache_pressure\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# ls /proc/sys/net/ipv4\n    conf tcp_fack\n    icmp_echo_ignore_all tcp_fin_timeout\n    icmp_echo_ignore_broadcasts tcp_frto\n    icmp_ignore_bogus_error_responses tcp_keepalive_intvl\n    icmp_ratelimit tcp_keepalive_probes\n    icmp_ratemask tcp_keepalive_time\n    igmp_max_memberships tcp_low_latency\n    igmp_max_msf tcp_max_orphans\n    inet_peer_gc_maxtime tcp_max_syn_backlog\n    inet_peer_gc_mintime tcp_max_tw_buckets\n    inet_peer_maxttl tcp_mem\n    inet_peer_minttl tcp_moderate_rcvbuf\n    inet_peer_threshold tcp_no_metrics_save\n    ip_autoconfig tcp_orphan_retries\n    ip_conntrack_max tcp_reordering\n    ip_default_ttl tcp_retrans_collapse\n    ip_dynaddr tcp_retries1\n    ip_forward tcp_retries2\n    ipfrag_high_thresh tcp_rfc1337\n    ipfrag_low_thresh tcp_rmem\n    ipfrag_secret_interval tcp_sack\n    ipfrag_time tcp_stdurg\n    ip_local_port_range tcp_synack_retries\n    ip_nonlocal_bind tcp_syncookies\n    ip_no_pmtu_disc tcp_syn_retries\n    neigh tcp_timestamps\n    netfilter tcp_tso_win_divisor\n    route tcp_tw_recycle\n    tcp_abort_on_overflow tcp_tw_reuse\n    tcp_adv_win_scale tcp_vegas_alpha\n    tcp_app_win tcp_vegas_beta\n    tcp_bic tcp_vegas_cong_avoid\n    tcp_bic_fast_convergence tcp_vegas_gamma\n    tcp_bic_low_window tcp_westwood\n    tcp_dsack tcp_window_scalingtcp_ecn tcp_wmem\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# cat /proc/sys/kernel/shmall\n    2097152\n    --------------------------------------------------------------------------------\n    [root@localhost sys]# cat /proc/sys/kernel/osrelease\n    2.6.9-1.667\n    --------------------------------------------------------------------------------\n    总结 ：/proc 文件系统包含了大量的有关当前系统状态的信息 。proc 的手册页中也有对这些文件的解释文档 。\n    把文件和分析这些文件的工具产生的输出进行比较能够更加清晰地了解这些文件\n","slug":"linux-proc-0","published":1,"updated":"2016-10-25T08:28:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbk3003wuyxua8x5b1jy","content":"<pre><code>Linux-proc\n\nproc 文件系统\n\n在Linux中有额外的机制可以为内核和内核模块将信息发送给进程-- /proc 文件系统。最初设计的目的是允许更方便的对进程信息进行访问（因此得名），现在它被每一个有有趣的东西报告的内核使用，例如/proc/modules 有模块的列表/proc/meminfo 有内存使用的统计表。\n</code></pre><a id=\"more\"></a>\n<pre><code>　　使用proc 文件系统的方法和使用设备驱动程序非常相似--创建一个/proc 文件需要的所有信息的结构，包括任何处理函数的指针（在我们的例子中只有一个，当某人试图从/proc 文件读时调用的那一个）。然后，init_module 在内核中登记该结构而cleanup_module 注销它。\n\n　　我们使用proc_register_dynamic(这是在2.0 版中的情况，在2.2 版中如果我们将节点设置为0系统将自动为我们做到) 的原因是我们不想预先决定我们的文件的节点数字，而是为防止冲突而由内核决定它。通常的文件系统存在于磁盘上而不是内存中（/proc 在内存中），在这中情况下，节点数是是指向文件的索引节点所在的磁盘位置的指针。节点包含文件的信息（例如文件的存取权限）和指向磁盘位置或文件数据可以被找到的几个位置的指针。\n\n　　因为当文件被打开或关闭的时候不能得到调用，所以在这个模块中没有地方放置MOD_INC_USE_COUNT 和MOD_DEC_USE_COUNT，并且，如果文件被打开随后模块被移除，我们没有办法避免后果。在下一章我们会看到一个艰难的但更灵活的可以处理/proc文件的实现方式，它也可以让我们防止那个问题。\n\nhttp://www.2cto.com/os/201202/119552.html\n\nLinux 内核提供了一种通过/proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。尽管在各种硬件平台上的Linux 系统的/proc 文件系统的基本概念都是相同的，但本文只讨论基于intel x86 架构的Linux /proc 文件系统。\n\n_________________ _________________ _________________\n\n/proc --- 一个虚拟文件系统\n\n/proc 文件系统是一种内核和内核模块用来向进程(process) 发送信息的机制(所以叫做/proc)。这个伪文件系统让你可以和内核内部数据结构进行交互，获取 有关进程的有用信息，在运行中(on the fly) 改变设置(通过改变内核参数)。 与其他文件系统不同，/proc 存在于内存之中而不是硬盘上。如果你察看文件/proc/mounts (和mount 命令一样列出所有已经加载的文件系统)，你会看到其中 一行是这样的：\n\ngrep proc /proc/mounts\n/proc /proc proc rw 0 0\n\n/proc 由内核控制，没有承载/proc 的设备。因为/proc 主要存放由内核控制的状态信息，所以大部分这些信息的逻辑位置位于内核控制的内存。对/proc 进行一次&apos;ls -l&apos; 可以看到大部分文件都是0 字节大的；不过察看这些文件的时候，确实可以看到一些信息。这怎么可能？这是因为/proc 文件系统和其他常规的文件系统一样把自己注册到虚拟文件系统层(VFS) 了。然而，直到当VFS 调用它，请求文件、目录的i-node 的时候，/proc 文件系统才根据内核中的信息建立相应的文件和目录。\n\n加载proc 文件系统\n\n如果系统中还没有加载proc 文件系统，可以通过如下命令加载proc 文件系统：\n\nmount -t proc proc /proc\n上述命令将成功加载你的proc 文件系统。更多细节请阅读mount 命令的man page。\n\n察看/proc 的文件\n\n/proc 的文件可以用于访问有关内核的状态、计算机的属性、正在运行的进程的状态等信息。大部分/proc 中的文件和目录提供系统物理环境最新的信息。尽管/proc 中的文件是虚拟的，但它们仍可以使用任何文件编辑器或像&apos;more&apos;, &apos;less&apos;或&apos;cat&apos;这样的程序来查看。当编辑程序试图打开一个虚拟文件时，这个文件就通过内核中的信息被凭空地(on the fly) 创建了。这是一些我从我的系统中得到的一些有趣结果：\n\n$ ls -l /proc/cpuinfo\n-r--r--r-- 1 root root 0 Dec 25 11:01 /proc/cpuinfo\n\n$ file /proc/cpuinfo\n/proc/cpuinfo: empty\n\n$ cat /proc/cpuinfo\n\nprocessor : 0\nvendor_id : GenuineIntel\ncpu family : 6\nmodel : 8\nmodel name : Pentium III (Coppermine)\nstepping : 6\ncpu MHz : 1000.119\ncache size : 256 KB\nfdiv_bug : no\nhlt_bug : no\nsep_bug : no\nf00f_bug : no\ncoma_bug : no\nfpu : yes\nfpu_exception : yes\ncpuid level : 2\nwp : yes\nflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\ncmov pat pse36 mmx fxsr xmm\nbogomips : 1998.85\n\nprocessor : 3\nvendor_id : GenuineIntel\ncpu family : 6\nmodel : 8\nmodel name : Pentium III (Coppermine)\nstepping : 6\ncpu MHz : 1000.119\ncache size : 256 KB\nfdiv_bug : no\nhlt_bug : no\nsep_bug : no\nf00f_bug : no\ncoma_bug : no\nfpu : yes\nfpu_exception : yes\ncpuid level : 2\nwp : yes\nflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\ncmov pat pse36 mmx fxsr xmm\nbogomips : 1992.29\n\n这是一个从双CPU 的系统中得到的结果，上述大部分的信息十分清楚地给出了这个系统的有用的硬件信息。有些/proc 的文件是经过编码的，不同的工具可以被用来解释这些编码过的信息并输出成可读的形式。这样的工具包括：&apos;top&apos;, &apos;ps&apos;, &apos;apm&apos; 等。\n\n得到有用的系统/内核信息\n\nproc 文件系统可以被用于收集有用的关于系统和运行中的内核的信息。下面是一些重要的文件：\n\n* /proc/cpuinfo - CPU 的信息(型号, 家族, 缓存大小等)\n* /proc/meminfo - 物理内存、交换空间等的信息\n* /proc/mounts - 已加载的文件系统的列表\n* /proc/devices - 可用设备的列表\n* /proc/filesystems - 被支持的文件系统\n* /proc/modules - 已加载的模块\n* /proc/version - 内核版本\n* /proc/cmdline - 系统启动时输入的内核命令行参数\n\nproc 中的文件远不止上面列出的这么多。想要进一步了解的读者可以对/proc 的每一个文件都&apos;more&apos;一下或读参考文献[1]获取更多的有关/proc 目录中的文件的信息。我建议使用&apos;more&apos;而不是&apos;cat&apos;，除非你知道这个文件很小，因为有些文件(比如kcore) 可能会非常长。\n\n有关运行中的进程的信息\n\n/proc 文件系统可以用于获取运行中的进程的信息。在/proc 中有一些编号的子目录。每个编号的目录对应一个进程id (PID)。这样，每一个运行中的进程/proc 中都有一个用它的PID 命名的目录。这些子目录中包含可以提供有关进程的状态和环境的重要细节信息的文件。让我们试着查找一个运行中的进程。\n\n$ ps -aef | grep mozilla\nroot 32558 32425 8 22:53 pts/1 00:01:23 /usr/bin/mozilla\n\n上述命令显示有一个正在运行的mozilla 进程的PID 是32558。相对应的，/proc 中应该有一个名叫32558 的目录\n\n$ ls -l /proc/32558\ntotal 0\n-r--r--r-- 1 root root 0 Dec 25 22:59 cmdline\n-r--r--r-- 1 root root 0 Dec 25 22:59 cpu\nlrwxrwxrwx 1 root root 0 Dec 25 22:59 cwd -&gt; /proc/\n-r-------- 1 root root 0 Dec 25 22:59 environ\nlrwxrwxrwx 1 root root 0 Dec 25 22:59 exe -&gt; /usr/bin/mozilla*\ndr-x------ 2 root root 0 Dec 25 22:59 fd/\n-r--r--r-- 1 root root 0 Dec 25 22:59 maps\n-rw------- 1 root root 0 Dec 25 22:59 mem\n-r--r--r-- 1 root root 0 Dec 25 22:59 mounts\nlrwxrwxrwx 1 root root 0 Dec 25 22:59 root -&gt; //\n-r--r--r-- 1 root root 0 Dec 25 22:59 stat\n-r--r--r-- 1 root root 0 Dec 25 22:59 statm\n-r--r--r-- 1 root root 0 Dec 25 22:59 status\n\n文件&quot;cmdline&quot; 包含启动进程时调用的命令行。&quot;envir&quot; 进程的环境变两。&quot;status&quot; 是进程的状态信息，包括启动进程的用户的用户ID (UID) 和组ID(GID) ，父进程ID (PPID)，还有进程当前的状态，比如&quot;Sleelping&quot;和&quot;Running&quot;。每个进程的目录都有几个符号链接，&quot;cwd&quot;是指向进程当前工作目录的符号链接，&quot;exe&quot;指向运行的进程的可执行程序，&quot;root&quot;指向被这个进程看作是根目录的目录(通常是&quot;/&quot;)。目录&quot;fd&quot;包含指向进程使用的文件描述符的链接。&quot;cpu&quot;仅在运行SMP 内核时出现，里面是按CPU 划分的进程时间。\n\n/proc/self 是一个有趣的子目录，它使得程序可以方便地使用/proc 查找本进程地信息。/proc/self 是一个链接到/proc 中访问/proc 的进程所对应的PID 的目录的符号链接。\n\n通过/proc 与内核交互\n\n上面讨论的大部分/proc 的文件是只读的。而实际上/proc 文件系统通过/proc 中可读写的文件提供了对内核的交互机制。写这些文件可以改变内核的状态，因而要慎重改动这些文件。/proc/sys 目录存放所有可读写的文件的目录，可以被用于改变内核行为。\n\n/proc/sys/kernel - 这个目录包含反通用内核行为的信息。/proc/sys/kernel/{domainname, hostname} 存放着机器/网络的域名和主机名。这些文件可以用于修改这些名字。\n\n$ hostname\nmachinename.domainname.com\n\n$ cat /proc/sys/kernel/domainname\ndomainname.com\n\n$ cat /proc/sys/kernel/hostname\nmachinename\n\n$ echo &quot;new-machinename&quot; &gt; /proc/sys/kernel/hostname\n\n$ hostname\nnew-machinename.domainname.com\n\n这样，通过修改/proc 文件系统中的文件，我们可以修改主机名。很多其他可配置的文件存在于/proc/sys/kernel/。这里不可能列出所有这些文件，读者可以自己去这个目录查看以得到更多细节信息。\n另一个可配置的目录是/proc/sys/net。这个目录中的文件可以用于修改机器/网络的网络属性。比如，简单修改一个文件，你可以在网络上瘾藏匿的计算机。\n\n$ echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n这将在网络上瘾藏你的机器，因为它不响应icmp_echo。主机将不会响应其他主机发出的ping 查询。\n\n$ ping machinename.domainname.com\nno answer from machinename.domainname.com\n\n要改回缺省设置，只要\n\n$ echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n/proc/sys 下还有许多其它可以用于改变内核属性。读者可以通过参考文献[1], [2] 获取更多信息。\n\n结论\n\n/proc 文件系统提供了一个基于文件的Linux 内部接口。它可以用于确定系统的各种不同设备和进程的状态。对他们进行配置。因而，理解和应用有关这个文件系统的知识是理解你的Linux 系统的关键。\n\n原文：http://www.sudu.cn/info/html/edu/20070101/292381.html\n\n什么是proc文件系统\nproc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。它的目录结构如下：\n目录名称 目录内容\napm 高级电源管理信息\ncmdline 内核命令行\nCpuinfo 关于Cpu信息\nDevices 可以用到的设备（块设备/字符设备）\nDma 使用的DMA通道\nFilesystems 支持的文件系统\nInterrupts 中断的使用\nIoports I/O端口的使用\nKcore 内核核心印象\nKmsg 内核消息\nKsyms 内核符号表\nLoadavg 负载均衡\nLocks 内核锁\nMeminfo 内存信息\nMisc 杂项\nModules 加载模块列表\nMounts 加载的文件系统\nPartitions 系统识别的分区表\nRtc 实时时钟\nSlabinfo Slab池信息\nStat 全面统计状态表\nSwaps 对换空间的利用情况\nVersion 内核版本\nUptime 系统正常运行时间\n并不是所有这些目录在你的系统中都有，这取决于你的内核配置和装载的模块。另外，在/proc下还有三个很重要的目录：net，scsi和sys。Sys目录是可写的，可以通过它来访问或修改内核的参数（见下一部分），而net和scsi则依赖于内核配置。例如，如果系统不支持scsi，则scsi 目录不存在。\n除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的PID号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。Proc文件系统的名字就是由之而起。进程目录的结构如下：\n目录名称 目录内容\nCmdline 命令行参数\nEnviron 环境变量值\nFd 一个包含所有文件描述符的目录\nMem 进程的内存被利用情况\nStat 进程状态\nStatus 进程当前状态，以可读的方式显示出来\nCwd 当前工作目录的链接\nExe 指向该进程的执行命令文件\nMaps 内存映象\nStatm 进程内存状态信息\nRoot 链接此进程的root目录\n用户如果要查看系统信息，可以用cat命令。例如：\n# cat /proc/interrupts\nCPU0\n0: 8728810 XT-PIC timer\n1: 8Array5 XT-PIC keyboard\n2: 0 XT-PIC cascade\n3: 5316Array5 XT-PIC aha152x\n4: 2014133 XT-PIC serial\n5: 44401 XT-PIC pcnet_cs\n8: 2 XT-PIC rtc\n11: 8 XT-PIC i82365\n12: 182Array18 XT-PIC Mouse\n13: 1 XT-PIC fpu PS/2\n14: 1232265 XT-PIC ide0\n15: 7 XT-PIC ide1\nNMI: 0\n用户还可以实现修改内核参数。在/proc文件系统中有一个有趣的目录：/proc/sys。它不仅提供了内核信息，而且可以通过它修改内核参数，来优化你的系统。但是你必须很小心，因为可能会造成系统崩溃。最好是先找一台无关紧要的机子，调试成功后再应用到你的系统上。\n要改变内核的参数，只要用vi编辑或echo参数重定向到文件中即可。下面有一个例子：\n# cat /proc/sys/fs/file-max\n40Array6\n# echo 81Array2 &gt; /proc/sys/fs/file-max\n# cat /proc/sys/fs/file-max\n81Array2\n如果你优化了参数，则可以把它们写成添加到文件rc.local中，使它在系统启动时自动完成修改。\n/proc文件系统中网络参数\n/proc/sys/kernel\n内核共享内存限制,默认最小为4M.两个参数可以改成一样.加大.\n/proc/sys/kernel/shmall 40Array6\n/proc/sys/kernel/shmmax 33554432\n\n/proc/sys/net/ipv4/\n该目录包含的是和tcp/ip协议相关的各种参数，下面我们就对这些网络参数加以详细的说明。\nip_forward 参数类型：BOOLEAN\n0 - 关闭(默认值)\nnot 0 - 打开ip转发\n在网络本地接口之间转发数据报。该参数非常特殊，对该参数的修改将导致其它所有相关配置参数恢复其默认值(对于主机参阅RFC1122，对于路由器参见RFC1812)\n/proc/sys/net/ipv4/ip_conntrack_max 65440 (默认)\nip_default_ttl 参数类型：INTEGER\n默认值为64 。表示IP数据报的Time To Live值。\nip_no_pmtu_disc 参数类型：BOOLEAN\n关闭路径MTU探测，默认值为FALSE\nipfrag_high_thresh 参数类型：整型\n用来组装分段的IP包的最大内存量。当ipfrag_high_thresh数量的内存被分配来用来组装IP包，则IP分片处理器将丢弃数据报直到ipfrag_low_thresh数量的内存被用来组装IP包。\nipfrag_low_thresh 参数类型：整型\n参见ipfrag_high_thresh。\nipfrag_time 参数类型：整型\n保存一个IP分片在内存中的时间。\ninet_peer_threshold 参数类型：整型\nINET对端存储器某个合适值，当超过该阀值条目将被丢弃。该阀值同样决定生存时间以及废物收集通过的时间间隔。条目越多?存活期越低?GC 间隔越短\ninet_peer_minttl 参数类型：整型\n条目的最低存活期。在重组端必须要有足够的碎片(fragment)存活期。这个最低存活期必须保证缓冲池容积是否少于inet_peer_threshold。该值以jiffies为单位测量。\ninet_peer_maxttl 参数类型：整型\n条目的最大存活期。在此期限到达之后?如果缓冲池没有耗尽压力的话(例如?缓冲池中的条目数目非常少)?不使用的条目将会超时。该值以jiffies为单位测量。\ninet_peer_gc_mintime 参数类型：整型\n废物收集(GC)通过的最短间隔。这个间隔会影响到缓冲池中内存的高压力。 该值以jiffies为单位测量。\ninet_peer_gc_maxtime 参数类型：整型\n废物收集(GC)通过的最大间隔，这个间隔会影响到缓冲池中内存的低压力。 该值以jiffies为单位测量。\ntcp_syn_retries 参数类型：整型\n对于一个新建连接，内核要发送多少个SYN 连接请求才决定放弃。不应该大于255，默认值是5，对应于180秒左右。\ntcp_synack_retries 参数类型：整型\n对于远端的连接请求SYN，内核会发送SYN ＋ACK数据报，以确认收到上一个SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的SYN+ACK 数目。\ntcp_keepalive_time 参数类型：整型\n当keepalive打开的情况下，TCP发送keepalive消息的频率，默认值是2个小时。\ntcp_keepalive_probes 参数类型：整型\nTCP发送keepalive探测以确定该连接已经断开的次数，默认值是Array。\ntcp_keepalive_interval 参数类型：整型\n探测消息发送的频率，乘以tcp_keepalive_probes就得到对于从开始探测以来没有响应的连接杀除的时间。默认值为75秒，也就是没有活动的连接将在大约11分钟以后将被丢弃。\ntcp_retries1 参数类型：整型\n当出现可疑情况而必须向网络层报告这个可疑状况之前?需要进行多少次重试。最低的RFC 数值是3 ?这也是默认值?根据RTO的值大约在3秒- 8分钟之间。\ntcp_retries2 参数类型：整型\n在丢弃激活的TCP连接之前?需要进行多少次重试。RFC1122规定，该值必须大于100秒。默认值为15，根据RTO的值来决定，相当于13-30分钟，\ntcp_orphan_retries 参数类型：整型\n在近端丢弃TCP连接之前?要进行多少次重试。默认值是7 个?相当于50秒- 16分钟?视RTO 而定。如果您的系统是负载很大的web服务器?那么也许需要降低该值?这类sockets 可能会耗费大量的资源。另外参的考tcp_max_orphans 。\ntcp_fin_timeout 参数类型：整型\n对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为60 秒。过去在2.2版本的内核中是180 秒。您可以设置该值?但需要注意?如果您的机器为负载很重的web服务器?您可能要冒内存被大量无效数据报填满的风险?FIN-WAIT-2 sockets 的危险性低于FIN-WAIT-1 ?因为它们最多只吃1.5K 的内存?但是它们存在时间更长。另外参考tcp_max_orphans。\ntcp_max_tw_buckets 参数类型：整型\n系统在同时所处理的最大timewait sockets 数目。如果超过此数的话?time-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要人为的降低这个限制?不过?如果网络条件需要比默认值更多?则可以提高它(或许还要增加内存)。\ntcp_tw_recycle 参数类型：布尔\n打开快速TIME-WAIT sockets 回收。默认值是1。除非得到技术专家的建议或要求?请不要随意修改这个值。\ntcp_max_orphans 参数类型：整型\n系统所能处理不属于任何进程的TCP sockets最大数量。假如超过这个数量?那么不属于任何进程的连接会被立即reset，并同时显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要依赖这个或是人为的降低这个限制\ntcp_abort_on_overflow 参数类型：布尔\n当守护进程太忙而不能接受新的连接，就象对方发送reset消息，默认值是false。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。\ntcp_syncookies 参数类型：整型\n只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击。默认值是false。\n注意：该选项千万不能用于那些没有收到攻击的高负载服务器，如果在日志中出现synflood消息，但是调查发现没有收到synflood攻击，而是合法用户的连接负载过高的原因，你应该调整其它参数来提高服务器性能。参考: tcp_max_syn_backlog, tcp_synack_retries, tcp_abort_on_overflow.\nsyncookie严重的违背TCP协议，不允许使用TCP扩展，可能对某些服务导致严重的性能影响(如SMTP转发)。\ntcp_stdurg 参数类型：整型\n使用TCP urg pointer 字段中的主机请求解释功能。大部份的主机都使用老旧的BSD解释，因此如果您在Linux 打开它?或会导致不能和它们正确沟通。默认值为为?FALSE\ntcp_max_syn_backlog 参数类型：整型\n对于那些依然还未获得客户端确认的连接请求?需要保存在队列中最大数目。对于超过128Mb 内存的系统?默认值是1024 ?低于128Mb 的则为128。如果服务器经常出现过载?可以尝试增加这个数字。警告?假如您将此值设为大于1024?最好修改include/net/tcp.h 里面的TCP_SYNQ_HSIZE ?以保持TCP_SYNQ_HSIZE*16 0)或者bytes-bytes/2^(-tcp_adv_win_scale)(如果tcp_adv_win_scale  128Mb 32768-61000\n0)则系统将忽略所有发送给自己的ICMP ECHO请求或那些广播地址的请求。\nicmp_destunreach_rate - 整数\nicmp_paramprob_rate - 整数\nicmp_timeexceed_rate - 整数\nicmp_echoreply_rate - 整数(not enabled per default)\n限制发向特定目标的ICMP数据报的最大速率。0表示没有任何限制，否则表示jiffies数据单位中允许发送的个数。\nicmp_ignore_bogus_error_responses - 布尔类型\n某些路由器违背RFC1122标准，其对广播帧发送伪造的响应来应答。这种违背行为通常会被以告警的方式记录在系统日志中。如果该选项设置为True，内核不会记录这种警告信息。默认值为False。\n(1) Jiffie: 内核使用的内部时间单位，在i386系统上大小为1/100s，在Alpha中为1/1024S。在/usr/include/asm/param.h中的HZ定义有特定系统的值。\nconf/interface/*:\nconf/all/*是特定的，用来修改所有接口的设置，is special and changes the settings for all interfaces.\nChange special settings per interface.\nlog_martians - 布尔类型\n记录带有不允许的地址的数据报到内核日志中。\naccept_redirects - 布尔类型\n收发接收ICMP重定向消息。对于主机来说默认为True，对于用作路由器时默认值为False。\nforwarding - 布尔类型\n在该接口打开转发功能\nmc_forwarding - 布尔类型\n是否进行多播路由。只有内核编译有CONFIG_MROUTE并且有路由服务程序在运行该参数才有效。\nproxy_arp - 布尔类型\n打开proxy arp功能。\nshared_media - 布尔类型\n发送(路由器)或接收(主机) RFC1620 共享媒体重定向。覆盖ip_secure_redirects的值。默认为True。\nsecure_redirects - 布尔类型\n仅仅接收发给默认网关列表中网关的ICMP重定向消息，默认值是TRUE。\nsend_redirects - 布尔类型\n如果是router，发送重定向消息，默认值是TRUE\nbootp_relay - 布尔类型\n接收源地址为0.b.c.d，目的地址不是本机的数据报。用来支持BOOTP转发服务进程，该进程将捕获并转发该包。默认为False，目前还没有实现。\naccept_source_route - 布尔类型\n接收带有SRR选项的数据报。对于主机来说默认为False，对于用作路由器时默认值为True。\nrp_filter 参数类型\n1 - 通过反向路径回溯进行源地址验证(在RFC1812中定义)。对于单穴主机和stub网络路由器推荐使用该选项。\n0 - 不通过反向路径回溯进行源地址验证。\n默认值为0。某些发布在启动时自动将其打开。\n/proc/sys/net/ipv4/netfilter\nip_conntrack_buckets\nip_conntrack_count\nip_conntrack_generic_timeout\nip_conntrack_icmp_timeout\nip_conntrack_log_invalid\nip_conntrack_max 65536(默认)\nip_conntrack_tcp_be_liberal\nip_conntrack_tcp_loose\nip_conntrack_tcp_max_retrans\nip_conntrack_tcp_timeout_close\nip_conntrack_tcp_timeout_close_wait\nip_conntrack_tcp_timeout_established 432000(单位为秒,5天)\nip_conntrack_tcp_timeout_fin_wait\nip_conntrack_tcp_timeout_last_ack\nip_conntrack_tcp_timeout_max_retrans\nip_conntrack_tcp_timeout_syn_recv\nip_conntrack_tcp_timeout_syn_sent\nip_conntrack_tcp_timeout_time_wait\nip_conntrack_udp_timeout\nip_conntrack_udp_timeout_stream\n\n#\n\n#\n#\n\nLinux Linux Linux Linux 中/proc /proc /proc /proc 目录下文件详解\n声明：可以自由转载本文, 但请务必保留本文的完整性。\n作者：张子坚\nemail:zhangzijian@163.com\n说明：本文所涉及示例均在fedora core3 下得到。\n--------------------------------------------------------------------------------\n/proc 文件系统下的多种文件提供的系统信息不是针对某个特定进程的, 而是能够在整个系统范围的上下文\n中使用。可以使用的文件随系统配置的变化而变化。命令procinfo 能够显示基于其中某些文件的多种系统\n信息。\n以下详细描述/proc 下的文件:\n--------------------------------------------------------------------------------\n/proc/cmdline 文件\n这个文件给出了内核启动的命令行。它和用于进程的cmdline 项非常相似。\n示例：\n[root@localhost proc]# cat cmdline\nro root=LABEL=/ rhgb quiet\n--------------------------------------------------------------------------------\n/proc/cpuinfo 文件\n这个文件提供了有关系统CPU 的多种信息。这些信息是从内核里对CPU 的测试代码中得到的。文件列出\n了CPU 的普通型号 （386,486,586,686 等 ）, 以及能得到的更多特定信息 （ 制造商, 型号和版本 ） 。 文件还包含\n了以bogomips 表示的处理器速度, 而且如果检测到CPU 的多种特性或者bug, 文件还会包含相应的标志。这\n个文件的格式为：文件由多行构成, 每行包括一个域名称, 一个冒号和一个值。\n示例：\n[root@localhost proc]# cat cpuinfo\nprocessor : 0\nvendor_id : AuthenticAMD\ncpu family : 6\nmodel : 8\nmodel name : AMD Athlon(tm) XP 1800+\nstepping : 1\ncpu MHz : 1530.165\ncache size : 256 KB\nfdiv_bug : no\nhlt_bug : no\nf00f_bug : nocoma_bug : no\nfpu : yes\nfpu_exception : yes\ncpuid level : 1\nwp : yes\nflags : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 mmx fxsr sse syscall mmxext\n3dnowext 3dnow\nbogomips : 2998.27\n--------------------------------------------------------------------------------\n/proc/devices 文件\n这个文件列出字符和块设备的主设备号, 以及分配到这些设备号的设备名称。\n示例：\n[root@localhost /]# cat /proc/devices\nCharacter devices:\n1 mem\n4 /dev/vc/0\n4 tty\n4 ttyS\n5 /dev/tty\n5 /dev/console\n5 /dev/ptmx\n6 lp\n7 vcs\n10 misc\n13 input\n14 sound\n29 fb\n36 netlink\n116 alsa\n128 ptm\n136 pts\n180 usb\nBlock devices:\n1 ramdisk\n2 fd\n3 ide0\n9 md\n22 ide1\n253 device-mapper\n254 mdp\n--------------------------------------------------------------------------------/proc/dma 文件\n这个文件列出由驱动程序保留的DMA 通道和保留它们的驱动程序名称 。casade 项供用于把次DMA 控制器\n从主控制器分出的DMA 行所使用; 这一行不能用于其它用途。\n示例：\n[root@localhost ~]# cat /proc/dma\n4: cascade\n--------------------------------------------------------------------------------\n/proc/filesystems 文件\n这个文件列出可供使用的文件系统类型, 一种类型一行 。 虽然它们通常是编入内核的文件系统类型, 但该文件\n还可以包含可加载的内核模块加入的其它文件系统类型。\n示例：\n[root@localhost proc]# cat /proc/filesystems\nnodev sysfs\nnodev rootfs\nnodev bdev\nnodev proc\nnodev sockfs\nnodev binfmt_misc\nnodev usbfs\nnodev usbdevfs\nnodev futexfs\nnodev tmpfs\nnodev pipefs\nnodev eventpollfs\nnodev devpts\next2\nnodev ramfs\nnodev hugetlbfs\niso9660\nnodev mqueue\nnodev selinuxfs\next3\nnodev rpc_pipefs\nnodev autofs\n--------------------------------------------------------------------------------\n/proc/interrupts 文件\n这个文件的每一行都有一个保留的中断 。 每行中的域有 ： 中断号, 本行中断的发生次数, 可能带有一个加号的\n域（SA_INTERRUPT 标志设置）, 以及登记这个中断的驱动程序的名字。可以在安装新硬件前, 像查看\n/proc/dma 和/proc/ioports 一样用cat 命令手工查看手头的这个文件 。 这几个文件列出了当前投入使用的资源\n（但是不包括那些没有加载驱动程序的硬件所使用的资源 ） 。\n示例：\n[root@localhost SPECS]# cat /proc/interruptsCPU0\n0: 7039406 XT-PIC timer\n1: 6533 XT-PIC i8042\n2: 0 XT-PIC cascade\n3: 0 XT-PIC uhci_hcd\n5: 108 XT-PIC VIA8233, uhci_hcd\n8: 1 XT-PIC rtc\n9: 0 XT-PIC acpi\n10: 0 XT-PIC ehci_hcd\n11: 17412 XT-PIC uhci_hcd, eth0\n12: 140314 XT-PIC i8042\n14: 37897 XT-PIC ide0\n15: 60813 XT-PIC ide1\nNMI: 0\nERR: 1\n--------------------------------------------------------------------------------\n/proc/ioports 文件\n这个文件列出了诸如磁盘驱动器, 以太网卡和声卡设备等多种设备驱动程序登记的许多I/O 端口范围。\n示例：\n[root@localhost SPECS]# cat /proc/ioports\n0000-001f : dma1\n0020-0021 : pic1\n0040-0043 : timer0\n0050-0053 : timer1\n0060-006f : keyboard\n0070-0077 : rtc\n0080-008f : dma page reg\n00a0-00a1 : pic2\n00c0-00df : dma2\n00f0-00ff : fpu\n0170-0177 : ide1\n01f0-01f7 : ide0\n0376-0376 : ide1\n0378-037a : parport0\n037b-037f : parport0\n03c0-03df : vga+\n03f6-03f6 : ide0\n03f8-03ff : serial\n0800-0803 : PM1a_EVT_BLK\n0804-0805 : PM1a_CNT_BLK\n0808-080b : PM_TMR\n0810-0815 : ACPI CPU throttle\n0820-0823 : GPE0_BLK0cf8-0cff : PCI conf1\ndc00-dcff : 0000:00:12.0\ndc00-dcff : via-rhine\ne000-e0ff : 0000:00:11.5\ne000-e0ff : VIA8233\ne400-e41f : 0000:00:10.0\ne400-e41f : uhci_hcd\ne800-e81f : 0000:00:10.1\ne800-e81f : uhci_hcd\nec00-ec1f : 0000:00:10.2\nec00-ec1f : uhci_hcd\nfc00-fc0f : 0000:00:11.1\nfc00-fc07 : ide0\nfc08-fc0f : ide1\n--------------------------------------------------------------------------------\n/proc/kcore 文件\n这个文件是系统的物理内存以core 文件格式保存的文件。例如,GDB 能用它考察内核的数据结构。它不是\n纯文本, 而是/proc 目录下为数不多的几个二进制格式的项之一。\n示例：\n暂无\n--------------------------------------------------------------------------------\n/proc/kmsg 文件\n这个文件用于检索用printk 生成的内核消息。任何时刻只能有一个具有超级用户权限的进程可以读取这个\n文件。也可以用系统调用syslog 检索这些消息。通常使用工具dmesg 或守护进程klogd 检索这些消息。\n示例：\n暂无\n--------------------------------------------------------------------------------\n/proc/ksyms 文件\n这个文件列出了已经登记的内核符号; 这些符号给出了变量或函数的地址 。 每行给出一个符号的地址, 符号名\n称以及登记这个符号的模块。程序ksyms,insmod 和kmod 使用这个文件。它还列出了正在运行的任务数,\n总任务数和最后分配的PID 。\n示例：\n暂无\n--------------------------------------------------------------------------------\n/proc/loadavg 文件\n这个文件给出以几个不同的时间间隔计算的系统平均负载, 这就如同uptime 命令显示的结果那样 。 前三个数\n字是平均负载 。 这是通过计算过去1 分钟,5 分钟,15 分钟里运行队列中的平均任务数得到的 。 随后是正在运行\n的任务数和总任务数。最后是上次使用的进程号。\n示例：[root@localhost ~]# cat /proc/loadavg\n0.11 0.16 0.14 3/126 3912\n--------------------------------------------------------------------------------\n/proc/locks 文件\n这个文件包含在打开的文件上的加锁信息。文件中的每一行描述了特定文件和文档上的加锁信息以及对文\n件施加的锁的类型。内核也可以需要时对文件施加强制性锁。\n示例：\n[root@localhost redhat]# cat /proc/locks\n1: POSIX ADVISORY READ 3822 03:0a:1067117 0 EOF\n2: POSIX ADVISORY READ 3822 03:0a:1067138 0 EOF\n3: POSIX ADVISORY WRITE 3326 03:0a:2326540 0 EOF\n4: POSIX ADVISORY WRITE 2639 03:0a:2966595 0 EOF\n5: FLOCK ADVISORY WRITE 2591 03:0a:2966586 0 EOF\n6: POSIX ADVISORY WRITE 2540 03:0a:2966578 0 EOF\n7: POSIX ADVISORY WRITE 2530 03:0a:2966579 0 EOF\n8: POSIX ADVISORY WRITE 2402 03:0a:2966563 0 EOF\n9: POSIX ADVISORY WRITE 2371 03:0a:2966561 0 EOF\n--------------------------------------------------------------------------------\n/proc/mdstat 文件\n这个文件包含了由md 设备驱动程序控制的RAID 设备信息。\n示例：\n[root@localhost ~]# cat /proc/mdstat\nPersonalities :\nunused devices: &lt;none&gt;\n--------------------------------------------------------------------------------\n/proc/meminfo 文件\n这个文件给出了内存状态的信息 。 它显示出系统中空闲内存, 已用物理内存和交换内存的总量 。 它还显示出\n内核使用的共享内存和缓冲区总量。这些信息的格式和free 命令显示的结果类似。\n示例：\n[root@localhost ~]# cat /proc/meminfo\nMemTotal: 223812 kB\nMemFree: 3764 kB\nBuffers: 9148 kB\nCached: 92112 kB\nSwapCached: 364 kB\nActive: 183640 kB\nInactive: 17196 kB\nHighTotal: 0 kB\nHighFree: 0 kB\nLowTotal: 223812 kB\nLowFree: 3764 kBSwapTotal: 626524 kB\nSwapFree: 620328 kB\nDirty: 12 kB\nWriteback: 0 kB\nMapped: 142880 kB\nSlab: 12668 kB\nCommitted_AS: 376732 kB\nPageTables: 2336 kB\nVmallocTotal: 3907576 kB\nVmallocUsed: 2968 kB\nVmallocChunk: 3904224 kB\nHugePages_Total: 0\nHugePages_Free: 0\nHugepagesize: 4096 kB\n--------------------------------------------------------------------------------\n/proc/misc 文件\n这个文件报告用内核函数misc_register 登记的设备驱动程序。\n示例：\n[root@localhost ~]# cat /proc/misc\n63 device-mapper\n175 agpgart\n135 rtc\n--------------------------------------------------------------------------------\n/proc/modules 文件\n这个文件给出可加载内核模块的信息 。lsmod 程序用这些信息显示有关模块的名称, 大小, 使用数目方面的信\n息。\n示例：\n[root@localhost /]# cat /proc/modules\nmd5 4033 1 - Live 0x10a7f000\nipv6 232577 8 - Live 0x10b0c000\nparport_pc 24705 1 - Live 0x10a8b000\nlp 11565 0 - Live 0x10a7b000\nparport 41737 2 parport_pc,lp, Live 0x10a55000\nautofs4 24005 0 - Live 0x10a74000\ni2c_dev 10433 0 - Live 0x109d2000\ni2c_core 22081 1 i2c_dev, Live 0x10a6d000\nsunrpc 160421 1 - Live 0x10a9d000\nipt_REJECT 6465 1 - Live 0x109da000\nipt_state 1857 5 - Live 0x109eb000\nip_conntrack 40693 1 ipt_state, Live 0x10a62000\niptable_filter 2753 1 - Live 0x10896000\nip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter, Live 0x109ed000dm_mod 54741 0 - Live 0x109f8000\nbutton 6481 0 - Live 0x10905000\nbattery 8517 0 - Live 0x109d6000\nac 4805 0 - Live 0x10908000\nuhci_hcd 31449 0 - Live 0x109dd000\nehci_hcd 31557 0 - Live 0x10949000\nsnd_via82xx 27237 2 - Live 0x10953000\nsnd_ac97_codec 64401 1 snd_via82xx, Live 0x10912000\nsnd_pcm_oss 47609 0 - Live 0x1093c000\nsnd_mixer_oss 17217 2 snd_pcm_oss, Live 0x1090c000\nsnd_pcm 97993 2 snd_via82xx,snd_pcm_oss, Live 0x10923000\nsnd_timer 29765 1 snd_pcm, Live 0x108ec000\nsnd_page_alloc 9673 2 snd_via82xx,snd_pcm, Live 0x108bd000\ngameport 4801 1 snd_via82xx, Live 0x108a6000\nsnd_mpu401_uart 8769 1 snd_via82xx, Live 0x108b9000\nsnd_rawmidi 26725 1 snd_mpu401_uart, Live 0x108e4000\nsnd_seq_device 8137 1 snd_rawmidi, Live 0x1083b000\nsnd 54053 11\nsnd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\nd_seq_device, Live 0x108f6000\nsoundcore 9889 2 snd, Live 0x1089b000\nvia_rhine 23497 0 - Live 0x1089f000\nmii 4673 1 via_rhine, Live 0x10893000\nfloppy 58609 0 - Live 0x108a9000\next3 116809 1 - Live 0x10875000\njbd 74969 1 ext3, Live 0x10861000\nlsmod 命令显示结果如下：\n[root@localhost /]# lsmod\nModule Size Used by\nmd5 4033 1\nipv6 232577 8\nparport_pc 24705 1\nlp 11565 0\nparport 41737 2 parport_pc,lp\nautofs4 24005 0\ni2c_dev 10433 0\ni2c_core 22081 1 i2c_dev\nsunrpc 160421 1\nipt_REJECT 6465 1\nipt_state 1857 5\nip_conntrack 40693 1 ipt_state\niptable_filter 2753 1ip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter\ndm_mod 54741 0\nbutton 6481 0\nbattery 8517 0\nac 4805 0\nuhci_hcd 31449 0\nehci_hcd 31557 0\nsnd_via82xx 27237 2\nsnd_ac97_codec 64401 1 snd_via82xx\nsnd_pcm_oss 47609 0\nsnd_mixer_oss 17217 2 snd_pcm_oss\nsnd_pcm 97993 2 snd_via82xx,snd_pcm_oss\nsnd_timer 29765 1 snd_pcm\nsnd_page_alloc 9673 2 snd_via82xx,snd_pcm\ngameport 4801 1 snd_via82xx\nsnd_mpu401_uart 8769 1 snd_via82xx\nsnd_rawmidi 26725 1 snd_mpu401_uart\nsnd_seq_device 8137 1 snd_rawmidi\nsnd 54053 11\nsnd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\nd_seq_device\nsoundcore 9889 2 snd\nvia_rhine 23497 0\nmii 4673 1 via_rhine\nfloppy 58609 0\next3 116809 1\njbd 74969 1 ext3\n--------------------------------------------------------------------------------\n/proc/mounts 文件\n这个文件以/etc/mtab 文件的格式给出当前系统所安装的文件系统信息。这个文件也能反映出任何手工安装\n从而在/etc/mtab 文件中没有包含的文件系统。\n示例：\n[root@localhost /]# cat /proc/mounts\nrootfs / rootfs rw 0 0\n/proc /proc proc rw,nodiratime 0 0\nnone /dev tmpfs rw 0 0\n/dev/root / ext3 rw 0 0\nnone /dev tmpfs rw 0 0\nnone /selinux selinuxfs rw 0 0\n/proc /proc proc rw,nodiratime 0 0\n/proc/bus/usb /proc/bus/usb usbfs rw 0 0\n/sys /sys sysfs rw 0 0none /dev/pts devpts rw 0 0\nnone /dev/shm tmpfs rw 0 0\nnone /proc/sys/fs/binfmt_misc binfmt_misc rw 0 0\nsunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw 0 0\n--------------------------------------------------------------------------------\n/proc/pci 文件\n这个文件给出PCI 设备的信息。用它可以方便地诊断PCI 问题。你可以从这个文件中检索到的信息包括诸\n如IDE 接口或USB 控制器这样的设备, 总线, 设备和功能编号, 设备延迟以及IRQ 编号。\n示例：\n[root@localhost /]# cat /proc/pci\nPCI devices found:\nBus 0, device 0, function 0:\nClass 0600: PCI device 1106:3116 (rev 0).\nMaster Capable. Latency=8.\nPrefetchable 32 bit memory at 0xe0000000 [0xe7ffffff].\nBus 0, device 1, function 0:\nClass 0604: PCI device 1106:b091 (rev 0).\nMaster Capable. No bursts. Min Gnt=12.\nBus 0, device 16, function 2:\nClass 0c03: PCI device 1106:3038 (rev 12.\nIRQ 5.\nMaster Capable. Latency=32.\nI/O at 0xec00 [0xec1f].\nBus 0, device 16, function 1:\nClass 0c03: PCI device 1106:3038 (rev 12.\nIRQ 3.\nMaster Capable. Latency=32.\nI/O at 0xe800 [0xe81f].\nBus 0, device 16, function 0:\nClass 0c03: PCI device 1106:3038 (rev 12.\nIRQ 11.\nMaster Capable. Latency=32.\nI/O at 0xe400 [0xe41f].\nBus 0, device 16, function 3:\nClass 0c03: PCI device 1106:3104 (rev 130).\nIRQ 10.\nMaster Capable. Latency=32.\nNon-prefetchable 32 bit memory at 0xdfffff00 [0xdfffffff].\nBus 0, device 17, function 0:\nClass 0601: PCI device 1106:3177 (rev 0).\nBus 0, device 17, function 1:Class 0101: PCI device 1106:0571 (rev 6).\nIRQ 255.\nMaster Capable. Latency=32.\nI/O at 0xfc00 [0xfc0f].\nBus 0, device 17, function 5:\nClass 0401: PCI device 1106:3059 (rev 80).\nIRQ 5.\nI/O at 0xe000 [0xe0ff].\nBus 0, device 18, function 0:\nClass 0200: PCI device 1106:3065 (rev 116).\nIRQ 11.\nMaster Capable. Latency=32\\. Min Gnt=3.Max Lat=8.\nI/O at 0xdc00 [0xdcff].\nNon-prefetchable 32 bit memory at 0xdffffe00 [0xdffffeff].\nBus 1, device 0, function 0:\nClass 0300: PCI device 5333:8d04 (rev 0).\nIRQ 11.\nMaster Capable. Latency=32\\. Min Gnt=4.Max Lat=255.\nNon-prefetchable 32 bit memory at 0xdfe80000 [0xdfefffff].\nPrefetchable 32 bit memory at 0xd0000000 [0xd7ffffff].\n--------------------------------------------------------------------------------\n/proc/stat 文件\n这个文件包含的信息有CPU 利用率, 磁盘, 内存页, 内存对换, 全部中断, 接触开关以及赏赐自举时间（自1970\n年1 月1 日起的秒数 ） 。\n示例：\n[root@localhost /]# cat /proc/stat\ncpu 31994 3898 7161 381600 15254 451 0\ncpu0 31994 3898 7161 381600 15254 451 0\nintr 4615930 4404290 3364 0 0 12 0 7 0 2 0 0 12618 112114 0 44142 39381\nctxt 1310498\nbtime 1148891913\nprocesses 4249\nprocs_running 4\nprocs_blocked 0\n--------------------------------------------------------------------------------\n/proc/uptime 文件\n这个文件给出自从上次系统自举以来的秒数, 以及其中有多少秒处于空闲 。 这主要供uptime 程序使用 。 比较\n这两个数字能够告诉你长期来看CPU 周期浪费的比例。\n示例：\n[root@localhost /]# cat /proc/uptime\n4477.04 4021.10--------------------------------------------------------------------------------\n/proc/version 文件\n这个文件只有一行内容, 说明正在运行的内核版本。可以用标准的编程方法进行分析获得所需的系统信息 。\n示例：\n[root@localhost /]# cat /proc/version\nLinux version 2.6.9-1.667 ( bhcompile@tweety.build.redhat.com ) (gcc version 3.4.2 20041017 (Red Hat\n3.4.2-6.fc3)) #1 Tue Nov 2 14:41:25 EST 2004\n--------------------------------------------------------------------------------\n/proc/net 子目录\n此目录下的文件描述或修改了联网代码的行为。可以通过使用 arp,netstat,route 和ipfwadm 命令设置或查询\n这些特殊文件中的许多文件。\n示例：\n[root@localhost /]# ls /proc/net\nanycast6 ip_conntrack mcfilter6 rt6_stats tcp\narp ip_conntrack_expect netlink rt_acct tcp6\ndev ip_mr_cache netstat rt_cache udp\ndev_mcast ip_mr_vif packet snmp udp6\ndev_snmp6 ip_tables_matches psched snmp6 unix\nif_inet6 ip_tables_names raw sockstat wireless\nigmp ip_tables_targets raw6 sockstat6\nigmp6 ipv6_route route softnet_stat\nip6_flowlabel mcfilter rpc stat\n--------------------------------------------------------------------------------\n以下摘要介绍此目录下文件的功能：\narp\n转储每个网络接口的arp 表中dev 包的统计\ndev\n来自网络设备的统计\ndev_mcast\n列出二层（数据链路层）多播组\nigmp\n加入的IGMP 多播组\nnetlink\nnetlink 套接口的信息\nnetstat\n网络流量的多种统计。第一行是信息头, 带有每个变量的名称。接下来的一行保存相应变量的值\nraw\n原始套接口的套接口表\nroute\n静态路由表\nrpc\n包含RPC 信息的目录rt_cache\n路由缓冲\nsnmp\nsnmp agent 的ip/icmp/tcp/udp 协议统计; 各行交替给出字段名和值\nsockstat\n列出使用的tcp/udp/raw/pac/syc_cookies 的数量\ntcp\nTCP 连接的套接口\nudp\nUDP 连接的套接口表\nunix\nUNIX 域套接口的套接口表\n--------------------------------------------------------------------------------\n示例：[root@localhost /]# cat /proc/net/route\nIface Destination Gateway Flags RefCnt Use Metric Mask MTU\nWindow IRTT\neth0 0035C2DA 00000000 0001 0 0 0 80FFFFF0\neth0 0000FEA9 00000000 0001 0 0 0 0000FFF0\neth0 00000000 0135C2DA 0003 0 0 0 00000000\n--------------------------------------------------------------------------------\n[root@localhost /]# cat /proc/net/tcp\nsl local_address rem_address st tx_queue rx_queue tr tm-&gt;when retrnsmt uid timeout inode\n0: 00000000:8000 00000000:0000 0A 00000000:00000000 00:00000000 00000000 29 0 9525 1\n0dde7500 3000 0 0 2 -1\n1: 00000000:006F 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 9484 1\n0dde79e0 3000 0 0 2 -1\n2: 0100007F:0277 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10049 1\n0a8e3a00 3000 0 0 2 -1\n3: 0100007F:14D7 00000000:0000 0A 00000000:00000000 00:00000000 00000000 99 0 9847 1\n0dde7020 3000 0 0 2 -1\n4: 0100007F:0019 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10286 1\n0a8e3520 3000 0 0 2 -1\n--------------------------------------------------------------------------------\n[root@localhost /]# cat /proc/net/arp\nIP address HW type Flags HW address Mask Device\n218.194.53.1 0x1 0x2 00:0D:BC:78:07:3F * eth0\n--------------------------------------------------------------------------------\n[root@localhost /]# cat /proc/net/udp\nsl local_address rem_address st tx_queue rx_queue tr tm-&gt;when retrnsmt uid timeout inode\n0: 00000000:8000 00000000:0000 07 00000000:00000000 00:00000000 00000000 29 0 9520 2\n0b4ef7c0\n105: 00000000:14E9 00000000:0000 07 00000000:00000000 00:00000000 00000000 99 0 10284 20b4ef040\n111: 00000000:006F 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9483 2\n0b4efcc0\n116: 00000000:02F4 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9511 2\n0b4efa40\n119: 00000000:0277 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 10050 2\n0b4ef2c0\n--------------------------------------------------------------------------------\n/proc/scsi 子目录\n此目录下包含一个列出了所有检测到的SCSI 设备的文件, 并且为每种控制器驱动程序提供一个目录, 在这个\n目录下又为已安装的此种控制器的每个实例提供一个子目录。\n示例：\n由于本人的机器没有SCSI 设备, 顾暂时无法提供示例。\n--------------------------------------------------------------------------------\n/proc/sys 子目录\n在此目录下有许多子目录 。 此目录中的许多项都可以用来调整系统的性能 。 这个目录包含信息太多, 无法介\n绍全部。只在示例中展示目录下的一些文件。\n示例：[root@localhost /]# ls /proc/sys\ndebug dev fs kernel net proc sunrpc vm\n--------------------------------------------------------------------------------\n[root@localhost ~]# ls /proc/sys/fs\naio-max-nr dentry-state file-nr lease-break-time overflowgid\naio-nr dir-notify-enable inode-nr leases-enable overflowuid\nbinfmt_misc file-max inode-state mqueue quota\n--------------------------------------------------------------------------------\n[root@localhost ~]# ls /proc/sys/kernel\nacct hotplug panic sem\ncad_pid modprobe panic_on_oops shmall\ncap-bound msgmax pid_max shmmax\ncore_pattern msgmnb print-fatal-signals shmmni\ncore_uses_pid msgmni printk sysrq\nctrl-alt-del ngroups_max printk_ratelimit tainted\ndomainname osrelease printk_ratelimit_burst threads-max\nexec-shield ostype pty vdso\nexec-shield-randomize overflowgid random version\nhostname overflowuid real-root-dev\n--------------------------------------------------------------------------------\n[root@localhost ~]# ls /proc/sys/net\ncore ethernet ipv4 ipv6 unix\n--------------------------------------------------------------------------------\n[root@localhost sys]# ls /proc/sys/vmblock_dump laptop_mode nr_pdflush_threads\ndirty_background_ratio legacy_va_layout overcommit_memory\ndirty_expire_centisecs lower_zone_protection overcommit_ratio\ndirty_ratio max_map_count page-cluster\ndirty_writeback_centisecs min_free_kbytes swappiness\nhugetlb_shm_group nr_hugepages vfs_cache_pressure\n--------------------------------------------------------------------------------\n[root@localhost sys]# ls /proc/sys/net/ipv4\nconf tcp_fack\nicmp_echo_ignore_all tcp_fin_timeout\nicmp_echo_ignore_broadcasts tcp_frto\nicmp_ignore_bogus_error_responses tcp_keepalive_intvl\nicmp_ratelimit tcp_keepalive_probes\nicmp_ratemask tcp_keepalive_time\nigmp_max_memberships tcp_low_latency\nigmp_max_msf tcp_max_orphans\ninet_peer_gc_maxtime tcp_max_syn_backlog\ninet_peer_gc_mintime tcp_max_tw_buckets\ninet_peer_maxttl tcp_mem\ninet_peer_minttl tcp_moderate_rcvbuf\ninet_peer_threshold tcp_no_metrics_save\nip_autoconfig tcp_orphan_retries\nip_conntrack_max tcp_reordering\nip_default_ttl tcp_retrans_collapse\nip_dynaddr tcp_retries1\nip_forward tcp_retries2\nipfrag_high_thresh tcp_rfc1337\nipfrag_low_thresh tcp_rmem\nipfrag_secret_interval tcp_sack\nipfrag_time tcp_stdurg\nip_local_port_range tcp_synack_retries\nip_nonlocal_bind tcp_syncookies\nip_no_pmtu_disc tcp_syn_retries\nneigh tcp_timestamps\nnetfilter tcp_tso_win_divisor\nroute tcp_tw_recycle\ntcp_abort_on_overflow tcp_tw_reuse\ntcp_adv_win_scale tcp_vegas_alpha\ntcp_app_win tcp_vegas_beta\ntcp_bic tcp_vegas_cong_avoid\ntcp_bic_fast_convergence tcp_vegas_gamma\ntcp_bic_low_window tcp_westwood\ntcp_dsack tcp_window_scalingtcp_ecn tcp_wmem\n--------------------------------------------------------------------------------\n[root@localhost sys]# cat /proc/sys/kernel/shmall\n2097152\n--------------------------------------------------------------------------------\n[root@localhost sys]# cat /proc/sys/kernel/osrelease\n2.6.9-1.667\n--------------------------------------------------------------------------------\n总结 ：/proc 文件系统包含了大量的有关当前系统状态的信息 。proc 的手册页中也有对这些文件的解释文档 。\n把文件和分析这些文件的工具产生的输出进行比较能够更加清晰地了解这些文件\n</code></pre>","excerpt":"<pre><code>Linux-proc\n\nproc 文件系统\n\n在Linux中有额外的机制可以为内核和内核模块将信息发送给进程-- /proc 文件系统。最初设计的目的是允许更方便的对进程信息进行访问（因此得名），现在它被每一个有有趣的东西报告的内核使用，例如/proc/modules 有模块的列表/proc/meminfo 有内存使用的统计表。\n</code></pre>","more":"<pre><code>　　使用proc 文件系统的方法和使用设备驱动程序非常相似--创建一个/proc 文件需要的所有信息的结构，包括任何处理函数的指针（在我们的例子中只有一个，当某人试图从/proc 文件读时调用的那一个）。然后，init_module 在内核中登记该结构而cleanup_module 注销它。\n\n　　我们使用proc_register_dynamic(这是在2.0 版中的情况，在2.2 版中如果我们将节点设置为0系统将自动为我们做到) 的原因是我们不想预先决定我们的文件的节点数字，而是为防止冲突而由内核决定它。通常的文件系统存在于磁盘上而不是内存中（/proc 在内存中），在这中情况下，节点数是是指向文件的索引节点所在的磁盘位置的指针。节点包含文件的信息（例如文件的存取权限）和指向磁盘位置或文件数据可以被找到的几个位置的指针。\n\n　　因为当文件被打开或关闭的时候不能得到调用，所以在这个模块中没有地方放置MOD_INC_USE_COUNT 和MOD_DEC_USE_COUNT，并且，如果文件被打开随后模块被移除，我们没有办法避免后果。在下一章我们会看到一个艰难的但更灵活的可以处理/proc文件的实现方式，它也可以让我们防止那个问题。\n\nhttp://www.2cto.com/os/201202/119552.html\n\nLinux 内核提供了一种通过/proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。尽管在各种硬件平台上的Linux 系统的/proc 文件系统的基本概念都是相同的，但本文只讨论基于intel x86 架构的Linux /proc 文件系统。\n\n_________________ _________________ _________________\n\n/proc --- 一个虚拟文件系统\n\n/proc 文件系统是一种内核和内核模块用来向进程(process) 发送信息的机制(所以叫做/proc)。这个伪文件系统让你可以和内核内部数据结构进行交互，获取 有关进程的有用信息，在运行中(on the fly) 改变设置(通过改变内核参数)。 与其他文件系统不同，/proc 存在于内存之中而不是硬盘上。如果你察看文件/proc/mounts (和mount 命令一样列出所有已经加载的文件系统)，你会看到其中 一行是这样的：\n\ngrep proc /proc/mounts\n/proc /proc proc rw 0 0\n\n/proc 由内核控制，没有承载/proc 的设备。因为/proc 主要存放由内核控制的状态信息，所以大部分这些信息的逻辑位置位于内核控制的内存。对/proc 进行一次&apos;ls -l&apos; 可以看到大部分文件都是0 字节大的；不过察看这些文件的时候，确实可以看到一些信息。这怎么可能？这是因为/proc 文件系统和其他常规的文件系统一样把自己注册到虚拟文件系统层(VFS) 了。然而，直到当VFS 调用它，请求文件、目录的i-node 的时候，/proc 文件系统才根据内核中的信息建立相应的文件和目录。\n\n加载proc 文件系统\n\n如果系统中还没有加载proc 文件系统，可以通过如下命令加载proc 文件系统：\n\nmount -t proc proc /proc\n上述命令将成功加载你的proc 文件系统。更多细节请阅读mount 命令的man page。\n\n察看/proc 的文件\n\n/proc 的文件可以用于访问有关内核的状态、计算机的属性、正在运行的进程的状态等信息。大部分/proc 中的文件和目录提供系统物理环境最新的信息。尽管/proc 中的文件是虚拟的，但它们仍可以使用任何文件编辑器或像&apos;more&apos;, &apos;less&apos;或&apos;cat&apos;这样的程序来查看。当编辑程序试图打开一个虚拟文件时，这个文件就通过内核中的信息被凭空地(on the fly) 创建了。这是一些我从我的系统中得到的一些有趣结果：\n\n$ ls -l /proc/cpuinfo\n-r--r--r-- 1 root root 0 Dec 25 11:01 /proc/cpuinfo\n\n$ file /proc/cpuinfo\n/proc/cpuinfo: empty\n\n$ cat /proc/cpuinfo\n\nprocessor : 0\nvendor_id : GenuineIntel\ncpu family : 6\nmodel : 8\nmodel name : Pentium III (Coppermine)\nstepping : 6\ncpu MHz : 1000.119\ncache size : 256 KB\nfdiv_bug : no\nhlt_bug : no\nsep_bug : no\nf00f_bug : no\ncoma_bug : no\nfpu : yes\nfpu_exception : yes\ncpuid level : 2\nwp : yes\nflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\ncmov pat pse36 mmx fxsr xmm\nbogomips : 1998.85\n\nprocessor : 3\nvendor_id : GenuineIntel\ncpu family : 6\nmodel : 8\nmodel name : Pentium III (Coppermine)\nstepping : 6\ncpu MHz : 1000.119\ncache size : 256 KB\nfdiv_bug : no\nhlt_bug : no\nsep_bug : no\nf00f_bug : no\ncoma_bug : no\nfpu : yes\nfpu_exception : yes\ncpuid level : 2\nwp : yes\nflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca\ncmov pat pse36 mmx fxsr xmm\nbogomips : 1992.29\n\n这是一个从双CPU 的系统中得到的结果，上述大部分的信息十分清楚地给出了这个系统的有用的硬件信息。有些/proc 的文件是经过编码的，不同的工具可以被用来解释这些编码过的信息并输出成可读的形式。这样的工具包括：&apos;top&apos;, &apos;ps&apos;, &apos;apm&apos; 等。\n\n得到有用的系统/内核信息\n\nproc 文件系统可以被用于收集有用的关于系统和运行中的内核的信息。下面是一些重要的文件：\n\n* /proc/cpuinfo - CPU 的信息(型号, 家族, 缓存大小等)\n* /proc/meminfo - 物理内存、交换空间等的信息\n* /proc/mounts - 已加载的文件系统的列表\n* /proc/devices - 可用设备的列表\n* /proc/filesystems - 被支持的文件系统\n* /proc/modules - 已加载的模块\n* /proc/version - 内核版本\n* /proc/cmdline - 系统启动时输入的内核命令行参数\n\nproc 中的文件远不止上面列出的这么多。想要进一步了解的读者可以对/proc 的每一个文件都&apos;more&apos;一下或读参考文献[1]获取更多的有关/proc 目录中的文件的信息。我建议使用&apos;more&apos;而不是&apos;cat&apos;，除非你知道这个文件很小，因为有些文件(比如kcore) 可能会非常长。\n\n有关运行中的进程的信息\n\n/proc 文件系统可以用于获取运行中的进程的信息。在/proc 中有一些编号的子目录。每个编号的目录对应一个进程id (PID)。这样，每一个运行中的进程/proc 中都有一个用它的PID 命名的目录。这些子目录中包含可以提供有关进程的状态和环境的重要细节信息的文件。让我们试着查找一个运行中的进程。\n\n$ ps -aef | grep mozilla\nroot 32558 32425 8 22:53 pts/1 00:01:23 /usr/bin/mozilla\n\n上述命令显示有一个正在运行的mozilla 进程的PID 是32558。相对应的，/proc 中应该有一个名叫32558 的目录\n\n$ ls -l /proc/32558\ntotal 0\n-r--r--r-- 1 root root 0 Dec 25 22:59 cmdline\n-r--r--r-- 1 root root 0 Dec 25 22:59 cpu\nlrwxrwxrwx 1 root root 0 Dec 25 22:59 cwd -&gt; /proc/\n-r-------- 1 root root 0 Dec 25 22:59 environ\nlrwxrwxrwx 1 root root 0 Dec 25 22:59 exe -&gt; /usr/bin/mozilla*\ndr-x------ 2 root root 0 Dec 25 22:59 fd/\n-r--r--r-- 1 root root 0 Dec 25 22:59 maps\n-rw------- 1 root root 0 Dec 25 22:59 mem\n-r--r--r-- 1 root root 0 Dec 25 22:59 mounts\nlrwxrwxrwx 1 root root 0 Dec 25 22:59 root -&gt; //\n-r--r--r-- 1 root root 0 Dec 25 22:59 stat\n-r--r--r-- 1 root root 0 Dec 25 22:59 statm\n-r--r--r-- 1 root root 0 Dec 25 22:59 status\n\n文件&quot;cmdline&quot; 包含启动进程时调用的命令行。&quot;envir&quot; 进程的环境变两。&quot;status&quot; 是进程的状态信息，包括启动进程的用户的用户ID (UID) 和组ID(GID) ，父进程ID (PPID)，还有进程当前的状态，比如&quot;Sleelping&quot;和&quot;Running&quot;。每个进程的目录都有几个符号链接，&quot;cwd&quot;是指向进程当前工作目录的符号链接，&quot;exe&quot;指向运行的进程的可执行程序，&quot;root&quot;指向被这个进程看作是根目录的目录(通常是&quot;/&quot;)。目录&quot;fd&quot;包含指向进程使用的文件描述符的链接。&quot;cpu&quot;仅在运行SMP 内核时出现，里面是按CPU 划分的进程时间。\n\n/proc/self 是一个有趣的子目录，它使得程序可以方便地使用/proc 查找本进程地信息。/proc/self 是一个链接到/proc 中访问/proc 的进程所对应的PID 的目录的符号链接。\n\n通过/proc 与内核交互\n\n上面讨论的大部分/proc 的文件是只读的。而实际上/proc 文件系统通过/proc 中可读写的文件提供了对内核的交互机制。写这些文件可以改变内核的状态，因而要慎重改动这些文件。/proc/sys 目录存放所有可读写的文件的目录，可以被用于改变内核行为。\n\n/proc/sys/kernel - 这个目录包含反通用内核行为的信息。/proc/sys/kernel/{domainname, hostname} 存放着机器/网络的域名和主机名。这些文件可以用于修改这些名字。\n\n$ hostname\nmachinename.domainname.com\n\n$ cat /proc/sys/kernel/domainname\ndomainname.com\n\n$ cat /proc/sys/kernel/hostname\nmachinename\n\n$ echo &quot;new-machinename&quot; &gt; /proc/sys/kernel/hostname\n\n$ hostname\nnew-machinename.domainname.com\n\n这样，通过修改/proc 文件系统中的文件，我们可以修改主机名。很多其他可配置的文件存在于/proc/sys/kernel/。这里不可能列出所有这些文件，读者可以自己去这个目录查看以得到更多细节信息。\n另一个可配置的目录是/proc/sys/net。这个目录中的文件可以用于修改机器/网络的网络属性。比如，简单修改一个文件，你可以在网络上瘾藏匿的计算机。\n\n$ echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n这将在网络上瘾藏你的机器，因为它不响应icmp_echo。主机将不会响应其他主机发出的ping 查询。\n\n$ ping machinename.domainname.com\nno answer from machinename.domainname.com\n\n要改回缺省设置，只要\n\n$ echo 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\n\n/proc/sys 下还有许多其它可以用于改变内核属性。读者可以通过参考文献[1], [2] 获取更多信息。\n\n结论\n\n/proc 文件系统提供了一个基于文件的Linux 内部接口。它可以用于确定系统的各种不同设备和进程的状态。对他们进行配置。因而，理解和应用有关这个文件系统的知识是理解你的Linux 系统的关键。\n\n原文：http://www.sudu.cn/info/html/edu/20070101/292381.html\n\n什么是proc文件系统\nproc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。它的目录结构如下：\n目录名称 目录内容\napm 高级电源管理信息\ncmdline 内核命令行\nCpuinfo 关于Cpu信息\nDevices 可以用到的设备（块设备/字符设备）\nDma 使用的DMA通道\nFilesystems 支持的文件系统\nInterrupts 中断的使用\nIoports I/O端口的使用\nKcore 内核核心印象\nKmsg 内核消息\nKsyms 内核符号表\nLoadavg 负载均衡\nLocks 内核锁\nMeminfo 内存信息\nMisc 杂项\nModules 加载模块列表\nMounts 加载的文件系统\nPartitions 系统识别的分区表\nRtc 实时时钟\nSlabinfo Slab池信息\nStat 全面统计状态表\nSwaps 对换空间的利用情况\nVersion 内核版本\nUptime 系统正常运行时间\n并不是所有这些目录在你的系统中都有，这取决于你的内核配置和装载的模块。另外，在/proc下还有三个很重要的目录：net，scsi和sys。Sys目录是可写的，可以通过它来访问或修改内核的参数（见下一部分），而net和scsi则依赖于内核配置。例如，如果系统不支持scsi，则scsi 目录不存在。\n除了以上介绍的这些，还有的是一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在/proc下，以进程的PID号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。Proc文件系统的名字就是由之而起。进程目录的结构如下：\n目录名称 目录内容\nCmdline 命令行参数\nEnviron 环境变量值\nFd 一个包含所有文件描述符的目录\nMem 进程的内存被利用情况\nStat 进程状态\nStatus 进程当前状态，以可读的方式显示出来\nCwd 当前工作目录的链接\nExe 指向该进程的执行命令文件\nMaps 内存映象\nStatm 进程内存状态信息\nRoot 链接此进程的root目录\n用户如果要查看系统信息，可以用cat命令。例如：\n# cat /proc/interrupts\nCPU0\n0: 8728810 XT-PIC timer\n1: 8Array5 XT-PIC keyboard\n2: 0 XT-PIC cascade\n3: 5316Array5 XT-PIC aha152x\n4: 2014133 XT-PIC serial\n5: 44401 XT-PIC pcnet_cs\n8: 2 XT-PIC rtc\n11: 8 XT-PIC i82365\n12: 182Array18 XT-PIC Mouse\n13: 1 XT-PIC fpu PS/2\n14: 1232265 XT-PIC ide0\n15: 7 XT-PIC ide1\nNMI: 0\n用户还可以实现修改内核参数。在/proc文件系统中有一个有趣的目录：/proc/sys。它不仅提供了内核信息，而且可以通过它修改内核参数，来优化你的系统。但是你必须很小心，因为可能会造成系统崩溃。最好是先找一台无关紧要的机子，调试成功后再应用到你的系统上。\n要改变内核的参数，只要用vi编辑或echo参数重定向到文件中即可。下面有一个例子：\n# cat /proc/sys/fs/file-max\n40Array6\n# echo 81Array2 &gt; /proc/sys/fs/file-max\n# cat /proc/sys/fs/file-max\n81Array2\n如果你优化了参数，则可以把它们写成添加到文件rc.local中，使它在系统启动时自动完成修改。\n/proc文件系统中网络参数\n/proc/sys/kernel\n内核共享内存限制,默认最小为4M.两个参数可以改成一样.加大.\n/proc/sys/kernel/shmall 40Array6\n/proc/sys/kernel/shmmax 33554432\n\n/proc/sys/net/ipv4/\n该目录包含的是和tcp/ip协议相关的各种参数，下面我们就对这些网络参数加以详细的说明。\nip_forward 参数类型：BOOLEAN\n0 - 关闭(默认值)\nnot 0 - 打开ip转发\n在网络本地接口之间转发数据报。该参数非常特殊，对该参数的修改将导致其它所有相关配置参数恢复其默认值(对于主机参阅RFC1122，对于路由器参见RFC1812)\n/proc/sys/net/ipv4/ip_conntrack_max 65440 (默认)\nip_default_ttl 参数类型：INTEGER\n默认值为64 。表示IP数据报的Time To Live值。\nip_no_pmtu_disc 参数类型：BOOLEAN\n关闭路径MTU探测，默认值为FALSE\nipfrag_high_thresh 参数类型：整型\n用来组装分段的IP包的最大内存量。当ipfrag_high_thresh数量的内存被分配来用来组装IP包，则IP分片处理器将丢弃数据报直到ipfrag_low_thresh数量的内存被用来组装IP包。\nipfrag_low_thresh 参数类型：整型\n参见ipfrag_high_thresh。\nipfrag_time 参数类型：整型\n保存一个IP分片在内存中的时间。\ninet_peer_threshold 参数类型：整型\nINET对端存储器某个合适值，当超过该阀值条目将被丢弃。该阀值同样决定生存时间以及废物收集通过的时间间隔。条目越多?存活期越低?GC 间隔越短\ninet_peer_minttl 参数类型：整型\n条目的最低存活期。在重组端必须要有足够的碎片(fragment)存活期。这个最低存活期必须保证缓冲池容积是否少于inet_peer_threshold。该值以jiffies为单位测量。\ninet_peer_maxttl 参数类型：整型\n条目的最大存活期。在此期限到达之后?如果缓冲池没有耗尽压力的话(例如?缓冲池中的条目数目非常少)?不使用的条目将会超时。该值以jiffies为单位测量。\ninet_peer_gc_mintime 参数类型：整型\n废物收集(GC)通过的最短间隔。这个间隔会影响到缓冲池中内存的高压力。 该值以jiffies为单位测量。\ninet_peer_gc_maxtime 参数类型：整型\n废物收集(GC)通过的最大间隔，这个间隔会影响到缓冲池中内存的低压力。 该值以jiffies为单位测量。\ntcp_syn_retries 参数类型：整型\n对于一个新建连接，内核要发送多少个SYN 连接请求才决定放弃。不应该大于255，默认值是5，对应于180秒左右。\ntcp_synack_retries 参数类型：整型\n对于远端的连接请求SYN，内核会发送SYN ＋ACK数据报，以确认收到上一个SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的SYN+ACK 数目。\ntcp_keepalive_time 参数类型：整型\n当keepalive打开的情况下，TCP发送keepalive消息的频率，默认值是2个小时。\ntcp_keepalive_probes 参数类型：整型\nTCP发送keepalive探测以确定该连接已经断开的次数，默认值是Array。\ntcp_keepalive_interval 参数类型：整型\n探测消息发送的频率，乘以tcp_keepalive_probes就得到对于从开始探测以来没有响应的连接杀除的时间。默认值为75秒，也就是没有活动的连接将在大约11分钟以后将被丢弃。\ntcp_retries1 参数类型：整型\n当出现可疑情况而必须向网络层报告这个可疑状况之前?需要进行多少次重试。最低的RFC 数值是3 ?这也是默认值?根据RTO的值大约在3秒- 8分钟之间。\ntcp_retries2 参数类型：整型\n在丢弃激活的TCP连接之前?需要进行多少次重试。RFC1122规定，该值必须大于100秒。默认值为15，根据RTO的值来决定，相当于13-30分钟，\ntcp_orphan_retries 参数类型：整型\n在近端丢弃TCP连接之前?要进行多少次重试。默认值是7 个?相当于50秒- 16分钟?视RTO 而定。如果您的系统是负载很大的web服务器?那么也许需要降低该值?这类sockets 可能会耗费大量的资源。另外参的考tcp_max_orphans 。\ntcp_fin_timeout 参数类型：整型\n对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。默认值为60 秒。过去在2.2版本的内核中是180 秒。您可以设置该值?但需要注意?如果您的机器为负载很重的web服务器?您可能要冒内存被大量无效数据报填满的风险?FIN-WAIT-2 sockets 的危险性低于FIN-WAIT-1 ?因为它们最多只吃1.5K 的内存?但是它们存在时间更长。另外参考tcp_max_orphans。\ntcp_max_tw_buckets 参数类型：整型\n系统在同时所处理的最大timewait sockets 数目。如果超过此数的话?time-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要人为的降低这个限制?不过?如果网络条件需要比默认值更多?则可以提高它(或许还要增加内存)。\ntcp_tw_recycle 参数类型：布尔\n打开快速TIME-WAIT sockets 回收。默认值是1。除非得到技术专家的建议或要求?请不要随意修改这个值。\ntcp_max_orphans 参数类型：整型\n系统所能处理不属于任何进程的TCP sockets最大数量。假如超过这个数量?那么不属于任何进程的连接会被立即reset，并同时显示警告信息。之所以要设定这个限制?纯粹为了抵御那些简单的DoS 攻击?千万不要依赖这个或是人为的降低这个限制\ntcp_abort_on_overflow 参数类型：布尔\n当守护进程太忙而不能接受新的连接，就象对方发送reset消息，默认值是false。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。\ntcp_syncookies 参数类型：整型\n只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击。默认值是false。\n注意：该选项千万不能用于那些没有收到攻击的高负载服务器，如果在日志中出现synflood消息，但是调查发现没有收到synflood攻击，而是合法用户的连接负载过高的原因，你应该调整其它参数来提高服务器性能。参考: tcp_max_syn_backlog, tcp_synack_retries, tcp_abort_on_overflow.\nsyncookie严重的违背TCP协议，不允许使用TCP扩展，可能对某些服务导致严重的性能影响(如SMTP转发)。\ntcp_stdurg 参数类型：整型\n使用TCP urg pointer 字段中的主机请求解释功能。大部份的主机都使用老旧的BSD解释，因此如果您在Linux 打开它?或会导致不能和它们正确沟通。默认值为为?FALSE\ntcp_max_syn_backlog 参数类型：整型\n对于那些依然还未获得客户端确认的连接请求?需要保存在队列中最大数目。对于超过128Mb 内存的系统?默认值是1024 ?低于128Mb 的则为128。如果服务器经常出现过载?可以尝试增加这个数字。警告?假如您将此值设为大于1024?最好修改include/net/tcp.h 里面的TCP_SYNQ_HSIZE ?以保持TCP_SYNQ_HSIZE*16 0)或者bytes-bytes/2^(-tcp_adv_win_scale)(如果tcp_adv_win_scale  128Mb 32768-61000\n0)则系统将忽略所有发送给自己的ICMP ECHO请求或那些广播地址的请求。\nicmp_destunreach_rate - 整数\nicmp_paramprob_rate - 整数\nicmp_timeexceed_rate - 整数\nicmp_echoreply_rate - 整数(not enabled per default)\n限制发向特定目标的ICMP数据报的最大速率。0表示没有任何限制，否则表示jiffies数据单位中允许发送的个数。\nicmp_ignore_bogus_error_responses - 布尔类型\n某些路由器违背RFC1122标准，其对广播帧发送伪造的响应来应答。这种违背行为通常会被以告警的方式记录在系统日志中。如果该选项设置为True，内核不会记录这种警告信息。默认值为False。\n(1) Jiffie: 内核使用的内部时间单位，在i386系统上大小为1/100s，在Alpha中为1/1024S。在/usr/include/asm/param.h中的HZ定义有特定系统的值。\nconf/interface/*:\nconf/all/*是特定的，用来修改所有接口的设置，is special and changes the settings for all interfaces.\nChange special settings per interface.\nlog_martians - 布尔类型\n记录带有不允许的地址的数据报到内核日志中。\naccept_redirects - 布尔类型\n收发接收ICMP重定向消息。对于主机来说默认为True，对于用作路由器时默认值为False。\nforwarding - 布尔类型\n在该接口打开转发功能\nmc_forwarding - 布尔类型\n是否进行多播路由。只有内核编译有CONFIG_MROUTE并且有路由服务程序在运行该参数才有效。\nproxy_arp - 布尔类型\n打开proxy arp功能。\nshared_media - 布尔类型\n发送(路由器)或接收(主机) RFC1620 共享媒体重定向。覆盖ip_secure_redirects的值。默认为True。\nsecure_redirects - 布尔类型\n仅仅接收发给默认网关列表中网关的ICMP重定向消息，默认值是TRUE。\nsend_redirects - 布尔类型\n如果是router，发送重定向消息，默认值是TRUE\nbootp_relay - 布尔类型\n接收源地址为0.b.c.d，目的地址不是本机的数据报。用来支持BOOTP转发服务进程，该进程将捕获并转发该包。默认为False，目前还没有实现。\naccept_source_route - 布尔类型\n接收带有SRR选项的数据报。对于主机来说默认为False，对于用作路由器时默认值为True。\nrp_filter 参数类型\n1 - 通过反向路径回溯进行源地址验证(在RFC1812中定义)。对于单穴主机和stub网络路由器推荐使用该选项。\n0 - 不通过反向路径回溯进行源地址验证。\n默认值为0。某些发布在启动时自动将其打开。\n/proc/sys/net/ipv4/netfilter\nip_conntrack_buckets\nip_conntrack_count\nip_conntrack_generic_timeout\nip_conntrack_icmp_timeout\nip_conntrack_log_invalid\nip_conntrack_max 65536(默认)\nip_conntrack_tcp_be_liberal\nip_conntrack_tcp_loose\nip_conntrack_tcp_max_retrans\nip_conntrack_tcp_timeout_close\nip_conntrack_tcp_timeout_close_wait\nip_conntrack_tcp_timeout_established 432000(单位为秒,5天)\nip_conntrack_tcp_timeout_fin_wait\nip_conntrack_tcp_timeout_last_ack\nip_conntrack_tcp_timeout_max_retrans\nip_conntrack_tcp_timeout_syn_recv\nip_conntrack_tcp_timeout_syn_sent\nip_conntrack_tcp_timeout_time_wait\nip_conntrack_udp_timeout\nip_conntrack_udp_timeout_stream\n\n#\n\n#\n#\n\nLinux Linux Linux Linux 中/proc /proc /proc /proc 目录下文件详解\n声明：可以自由转载本文, 但请务必保留本文的完整性。\n作者：张子坚\nemail:zhangzijian@163.com\n说明：本文所涉及示例均在fedora core3 下得到。\n--------------------------------------------------------------------------------\n/proc 文件系统下的多种文件提供的系统信息不是针对某个特定进程的, 而是能够在整个系统范围的上下文\n中使用。可以使用的文件随系统配置的变化而变化。命令procinfo 能够显示基于其中某些文件的多种系统\n信息。\n以下详细描述/proc 下的文件:\n--------------------------------------------------------------------------------\n/proc/cmdline 文件\n这个文件给出了内核启动的命令行。它和用于进程的cmdline 项非常相似。\n示例：\n[root@localhost proc]# cat cmdline\nro root=LABEL=/ rhgb quiet\n--------------------------------------------------------------------------------\n/proc/cpuinfo 文件\n这个文件提供了有关系统CPU 的多种信息。这些信息是从内核里对CPU 的测试代码中得到的。文件列出\n了CPU 的普通型号 （386,486,586,686 等 ）, 以及能得到的更多特定信息 （ 制造商, 型号和版本 ） 。 文件还包含\n了以bogomips 表示的处理器速度, 而且如果检测到CPU 的多种特性或者bug, 文件还会包含相应的标志。这\n个文件的格式为：文件由多行构成, 每行包括一个域名称, 一个冒号和一个值。\n示例：\n[root@localhost proc]# cat cpuinfo\nprocessor : 0\nvendor_id : AuthenticAMD\ncpu family : 6\nmodel : 8\nmodel name : AMD Athlon(tm) XP 1800+\nstepping : 1\ncpu MHz : 1530.165\ncache size : 256 KB\nfdiv_bug : no\nhlt_bug : no\nf00f_bug : nocoma_bug : no\nfpu : yes\nfpu_exception : yes\ncpuid level : 1\nwp : yes\nflags : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 mmx fxsr sse syscall mmxext\n3dnowext 3dnow\nbogomips : 2998.27\n--------------------------------------------------------------------------------\n/proc/devices 文件\n这个文件列出字符和块设备的主设备号, 以及分配到这些设备号的设备名称。\n示例：\n[root@localhost /]# cat /proc/devices\nCharacter devices:\n1 mem\n4 /dev/vc/0\n4 tty\n4 ttyS\n5 /dev/tty\n5 /dev/console\n5 /dev/ptmx\n6 lp\n7 vcs\n10 misc\n13 input\n14 sound\n29 fb\n36 netlink\n116 alsa\n128 ptm\n136 pts\n180 usb\nBlock devices:\n1 ramdisk\n2 fd\n3 ide0\n9 md\n22 ide1\n253 device-mapper\n254 mdp\n--------------------------------------------------------------------------------/proc/dma 文件\n这个文件列出由驱动程序保留的DMA 通道和保留它们的驱动程序名称 。casade 项供用于把次DMA 控制器\n从主控制器分出的DMA 行所使用; 这一行不能用于其它用途。\n示例：\n[root@localhost ~]# cat /proc/dma\n4: cascade\n--------------------------------------------------------------------------------\n/proc/filesystems 文件\n这个文件列出可供使用的文件系统类型, 一种类型一行 。 虽然它们通常是编入内核的文件系统类型, 但该文件\n还可以包含可加载的内核模块加入的其它文件系统类型。\n示例：\n[root@localhost proc]# cat /proc/filesystems\nnodev sysfs\nnodev rootfs\nnodev bdev\nnodev proc\nnodev sockfs\nnodev binfmt_misc\nnodev usbfs\nnodev usbdevfs\nnodev futexfs\nnodev tmpfs\nnodev pipefs\nnodev eventpollfs\nnodev devpts\next2\nnodev ramfs\nnodev hugetlbfs\niso9660\nnodev mqueue\nnodev selinuxfs\next3\nnodev rpc_pipefs\nnodev autofs\n--------------------------------------------------------------------------------\n/proc/interrupts 文件\n这个文件的每一行都有一个保留的中断 。 每行中的域有 ： 中断号, 本行中断的发生次数, 可能带有一个加号的\n域（SA_INTERRUPT 标志设置）, 以及登记这个中断的驱动程序的名字。可以在安装新硬件前, 像查看\n/proc/dma 和/proc/ioports 一样用cat 命令手工查看手头的这个文件 。 这几个文件列出了当前投入使用的资源\n（但是不包括那些没有加载驱动程序的硬件所使用的资源 ） 。\n示例：\n[root@localhost SPECS]# cat /proc/interruptsCPU0\n0: 7039406 XT-PIC timer\n1: 6533 XT-PIC i8042\n2: 0 XT-PIC cascade\n3: 0 XT-PIC uhci_hcd\n5: 108 XT-PIC VIA8233, uhci_hcd\n8: 1 XT-PIC rtc\n9: 0 XT-PIC acpi\n10: 0 XT-PIC ehci_hcd\n11: 17412 XT-PIC uhci_hcd, eth0\n12: 140314 XT-PIC i8042\n14: 37897 XT-PIC ide0\n15: 60813 XT-PIC ide1\nNMI: 0\nERR: 1\n--------------------------------------------------------------------------------\n/proc/ioports 文件\n这个文件列出了诸如磁盘驱动器, 以太网卡和声卡设备等多种设备驱动程序登记的许多I/O 端口范围。\n示例：\n[root@localhost SPECS]# cat /proc/ioports\n0000-001f : dma1\n0020-0021 : pic1\n0040-0043 : timer0\n0050-0053 : timer1\n0060-006f : keyboard\n0070-0077 : rtc\n0080-008f : dma page reg\n00a0-00a1 : pic2\n00c0-00df : dma2\n00f0-00ff : fpu\n0170-0177 : ide1\n01f0-01f7 : ide0\n0376-0376 : ide1\n0378-037a : parport0\n037b-037f : parport0\n03c0-03df : vga+\n03f6-03f6 : ide0\n03f8-03ff : serial\n0800-0803 : PM1a_EVT_BLK\n0804-0805 : PM1a_CNT_BLK\n0808-080b : PM_TMR\n0810-0815 : ACPI CPU throttle\n0820-0823 : GPE0_BLK0cf8-0cff : PCI conf1\ndc00-dcff : 0000:00:12.0\ndc00-dcff : via-rhine\ne000-e0ff : 0000:00:11.5\ne000-e0ff : VIA8233\ne400-e41f : 0000:00:10.0\ne400-e41f : uhci_hcd\ne800-e81f : 0000:00:10.1\ne800-e81f : uhci_hcd\nec00-ec1f : 0000:00:10.2\nec00-ec1f : uhci_hcd\nfc00-fc0f : 0000:00:11.1\nfc00-fc07 : ide0\nfc08-fc0f : ide1\n--------------------------------------------------------------------------------\n/proc/kcore 文件\n这个文件是系统的物理内存以core 文件格式保存的文件。例如,GDB 能用它考察内核的数据结构。它不是\n纯文本, 而是/proc 目录下为数不多的几个二进制格式的项之一。\n示例：\n暂无\n--------------------------------------------------------------------------------\n/proc/kmsg 文件\n这个文件用于检索用printk 生成的内核消息。任何时刻只能有一个具有超级用户权限的进程可以读取这个\n文件。也可以用系统调用syslog 检索这些消息。通常使用工具dmesg 或守护进程klogd 检索这些消息。\n示例：\n暂无\n--------------------------------------------------------------------------------\n/proc/ksyms 文件\n这个文件列出了已经登记的内核符号; 这些符号给出了变量或函数的地址 。 每行给出一个符号的地址, 符号名\n称以及登记这个符号的模块。程序ksyms,insmod 和kmod 使用这个文件。它还列出了正在运行的任务数,\n总任务数和最后分配的PID 。\n示例：\n暂无\n--------------------------------------------------------------------------------\n/proc/loadavg 文件\n这个文件给出以几个不同的时间间隔计算的系统平均负载, 这就如同uptime 命令显示的结果那样 。 前三个数\n字是平均负载 。 这是通过计算过去1 分钟,5 分钟,15 分钟里运行队列中的平均任务数得到的 。 随后是正在运行\n的任务数和总任务数。最后是上次使用的进程号。\n示例：[root@localhost ~]# cat /proc/loadavg\n0.11 0.16 0.14 3/126 3912\n--------------------------------------------------------------------------------\n/proc/locks 文件\n这个文件包含在打开的文件上的加锁信息。文件中的每一行描述了特定文件和文档上的加锁信息以及对文\n件施加的锁的类型。内核也可以需要时对文件施加强制性锁。\n示例：\n[root@localhost redhat]# cat /proc/locks\n1: POSIX ADVISORY READ 3822 03:0a:1067117 0 EOF\n2: POSIX ADVISORY READ 3822 03:0a:1067138 0 EOF\n3: POSIX ADVISORY WRITE 3326 03:0a:2326540 0 EOF\n4: POSIX ADVISORY WRITE 2639 03:0a:2966595 0 EOF\n5: FLOCK ADVISORY WRITE 2591 03:0a:2966586 0 EOF\n6: POSIX ADVISORY WRITE 2540 03:0a:2966578 0 EOF\n7: POSIX ADVISORY WRITE 2530 03:0a:2966579 0 EOF\n8: POSIX ADVISORY WRITE 2402 03:0a:2966563 0 EOF\n9: POSIX ADVISORY WRITE 2371 03:0a:2966561 0 EOF\n--------------------------------------------------------------------------------\n/proc/mdstat 文件\n这个文件包含了由md 设备驱动程序控制的RAID 设备信息。\n示例：\n[root@localhost ~]# cat /proc/mdstat\nPersonalities :\nunused devices: &lt;none&gt;\n--------------------------------------------------------------------------------\n/proc/meminfo 文件\n这个文件给出了内存状态的信息 。 它显示出系统中空闲内存, 已用物理内存和交换内存的总量 。 它还显示出\n内核使用的共享内存和缓冲区总量。这些信息的格式和free 命令显示的结果类似。\n示例：\n[root@localhost ~]# cat /proc/meminfo\nMemTotal: 223812 kB\nMemFree: 3764 kB\nBuffers: 9148 kB\nCached: 92112 kB\nSwapCached: 364 kB\nActive: 183640 kB\nInactive: 17196 kB\nHighTotal: 0 kB\nHighFree: 0 kB\nLowTotal: 223812 kB\nLowFree: 3764 kBSwapTotal: 626524 kB\nSwapFree: 620328 kB\nDirty: 12 kB\nWriteback: 0 kB\nMapped: 142880 kB\nSlab: 12668 kB\nCommitted_AS: 376732 kB\nPageTables: 2336 kB\nVmallocTotal: 3907576 kB\nVmallocUsed: 2968 kB\nVmallocChunk: 3904224 kB\nHugePages_Total: 0\nHugePages_Free: 0\nHugepagesize: 4096 kB\n--------------------------------------------------------------------------------\n/proc/misc 文件\n这个文件报告用内核函数misc_register 登记的设备驱动程序。\n示例：\n[root@localhost ~]# cat /proc/misc\n63 device-mapper\n175 agpgart\n135 rtc\n--------------------------------------------------------------------------------\n/proc/modules 文件\n这个文件给出可加载内核模块的信息 。lsmod 程序用这些信息显示有关模块的名称, 大小, 使用数目方面的信\n息。\n示例：\n[root@localhost /]# cat /proc/modules\nmd5 4033 1 - Live 0x10a7f000\nipv6 232577 8 - Live 0x10b0c000\nparport_pc 24705 1 - Live 0x10a8b000\nlp 11565 0 - Live 0x10a7b000\nparport 41737 2 parport_pc,lp, Live 0x10a55000\nautofs4 24005 0 - Live 0x10a74000\ni2c_dev 10433 0 - Live 0x109d2000\ni2c_core 22081 1 i2c_dev, Live 0x10a6d000\nsunrpc 160421 1 - Live 0x10a9d000\nipt_REJECT 6465 1 - Live 0x109da000\nipt_state 1857 5 - Live 0x109eb000\nip_conntrack 40693 1 ipt_state, Live 0x10a62000\niptable_filter 2753 1 - Live 0x10896000\nip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter, Live 0x109ed000dm_mod 54741 0 - Live 0x109f8000\nbutton 6481 0 - Live 0x10905000\nbattery 8517 0 - Live 0x109d6000\nac 4805 0 - Live 0x10908000\nuhci_hcd 31449 0 - Live 0x109dd000\nehci_hcd 31557 0 - Live 0x10949000\nsnd_via82xx 27237 2 - Live 0x10953000\nsnd_ac97_codec 64401 1 snd_via82xx, Live 0x10912000\nsnd_pcm_oss 47609 0 - Live 0x1093c000\nsnd_mixer_oss 17217 2 snd_pcm_oss, Live 0x1090c000\nsnd_pcm 97993 2 snd_via82xx,snd_pcm_oss, Live 0x10923000\nsnd_timer 29765 1 snd_pcm, Live 0x108ec000\nsnd_page_alloc 9673 2 snd_via82xx,snd_pcm, Live 0x108bd000\ngameport 4801 1 snd_via82xx, Live 0x108a6000\nsnd_mpu401_uart 8769 1 snd_via82xx, Live 0x108b9000\nsnd_rawmidi 26725 1 snd_mpu401_uart, Live 0x108e4000\nsnd_seq_device 8137 1 snd_rawmidi, Live 0x1083b000\nsnd 54053 11\nsnd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\nd_seq_device, Live 0x108f6000\nsoundcore 9889 2 snd, Live 0x1089b000\nvia_rhine 23497 0 - Live 0x1089f000\nmii 4673 1 via_rhine, Live 0x10893000\nfloppy 58609 0 - Live 0x108a9000\next3 116809 1 - Live 0x10875000\njbd 74969 1 ext3, Live 0x10861000\nlsmod 命令显示结果如下：\n[root@localhost /]# lsmod\nModule Size Used by\nmd5 4033 1\nipv6 232577 8\nparport_pc 24705 1\nlp 11565 0\nparport 41737 2 parport_pc,lp\nautofs4 24005 0\ni2c_dev 10433 0\ni2c_core 22081 1 i2c_dev\nsunrpc 160421 1\nipt_REJECT 6465 1\nipt_state 1857 5\nip_conntrack 40693 1 ipt_state\niptable_filter 2753 1ip_tables 16193 3 ipt_REJECT,ipt_state,iptable_filter\ndm_mod 54741 0\nbutton 6481 0\nbattery 8517 0\nac 4805 0\nuhci_hcd 31449 0\nehci_hcd 31557 0\nsnd_via82xx 27237 2\nsnd_ac97_codec 64401 1 snd_via82xx\nsnd_pcm_oss 47609 0\nsnd_mixer_oss 17217 2 snd_pcm_oss\nsnd_pcm 97993 2 snd_via82xx,snd_pcm_oss\nsnd_timer 29765 1 snd_pcm\nsnd_page_alloc 9673 2 snd_via82xx,snd_pcm\ngameport 4801 1 snd_via82xx\nsnd_mpu401_uart 8769 1 snd_via82xx\nsnd_rawmidi 26725 1 snd_mpu401_uart\nsnd_seq_device 8137 1 snd_rawmidi\nsnd 54053 11\nsnd_via82xx,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_timer,snd_mpu401_uart,snd_rawmidi,sn\nd_seq_device\nsoundcore 9889 2 snd\nvia_rhine 23497 0\nmii 4673 1 via_rhine\nfloppy 58609 0\next3 116809 1\njbd 74969 1 ext3\n--------------------------------------------------------------------------------\n/proc/mounts 文件\n这个文件以/etc/mtab 文件的格式给出当前系统所安装的文件系统信息。这个文件也能反映出任何手工安装\n从而在/etc/mtab 文件中没有包含的文件系统。\n示例：\n[root@localhost /]# cat /proc/mounts\nrootfs / rootfs rw 0 0\n/proc /proc proc rw,nodiratime 0 0\nnone /dev tmpfs rw 0 0\n/dev/root / ext3 rw 0 0\nnone /dev tmpfs rw 0 0\nnone /selinux selinuxfs rw 0 0\n/proc /proc proc rw,nodiratime 0 0\n/proc/bus/usb /proc/bus/usb usbfs rw 0 0\n/sys /sys sysfs rw 0 0none /dev/pts devpts rw 0 0\nnone /dev/shm tmpfs rw 0 0\nnone /proc/sys/fs/binfmt_misc binfmt_misc rw 0 0\nsunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw 0 0\n--------------------------------------------------------------------------------\n/proc/pci 文件\n这个文件给出PCI 设备的信息。用它可以方便地诊断PCI 问题。你可以从这个文件中检索到的信息包括诸\n如IDE 接口或USB 控制器这样的设备, 总线, 设备和功能编号, 设备延迟以及IRQ 编号。\n示例：\n[root@localhost /]# cat /proc/pci\nPCI devices found:\nBus 0, device 0, function 0:\nClass 0600: PCI device 1106:3116 (rev 0).\nMaster Capable. Latency=8.\nPrefetchable 32 bit memory at 0xe0000000 [0xe7ffffff].\nBus 0, device 1, function 0:\nClass 0604: PCI device 1106:b091 (rev 0).\nMaster Capable. No bursts. Min Gnt=12.\nBus 0, device 16, function 2:\nClass 0c03: PCI device 1106:3038 (rev 12.\nIRQ 5.\nMaster Capable. Latency=32.\nI/O at 0xec00 [0xec1f].\nBus 0, device 16, function 1:\nClass 0c03: PCI device 1106:3038 (rev 12.\nIRQ 3.\nMaster Capable. Latency=32.\nI/O at 0xe800 [0xe81f].\nBus 0, device 16, function 0:\nClass 0c03: PCI device 1106:3038 (rev 12.\nIRQ 11.\nMaster Capable. Latency=32.\nI/O at 0xe400 [0xe41f].\nBus 0, device 16, function 3:\nClass 0c03: PCI device 1106:3104 (rev 130).\nIRQ 10.\nMaster Capable. Latency=32.\nNon-prefetchable 32 bit memory at 0xdfffff00 [0xdfffffff].\nBus 0, device 17, function 0:\nClass 0601: PCI device 1106:3177 (rev 0).\nBus 0, device 17, function 1:Class 0101: PCI device 1106:0571 (rev 6).\nIRQ 255.\nMaster Capable. Latency=32.\nI/O at 0xfc00 [0xfc0f].\nBus 0, device 17, function 5:\nClass 0401: PCI device 1106:3059 (rev 80).\nIRQ 5.\nI/O at 0xe000 [0xe0ff].\nBus 0, device 18, function 0:\nClass 0200: PCI device 1106:3065 (rev 116).\nIRQ 11.\nMaster Capable. Latency=32\\. Min Gnt=3.Max Lat=8.\nI/O at 0xdc00 [0xdcff].\nNon-prefetchable 32 bit memory at 0xdffffe00 [0xdffffeff].\nBus 1, device 0, function 0:\nClass 0300: PCI device 5333:8d04 (rev 0).\nIRQ 11.\nMaster Capable. Latency=32\\. Min Gnt=4.Max Lat=255.\nNon-prefetchable 32 bit memory at 0xdfe80000 [0xdfefffff].\nPrefetchable 32 bit memory at 0xd0000000 [0xd7ffffff].\n--------------------------------------------------------------------------------\n/proc/stat 文件\n这个文件包含的信息有CPU 利用率, 磁盘, 内存页, 内存对换, 全部中断, 接触开关以及赏赐自举时间（自1970\n年1 月1 日起的秒数 ） 。\n示例：\n[root@localhost /]# cat /proc/stat\ncpu 31994 3898 7161 381600 15254 451 0\ncpu0 31994 3898 7161 381600 15254 451 0\nintr 4615930 4404290 3364 0 0 12 0 7 0 2 0 0 12618 112114 0 44142 39381\nctxt 1310498\nbtime 1148891913\nprocesses 4249\nprocs_running 4\nprocs_blocked 0\n--------------------------------------------------------------------------------\n/proc/uptime 文件\n这个文件给出自从上次系统自举以来的秒数, 以及其中有多少秒处于空闲 。 这主要供uptime 程序使用 。 比较\n这两个数字能够告诉你长期来看CPU 周期浪费的比例。\n示例：\n[root@localhost /]# cat /proc/uptime\n4477.04 4021.10--------------------------------------------------------------------------------\n/proc/version 文件\n这个文件只有一行内容, 说明正在运行的内核版本。可以用标准的编程方法进行分析获得所需的系统信息 。\n示例：\n[root@localhost /]# cat /proc/version\nLinux version 2.6.9-1.667 ( bhcompile@tweety.build.redhat.com ) (gcc version 3.4.2 20041017 (Red Hat\n3.4.2-6.fc3)) #1 Tue Nov 2 14:41:25 EST 2004\n--------------------------------------------------------------------------------\n/proc/net 子目录\n此目录下的文件描述或修改了联网代码的行为。可以通过使用 arp,netstat,route 和ipfwadm 命令设置或查询\n这些特殊文件中的许多文件。\n示例：\n[root@localhost /]# ls /proc/net\nanycast6 ip_conntrack mcfilter6 rt6_stats tcp\narp ip_conntrack_expect netlink rt_acct tcp6\ndev ip_mr_cache netstat rt_cache udp\ndev_mcast ip_mr_vif packet snmp udp6\ndev_snmp6 ip_tables_matches psched snmp6 unix\nif_inet6 ip_tables_names raw sockstat wireless\nigmp ip_tables_targets raw6 sockstat6\nigmp6 ipv6_route route softnet_stat\nip6_flowlabel mcfilter rpc stat\n--------------------------------------------------------------------------------\n以下摘要介绍此目录下文件的功能：\narp\n转储每个网络接口的arp 表中dev 包的统计\ndev\n来自网络设备的统计\ndev_mcast\n列出二层（数据链路层）多播组\nigmp\n加入的IGMP 多播组\nnetlink\nnetlink 套接口的信息\nnetstat\n网络流量的多种统计。第一行是信息头, 带有每个变量的名称。接下来的一行保存相应变量的值\nraw\n原始套接口的套接口表\nroute\n静态路由表\nrpc\n包含RPC 信息的目录rt_cache\n路由缓冲\nsnmp\nsnmp agent 的ip/icmp/tcp/udp 协议统计; 各行交替给出字段名和值\nsockstat\n列出使用的tcp/udp/raw/pac/syc_cookies 的数量\ntcp\nTCP 连接的套接口\nudp\nUDP 连接的套接口表\nunix\nUNIX 域套接口的套接口表\n--------------------------------------------------------------------------------\n示例：[root@localhost /]# cat /proc/net/route\nIface Destination Gateway Flags RefCnt Use Metric Mask MTU\nWindow IRTT\neth0 0035C2DA 00000000 0001 0 0 0 80FFFFF0\neth0 0000FEA9 00000000 0001 0 0 0 0000FFF0\neth0 00000000 0135C2DA 0003 0 0 0 00000000\n--------------------------------------------------------------------------------\n[root@localhost /]# cat /proc/net/tcp\nsl local_address rem_address st tx_queue rx_queue tr tm-&gt;when retrnsmt uid timeout inode\n0: 00000000:8000 00000000:0000 0A 00000000:00000000 00:00000000 00000000 29 0 9525 1\n0dde7500 3000 0 0 2 -1\n1: 00000000:006F 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 9484 1\n0dde79e0 3000 0 0 2 -1\n2: 0100007F:0277 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10049 1\n0a8e3a00 3000 0 0 2 -1\n3: 0100007F:14D7 00000000:0000 0A 00000000:00000000 00:00000000 00000000 99 0 9847 1\n0dde7020 3000 0 0 2 -1\n4: 0100007F:0019 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0 0 10286 1\n0a8e3520 3000 0 0 2 -1\n--------------------------------------------------------------------------------\n[root@localhost /]# cat /proc/net/arp\nIP address HW type Flags HW address Mask Device\n218.194.53.1 0x1 0x2 00:0D:BC:78:07:3F * eth0\n--------------------------------------------------------------------------------\n[root@localhost /]# cat /proc/net/udp\nsl local_address rem_address st tx_queue rx_queue tr tm-&gt;when retrnsmt uid timeout inode\n0: 00000000:8000 00000000:0000 07 00000000:00000000 00:00000000 00000000 29 0 9520 2\n0b4ef7c0\n105: 00000000:14E9 00000000:0000 07 00000000:00000000 00:00000000 00000000 99 0 10284 20b4ef040\n111: 00000000:006F 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9483 2\n0b4efcc0\n116: 00000000:02F4 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 9511 2\n0b4efa40\n119: 00000000:0277 00000000:0000 07 00000000:00000000 00:00000000 00000000 0 0 10050 2\n0b4ef2c0\n--------------------------------------------------------------------------------\n/proc/scsi 子目录\n此目录下包含一个列出了所有检测到的SCSI 设备的文件, 并且为每种控制器驱动程序提供一个目录, 在这个\n目录下又为已安装的此种控制器的每个实例提供一个子目录。\n示例：\n由于本人的机器没有SCSI 设备, 顾暂时无法提供示例。\n--------------------------------------------------------------------------------\n/proc/sys 子目录\n在此目录下有许多子目录 。 此目录中的许多项都可以用来调整系统的性能 。 这个目录包含信息太多, 无法介\n绍全部。只在示例中展示目录下的一些文件。\n示例：[root@localhost /]# ls /proc/sys\ndebug dev fs kernel net proc sunrpc vm\n--------------------------------------------------------------------------------\n[root@localhost ~]# ls /proc/sys/fs\naio-max-nr dentry-state file-nr lease-break-time overflowgid\naio-nr dir-notify-enable inode-nr leases-enable overflowuid\nbinfmt_misc file-max inode-state mqueue quota\n--------------------------------------------------------------------------------\n[root@localhost ~]# ls /proc/sys/kernel\nacct hotplug panic sem\ncad_pid modprobe panic_on_oops shmall\ncap-bound msgmax pid_max shmmax\ncore_pattern msgmnb print-fatal-signals shmmni\ncore_uses_pid msgmni printk sysrq\nctrl-alt-del ngroups_max printk_ratelimit tainted\ndomainname osrelease printk_ratelimit_burst threads-max\nexec-shield ostype pty vdso\nexec-shield-randomize overflowgid random version\nhostname overflowuid real-root-dev\n--------------------------------------------------------------------------------\n[root@localhost ~]# ls /proc/sys/net\ncore ethernet ipv4 ipv6 unix\n--------------------------------------------------------------------------------\n[root@localhost sys]# ls /proc/sys/vmblock_dump laptop_mode nr_pdflush_threads\ndirty_background_ratio legacy_va_layout overcommit_memory\ndirty_expire_centisecs lower_zone_protection overcommit_ratio\ndirty_ratio max_map_count page-cluster\ndirty_writeback_centisecs min_free_kbytes swappiness\nhugetlb_shm_group nr_hugepages vfs_cache_pressure\n--------------------------------------------------------------------------------\n[root@localhost sys]# ls /proc/sys/net/ipv4\nconf tcp_fack\nicmp_echo_ignore_all tcp_fin_timeout\nicmp_echo_ignore_broadcasts tcp_frto\nicmp_ignore_bogus_error_responses tcp_keepalive_intvl\nicmp_ratelimit tcp_keepalive_probes\nicmp_ratemask tcp_keepalive_time\nigmp_max_memberships tcp_low_latency\nigmp_max_msf tcp_max_orphans\ninet_peer_gc_maxtime tcp_max_syn_backlog\ninet_peer_gc_mintime tcp_max_tw_buckets\ninet_peer_maxttl tcp_mem\ninet_peer_minttl tcp_moderate_rcvbuf\ninet_peer_threshold tcp_no_metrics_save\nip_autoconfig tcp_orphan_retries\nip_conntrack_max tcp_reordering\nip_default_ttl tcp_retrans_collapse\nip_dynaddr tcp_retries1\nip_forward tcp_retries2\nipfrag_high_thresh tcp_rfc1337\nipfrag_low_thresh tcp_rmem\nipfrag_secret_interval tcp_sack\nipfrag_time tcp_stdurg\nip_local_port_range tcp_synack_retries\nip_nonlocal_bind tcp_syncookies\nip_no_pmtu_disc tcp_syn_retries\nneigh tcp_timestamps\nnetfilter tcp_tso_win_divisor\nroute tcp_tw_recycle\ntcp_abort_on_overflow tcp_tw_reuse\ntcp_adv_win_scale tcp_vegas_alpha\ntcp_app_win tcp_vegas_beta\ntcp_bic tcp_vegas_cong_avoid\ntcp_bic_fast_convergence tcp_vegas_gamma\ntcp_bic_low_window tcp_westwood\ntcp_dsack tcp_window_scalingtcp_ecn tcp_wmem\n--------------------------------------------------------------------------------\n[root@localhost sys]# cat /proc/sys/kernel/shmall\n2097152\n--------------------------------------------------------------------------------\n[root@localhost sys]# cat /proc/sys/kernel/osrelease\n2.6.9-1.667\n--------------------------------------------------------------------------------\n总结 ：/proc 文件系统包含了大量的有关当前系统状态的信息 。proc 的手册页中也有对这些文件的解释文档 。\n把文件和分析这些文件的工具产生的输出进行比较能够更加清晰地了解这些文件\n</code></pre>"},{"title":"mysql 5.7 相关错误解决","date":"2016-08-29T06:31:08.000Z","_content":"\n在使用备份工具备份到时候报错\n\nTable 'performance_schema.session_variables' doesn't exist\n\n解决方法\n\n使用root账户登录\n\nmysql&gt; set @@global.show_compatibility_56=ON;\n\n搞定！\n","source":"_posts/old_post_wp/mysql 5.7 相关错误解决.md","raw":"---\ntitle: mysql 5.7 相关错误解决\ntags:\n  - mysql\n  - errors\ncategories:\n  - Docs\ndate: 2016-08-29 14:31:08\npermalink: mysql7-errors-0\n---\n\n在使用备份工具备份到时候报错\n\nTable 'performance_schema.session_variables' doesn't exist\n\n解决方法\n\n使用root账户登录\n\nmysql&gt; set @@global.show_compatibility_56=ON;\n\n搞定！\n","slug":"mysql7-errors-0","published":1,"updated":"2016-10-25T08:42:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbk50040uyxur8woijz8","content":"<p>在使用备份工具备份到时候报错</p>\n<p>Table ‘performance_schema.session_variables’ doesn’t exist</p>\n<p>解决方法</p>\n<p>使用root账户登录</p>\n<p>mysql&gt; set @@global.show_compatibility_56=ON;</p>\n<p>搞定！</p>\n","excerpt":"","more":"<p>在使用备份工具备份到时候报错</p>\n<p>Table ‘performance_schema.session_variables’ doesn’t exist</p>\n<p>解决方法</p>\n<p>使用root账户登录</p>\n<p>mysql&gt; set @@global.show_compatibility_56=ON;</p>\n<p>搞定！</p>\n"},{"title":"mysql单实例安装配置","id":"308","date":"2015-12-16T02:58:09.000Z","_content":"\nmysql发布的版本\nalpha beta RC GA\n\n升级版本过程\n先评估版本，导出SQL，安装新版本，导入SQL\n\n主流版本\n5.5\n选择版本\n选择发布6个月左右的没有大的bug修复的GA版本\nmysql安装方法\n1，yum\n对mysql要求不太高的公司使用\n*大公司将编译好的软件打包成rpm包，搭建yum仓库，\n2，常规方式编译安装\n3，**采用cmake方式编译安装MYSQL\n4采用二进制方式免编译安装MySQL\ncmake方法介绍\n<!--more-->\n\ncmake软件\n<pre class=\"lang:sh decode:true \">wget http://file.inpeace.cn/sqllearn/cmake-2.8.8.tar.gz\ntar xf cmake-2.8.8.tar.gz\ncd cmake-2.8.8\n./configure</pre>\n等输出以下结果的时候\nbootstrapped. Now run gmake.\n执行\n<pre class=\"lang:sh decode:true  \">make &amp;&amp; make install\n完成后执行\ncd ../</pre>\n准备编译mysql5.5\n<pre class=\"lang:sh decode:true \">**依赖包\nyum install ncurses-devel -y\n\n下载mysql5.5\nwget http://file.inpeace.cn/sqllearn/mysql-5.5.32.tar.gz</pre>\n创建用户和组\n<pre class=\"lang:sh decode:true \">groupadd mysql\nuseradd mysql -s /sbin/nologin -M -g mysql</pre>\n解压编译MySQL\n<pre class=\"lang:sh decode:true \">tar zxf mysql-5.5.32.tar.gz\ncd mysql-5.5.32\n\ncmake . -DCMAKE_INSTALL_PREFIX=/apps/mysql-5.5.32 \\\n-DMYSQL_DATADIR=/apps/mysql-5.5.32/data \\\n-DMYSQL_UNIX_ADDR=/apps/mysql-5.5.32/tmp/mysql.sock \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci \\\n-DEXTRA_CHARSETS=gbk,gb2312,utf8,ascii \\\n-DENABLED_LOCAL_INFILE=ON \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_FEDERATED_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_PARTITION_STORAGE_ENGINE=1 \\\n-DWITH_FAST_MUTEXES=1 \\\n-DWITH_ZLIB=bundled \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_READLINE=1 \\\n-DWITH_EMBEDDED_SERVER=1 \\\n-DWITH_DEBUG=0</pre>\n编译安装\n<pre class=\"lang:sh decode:true \">make &amp;&amp; make install</pre>\n设置环境变量\n<pre class=\"lang:sh decode:true \">echo 'export PATH=\"/apps/mysql-5.5.32/bin:$PATH\"' &gt;&gt;/etc/profile\nsource /etc/profile</pre>\n链接\n<pre class=\"lang:sh decode:true \">ln -s /apps/mysql-5.5.32 /apps/mysql\n</pre>\n权限\n<pre class=\"lang:sh decode:true \">chown -R mysql:mysql /apps/mysql-5.5.32/\nchmod -R 1777 /tmp/\n</pre>\n标准单实例\n初始化\n<pre class=\"lang:sh decode:true \">cd /apps/mysql/scripts/\n./mysql_install_db --basedir=/apps/mysql --datadir=/apps/mysql/data/ --user=mysql\n</pre>\n初始化成功的输出：\n<pre class=\"lang:sh decode:true \">To start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n**\n/apps/mysql/bin/mysqladmin -u root password 'new-password'\n/apps/mysql/bin/mysqladmin -u root -h mysql password 'new-password'\n\nAlternatively you can run:\n/apps/mysql/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default. This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\n\nYou can start the MySQL daemon with:\ncd /apps/mysql ; /apps/mysql/bin/mysqld_safe &amp;amp;\n\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /apps/mysql/mysql-test ; perl mysql-test-run.pl</pre>\n复制配置文件\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/my-small.cnf /etc/my.cnf</pre>\n复制启动脚本\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/mysql.server /etc/init.d/mysqld</pre>\n添加权限\n<pre class=\"lang:sh decode:true \">chmod +x /etc/init.d/mysqld</pre>\n启动\n<pre class=\"lang:sh decode:true \">/etc/init.d/mysqld start</pre>\n设置开机启动\n<pre class=\"lang:sh decode:true \">chkconfig mysqld on</pre>\n查看端口\n<pre class=\"lang:sh decode:true \">netstat -tunlp|grep 3306\nlsof -i :3306</pre>\n","source":"_posts/old_post_wp/mysql单实例安装配置.md","raw":"---\ntitle: mysql单实例安装配置\ntags:\n  - linux\n  - mysql\n  - config\nid: 308\ncategories:\n  - Docs\ndate: 2015-12-16 10:58:09\npermalink: mysql-single-0\n---\n\nmysql发布的版本\nalpha beta RC GA\n\n升级版本过程\n先评估版本，导出SQL，安装新版本，导入SQL\n\n主流版本\n5.5\n选择版本\n选择发布6个月左右的没有大的bug修复的GA版本\nmysql安装方法\n1，yum\n对mysql要求不太高的公司使用\n*大公司将编译好的软件打包成rpm包，搭建yum仓库，\n2，常规方式编译安装\n3，**采用cmake方式编译安装MYSQL\n4采用二进制方式免编译安装MySQL\ncmake方法介绍\n<!--more-->\n\ncmake软件\n<pre class=\"lang:sh decode:true \">wget http://file.inpeace.cn/sqllearn/cmake-2.8.8.tar.gz\ntar xf cmake-2.8.8.tar.gz\ncd cmake-2.8.8\n./configure</pre>\n等输出以下结果的时候\nbootstrapped. Now run gmake.\n执行\n<pre class=\"lang:sh decode:true  \">make &amp;&amp; make install\n完成后执行\ncd ../</pre>\n准备编译mysql5.5\n<pre class=\"lang:sh decode:true \">**依赖包\nyum install ncurses-devel -y\n\n下载mysql5.5\nwget http://file.inpeace.cn/sqllearn/mysql-5.5.32.tar.gz</pre>\n创建用户和组\n<pre class=\"lang:sh decode:true \">groupadd mysql\nuseradd mysql -s /sbin/nologin -M -g mysql</pre>\n解压编译MySQL\n<pre class=\"lang:sh decode:true \">tar zxf mysql-5.5.32.tar.gz\ncd mysql-5.5.32\n\ncmake . -DCMAKE_INSTALL_PREFIX=/apps/mysql-5.5.32 \\\n-DMYSQL_DATADIR=/apps/mysql-5.5.32/data \\\n-DMYSQL_UNIX_ADDR=/apps/mysql-5.5.32/tmp/mysql.sock \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci \\\n-DEXTRA_CHARSETS=gbk,gb2312,utf8,ascii \\\n-DENABLED_LOCAL_INFILE=ON \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_FEDERATED_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_PARTITION_STORAGE_ENGINE=1 \\\n-DWITH_FAST_MUTEXES=1 \\\n-DWITH_ZLIB=bundled \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_READLINE=1 \\\n-DWITH_EMBEDDED_SERVER=1 \\\n-DWITH_DEBUG=0</pre>\n编译安装\n<pre class=\"lang:sh decode:true \">make &amp;&amp; make install</pre>\n设置环境变量\n<pre class=\"lang:sh decode:true \">echo 'export PATH=\"/apps/mysql-5.5.32/bin:$PATH\"' &gt;&gt;/etc/profile\nsource /etc/profile</pre>\n链接\n<pre class=\"lang:sh decode:true \">ln -s /apps/mysql-5.5.32 /apps/mysql\n</pre>\n权限\n<pre class=\"lang:sh decode:true \">chown -R mysql:mysql /apps/mysql-5.5.32/\nchmod -R 1777 /tmp/\n</pre>\n标准单实例\n初始化\n<pre class=\"lang:sh decode:true \">cd /apps/mysql/scripts/\n./mysql_install_db --basedir=/apps/mysql --datadir=/apps/mysql/data/ --user=mysql\n</pre>\n初始化成功的输出：\n<pre class=\"lang:sh decode:true \">To start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n**\n/apps/mysql/bin/mysqladmin -u root password 'new-password'\n/apps/mysql/bin/mysqladmin -u root -h mysql password 'new-password'\n\nAlternatively you can run:\n/apps/mysql/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default. This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\n\nYou can start the MySQL daemon with:\ncd /apps/mysql ; /apps/mysql/bin/mysqld_safe &amp;amp;\n\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /apps/mysql/mysql-test ; perl mysql-test-run.pl</pre>\n复制配置文件\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/my-small.cnf /etc/my.cnf</pre>\n复制启动脚本\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/mysql.server /etc/init.d/mysqld</pre>\n添加权限\n<pre class=\"lang:sh decode:true \">chmod +x /etc/init.d/mysqld</pre>\n启动\n<pre class=\"lang:sh decode:true \">/etc/init.d/mysqld start</pre>\n设置开机启动\n<pre class=\"lang:sh decode:true \">chkconfig mysqld on</pre>\n查看端口\n<pre class=\"lang:sh decode:true \">netstat -tunlp|grep 3306\nlsof -i :3306</pre>\n","slug":"mysql-single-0","published":1,"updated":"2016-10-25T08:43:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbki0043uyxu8uz1h2qr","content":"<p>mysql发布的版本<br>alpha beta RC GA</p>\n<p>升级版本过程<br>先评估版本，导出SQL，安装新版本，导入SQL</p>\n<p>主流版本<br>5.5<br>选择版本<br>选择发布6个月左右的没有大的bug修复的GA版本<br>mysql安装方法<br>1，yum<br>对mysql要求不太高的公司使用<br><em>大公司将编译好的软件打包成rpm包，搭建yum仓库，<br>2，常规方式编译安装<br>3，*</em>采用cmake方式编译安装MYSQL<br>4采用二进制方式免编译安装MySQL<br>cmake方法介绍<br><a id=\"more\"></a></p>\n<p>cmake软件</p>\n<pre class=\"lang:sh decode:true \">wget http://file.inpeace.cn/sqllearn/cmake-2.8.8.tar.gz\ntar xf cmake-2.8.8.tar.gz\ncd cmake-2.8.8\n./configure</pre>\n等输出以下结果的时候\nbootstrapped. Now run gmake.\n执行\n<pre class=\"lang:sh decode:true  \">make &amp;&amp; make install\n完成后执行\ncd ../</pre>\n准备编译mysql5.5\n<pre class=\"lang:sh decode:true \">**依赖包\nyum install ncurses-devel -y\n\n下载mysql5.5\nwget http://file.inpeace.cn/sqllearn/mysql-5.5.32.tar.gz</pre>\n创建用户和组\n<pre class=\"lang:sh decode:true \">groupadd mysql\nuseradd mysql -s /sbin/nologin -M -g mysql</pre>\n解压编译MySQL\n<pre class=\"lang:sh decode:true \">tar zxf mysql-5.5.32.tar.gz\ncd mysql-5.5.32\n\ncmake . -DCMAKE_INSTALL_PREFIX=/apps/mysql-5.5.32 \\\n-DMYSQL_DATADIR=/apps/mysql-5.5.32/data \\\n-DMYSQL_UNIX_ADDR=/apps/mysql-5.5.32/tmp/mysql.sock \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci \\\n-DEXTRA_CHARSETS=gbk,gb2312,utf8,ascii \\\n-DENABLED_LOCAL_INFILE=ON \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_FEDERATED_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_PARTITION_STORAGE_ENGINE=1 \\\n-DWITH_FAST_MUTEXES=1 \\\n-DWITH_ZLIB=bundled \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_READLINE=1 \\\n-DWITH_EMBEDDED_SERVER=1 \\\n-DWITH_DEBUG=0</pre>\n编译安装\n<pre class=\"lang:sh decode:true \">make &amp;&amp; make install</pre>\n设置环境变量\n<pre class=\"lang:sh decode:true \">echo 'export PATH=\"/apps/mysql-5.5.32/bin:$PATH\"' &gt;&gt;/etc/profile\nsource /etc/profile</pre>\n链接\n<pre class=\"lang:sh decode:true \">ln -s /apps/mysql-5.5.32 /apps/mysql\n</pre>\n权限\n<pre class=\"lang:sh decode:true \">chown -R mysql:mysql /apps/mysql-5.5.32/\nchmod -R 1777 /tmp/\n</pre>\n标准单实例\n初始化\n<pre class=\"lang:sh decode:true \">cd /apps/mysql/scripts/\n./mysql_install_db --basedir=/apps/mysql --datadir=/apps/mysql/data/ --user=mysql\n</pre>\n初始化成功的输出：\n<pre class=\"lang:sh decode:true \">To start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n**\n/apps/mysql/bin/mysqladmin -u root password 'new-password'\n/apps/mysql/bin/mysqladmin -u root -h mysql password 'new-password'\n\nAlternatively you can run:\n/apps/mysql/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default. This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\n\nYou can start the MySQL daemon with:\ncd /apps/mysql ; /apps/mysql/bin/mysqld_safe &amp;amp;\n\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /apps/mysql/mysql-test ; perl mysql-test-run.pl</pre>\n复制配置文件\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/my-small.cnf /etc/my.cnf</pre>\n复制启动脚本\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/mysql.server /etc/init.d/mysqld</pre>\n添加权限\n<pre class=\"lang:sh decode:true \">chmod +x /etc/init.d/mysqld</pre>\n启动\n<pre class=\"lang:sh decode:true \">/etc/init.d/mysqld start</pre>\n设置开机启动\n<pre class=\"lang:sh decode:true \">chkconfig mysqld on</pre>\n查看端口\n<pre class=\"lang:sh decode:true \">netstat -tunlp|grep 3306\nlsof -i :3306</pre>\n","excerpt":"<p>mysql发布的版本<br>alpha beta RC GA</p>\n<p>升级版本过程<br>先评估版本，导出SQL，安装新版本，导入SQL</p>\n<p>主流版本<br>5.5<br>选择版本<br>选择发布6个月左右的没有大的bug修复的GA版本<br>mysql安装方法<br>1，yum<br>对mysql要求不太高的公司使用<br><em>大公司将编译好的软件打包成rpm包，搭建yum仓库，<br>2，常规方式编译安装<br>3，*</em>采用cmake方式编译安装MYSQL<br>4采用二进制方式免编译安装MySQL<br>cmake方法介绍<br>","more":"</p>\n<p>cmake软件</p>\n<pre class=\"lang:sh decode:true \">wget http://file.inpeace.cn/sqllearn/cmake-2.8.8.tar.gz\ntar xf cmake-2.8.8.tar.gz\ncd cmake-2.8.8\n./configure</pre>\n等输出以下结果的时候\nbootstrapped. Now run gmake.\n执行\n<pre class=\"lang:sh decode:true  \">make &amp;&amp; make install\n完成后执行\ncd ../</pre>\n准备编译mysql5.5\n<pre class=\"lang:sh decode:true \">**依赖包\nyum install ncurses-devel -y\n\n下载mysql5.5\nwget http://file.inpeace.cn/sqllearn/mysql-5.5.32.tar.gz</pre>\n创建用户和组\n<pre class=\"lang:sh decode:true \">groupadd mysql\nuseradd mysql -s /sbin/nologin -M -g mysql</pre>\n解压编译MySQL\n<pre class=\"lang:sh decode:true \">tar zxf mysql-5.5.32.tar.gz\ncd mysql-5.5.32\n\ncmake . -DCMAKE_INSTALL_PREFIX=/apps/mysql-5.5.32 \\\n-DMYSQL_DATADIR=/apps/mysql-5.5.32/data \\\n-DMYSQL_UNIX_ADDR=/apps/mysql-5.5.32/tmp/mysql.sock \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci \\\n-DEXTRA_CHARSETS=gbk,gb2312,utf8,ascii \\\n-DENABLED_LOCAL_INFILE=ON \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_FEDERATED_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \\\n-DWITHOUT_PARTITION_STORAGE_ENGINE=1 \\\n-DWITH_FAST_MUTEXES=1 \\\n-DWITH_ZLIB=bundled \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_READLINE=1 \\\n-DWITH_EMBEDDED_SERVER=1 \\\n-DWITH_DEBUG=0</pre>\n编译安装\n<pre class=\"lang:sh decode:true \">make &amp;&amp; make install</pre>\n设置环境变量\n<pre class=\"lang:sh decode:true \">echo 'export PATH=\"/apps/mysql-5.5.32/bin:$PATH\"' &gt;&gt;/etc/profile\nsource /etc/profile</pre>\n链接\n<pre class=\"lang:sh decode:true \">ln -s /apps/mysql-5.5.32 /apps/mysql\n</pre>\n权限\n<pre class=\"lang:sh decode:true \">chown -R mysql:mysql /apps/mysql-5.5.32/\nchmod -R 1777 /tmp/\n</pre>\n标准单实例\n初始化\n<pre class=\"lang:sh decode:true \">cd /apps/mysql/scripts/\n./mysql_install_db --basedir=/apps/mysql --datadir=/apps/mysql/data/ --user=mysql\n</pre>\n初始化成功的输出：\n<pre class=\"lang:sh decode:true \">To start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n**\n/apps/mysql/bin/mysqladmin -u root password 'new-password'\n/apps/mysql/bin/mysqladmin -u root -h mysql password 'new-password'\n\nAlternatively you can run:\n/apps/mysql/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default. This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\n\nYou can start the MySQL daemon with:\ncd /apps/mysql ; /apps/mysql/bin/mysqld_safe &amp;amp;\n\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /apps/mysql/mysql-test ; perl mysql-test-run.pl</pre>\n复制配置文件\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/my-small.cnf /etc/my.cnf</pre>\n复制启动脚本\n<pre class=\"lang:sh decode:true \">cp /apps/mysql/support-files/mysql.server /etc/init.d/mysqld</pre>\n添加权限\n<pre class=\"lang:sh decode:true \">chmod +x /etc/init.d/mysqld</pre>\n启动\n<pre class=\"lang:sh decode:true \">/etc/init.d/mysqld start</pre>\n设置开机启动\n<pre class=\"lang:sh decode:true \">chkconfig mysqld on</pre>\n查看端口\n<pre class=\"lang:sh decode:true \">netstat -tunlp|grep 3306\nlsof -i :3306</pre>"},{"title":"mysql安全用户的做法，删除root账户","date":"2015-12-14T09:20:36.000Z","_content":"\n全部删除用户，添加额外管理员\n\n<pre class=\"lang:mysql decode:true \" >\ndelete from mysql.user;\ngrant all privileges on *.* to system@'localhost' identified by 'new-password' with grant option;\nflush privileges;</pre>\n\n\t修改密码\n\n<pre class=\"lang:mysql decode:true \" >\nupdate mysql.user set password=PASSWORD('yourpw') where user='user';\nflush privileges;</pre>\n\n\t重新登录\n\n<pre class=\"lang:mysql decode:true \" >\nmysql -u system -p</pre>\n","source":"_posts/old_post_wp/mysql安全用户的做法.md","raw":"---\ntitle: mysql安全用户的做法，删除root账户\ntags:\n  - mysql\n  - config\ncategories:\n  - Docs\ndate: 2015-12-14 17:20:36\npermalink: mysql-safe-tips-0\n---\n\n全部删除用户，添加额外管理员\n\n<pre class=\"lang:mysql decode:true \" >\ndelete from mysql.user;\ngrant all privileges on *.* to system@'localhost' identified by 'new-password' with grant option;\nflush privileges;</pre>\n\n\t修改密码\n\n<pre class=\"lang:mysql decode:true \" >\nupdate mysql.user set password=PASSWORD('yourpw') where user='user';\nflush privileges;</pre>\n\n\t重新登录\n\n<pre class=\"lang:mysql decode:true \" >\nmysql -u system -p</pre>\n","slug":"mysql-safe-tips-0","published":1,"updated":"2016-10-25T08:43:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkj0046uyxuvmibu9pf","content":"<p>全部删除用户，添加额外管理员</p>\n<pre class=\"lang:mysql decode:true \">\ndelete from mysql.user;\ngrant all privileges on *.* to system@'localhost' identified by 'new-password' with grant option;\nflush privileges;</pre>\n\n<pre><code>修改密码\n</code></pre><pre class=\"lang:mysql decode:true \">\nupdate mysql.user set password=PASSWORD('yourpw') where user='user';\nflush privileges;</pre>\n\n<pre><code>重新登录\n</code></pre><pre class=\"lang:mysql decode:true \">\nmysql -u system -p</pre>\n","excerpt":"","more":"<p>全部删除用户，添加额外管理员</p>\n<pre class=\"lang:mysql decode:true \" >\ndelete from mysql.user;\ngrant all privileges on *.* to system@'localhost' identified by 'new-password' with grant option;\nflush privileges;</pre>\n\n<pre><code>修改密码\n</code></pre><pre class=\"lang:mysql decode:true \" >\nupdate mysql.user set password=PASSWORD('yourpw') where user='user';\nflush privileges;</pre>\n\n<pre><code>重新登录\n</code></pre><pre class=\"lang:mysql decode:true \" >\nmysql -u system -p</pre>\n"},{"title":"mysql监控items","date":"2016-03-04T00:52:09.000Z","_content":"\n 1，系统mysql进程数\n``` plain\n ``` bash\nps -ef | grep \"mysql\" | grep -v \"grep\" | wc –l\n```\n\n 2.从库运行状态，Slave_running \n``` bash\nmysql > show status like 'Slave_running';\n```\n\n如果系统有一个从复制服务器，这个值指明了从服务器的健康度\n\n 3.线程连接数，Threads_connected \n```\nmysql &gt; show status like 'Threads_connected';\n```\n当前客户端已连接的数量。这个值会少于预设的值，但你也能监视到这个值较大，这可保证客户端是处在活跃状态。\n\n 4.Threads_running \n\nmysql &gt; show status like 'Threads_running'; \n\n如果数据库超负荷了，你将会得到一个正在（查询的语句持续）增长的数值。这个值也可以少于预先设定的值。这个值在很短的时间内超过限定值是没问题的。当Threads_running值超过预设值时并且该值在5秒内没有回落时， 要同时监视其他的一些值。\n\n 5.Aborted_clients \n\n mysql &gt; show status like 'Aborted_clients'; \n\n客户端被异常中断的数值，即连接到mysql服务器的客户端没有正常地断开或关闭。对于一些应用程序是没有影响的，但对于另一些应用程序可能你要跟踪该值，因为异常中断连接可能表明了一些应用程序有问题。\n\n 6.Questions \n\n mysql&gt; show status like 'Questions'; \n\n每秒钟获得的查询数量，也可以是全部查询的数量，根据你输入不同的命令会得到你想要的不同的值。\n\n 7.Handler_ *\n\n mysql&gt; show status like 'Handler_%'; \n\n如果你想监视底层（low-level）数据库负载，这些值是值得去跟踪的。\n\n如果Handler_read_rnd_next值相对于你认为是正常值相差悬殊，可能会告诉你需要优化或索引出问题了。Handler_rollback表明事务被回滚的查询数量。你可能想调查一下原因。\n\n 8.Opened_tables \n\n mysql&gt; show status like 'Opened_tables'; \n\n表缓存没有命中的数量。如果该值很大，你可能需要增加table_cache的数值。典型地，你可能想要这个值每秒打开的表数量少于1或2。\n\n 9.Select_full_join \n\n mysql&gt; show status like 'Select_full_join'; \n\n没有主键（key）联合（Join）的执行。该值可能是零。这是捕获开发错误的好方法，因为一些这样的查询可能降低系统的性能。\n\n 10.Select_scan \n\n mysql&gt; show status like 'Select_scan'; \n\n执行全表搜索查询的数量。在某些情况下是没问题的，但占总查询数量该比值应该是常量（即Select_scan/总查询数量商应该是常数）。如果你发现该值持续增长，说明需要优化，缺乏必要的索引或其他问题。\n\n 11.Slow_queries \n\n mysql&gt; show status like 'Slow_queries'; \n\n超过该值（--long-query-time）的查询数量，或没有使用索引查询数量。对于全部查询会有小的冲突。如果该值增长，表明系统有性能问题。\n\n 12.Threads_created \n\n mysql&gt; show status like 'Threads_created'; \n\n该值应该是低的。较高的值可能意味着你需要增加thread_cache的数值，或你遇到了持续增加的连接，表明了潜在的问题。\n\n 13.  客户端连接进程数 \n\n shell&gt; mysqladmin processlist \n\n mysql&gt; show processlist; \n\n你可以通过使用其他的统计信息得到已连接线程数量和正在运行线程的数量，检查正在运行的查询花了多长时间是一个好主意。如果有一些长时间的查询，管理员可以被通知。你可能也想了解多少个查询是在\"Locked\"的状态—---该值作为正在运行的查询不被计算在内而是作为非活跃的。一个用户正在等待一个数据库响应。\n\n 14.innodb  状态 \n\n mysql&gt; show innodb status; \n\n该语句产生很多信息，从中你可以得到你感兴趣的。首先你要检查的就是“从最近的XX秒计算出来的每秒的平均负载”。\n\n (1)Pending normal aio reads:  该值是innodb io请求查询的大小（size）。如果该值大到超过了10—20，你可能有一些瓶颈。\n\n (2)reads/s, avg bytes/read, writes/s, fsyncs/s: 这些值是io统计。对于reads/writes大值意味着io子系统正在被装载。适当的值取决于你系统的配置。\n\n (3)Buffer pool hit rate: 这个命中率非常依赖于你的应用程序。当你觉得有问题时请检查你的命中率\n\n (4)inserts/s, updates/s, deletes/s, reads/s: 有一些Innodb的底层操作。你可以用这些值检查你的负载情况查看是否是期待的数值范围。\n\n 15.  主机性能状态 \n\n shell&gt; uptime \n\n 16.CPU  使用率 \n\n shell&gt; top \n\n shell&gt; vmstat \n\n 17.  磁盘  IO \n\n shell&gt; vmstat \n\n shell&gt; iostat \n\n 18.swap  进出量  (  内存  ) \n\n shell&gt; free \n\n 19.MySQL  错误日志 \n\n在服务器正常完成初始化后，什么都不会写到错误日志中，因此任何在该日志中的信息都要引起管理员的注意。\n 20.InnoDB  表空间信息 \n\nInnoDB仅有的危险情况就是表空间填满----日志不会填满。检查的最好方式就是：show table status;你可以用任何InnoDB表来监视InnoDB表的剩余空间。\n\n 21.QPS  每秒  Query  量 \n\nQPS = Questions(or Queries) / seconds\n\n mysql &gt; show /* global */ status like 'Question'; \n\n 22.TPS(  每秒事务量  ) \n\nTPS = (Com_commit + Com_rollback) / seconds\n\n mysql &gt; show status like 'Com_commit'; \n\n mysql &gt; show status like 'Com_rollback'; \n\n 23.key Buffer   命中率 \n\nkey_buffer_read_hits = (1-key_reads / key_read_requests) * 100%\n\nkey_buffer_write_hits = (1-key_writes / key_write_requests) * 100%\n\n mysql&gt; show status like 'Key%'; \n\n 24.InnoDB Buffer  命中率 \n\nInnodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%\n\n mysql&gt; show status like 'innodb_buffer_pool_read%'; \n\n 25.Query Cache  命中率 \n\nQuery_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;\n\n mysql&gt; show status like 'Qcache%'; \n\n 26.Table Cache  状态量 \n\n mysql&gt; show status like 'open%'; \n\n 27.Thread Cache   命中率 \n\nThread_cache_hits = (1 - Threads_created / connections ) * 100%\n\n mysql&gt; show status like 'Thread%'; \n\n mysql&gt; show status like 'Connections'; \n\n 28.  锁定状态 \n\n mysql&gt; show status like '%lock%'; \n\n 29.  复制延时量 \n\n mysql &gt; show slave status \n\n 30.Tmp Table  状况  (  临时表状况  ) \n\n mysql &gt; show status like 'Create_tmp%'; \n\n 31.Binlog Cache  使用状况 \n\n mysql &gt; show status like 'Binlog_cache%'; \n\n 32.Innodb_log_waits  量 \n\n mysql &gt; show status like 'innodb_log_waits'; \n```","source":"_posts/old_post_wp/mysql监控.md","raw":"---\ntitle: mysql监控items\npermalink: mysql-monitor-items\ntags:\n  - mysql\n  - linux\n  - monitor\ncategories:\n  - Docs\ndate: 2016-03-04 08:52:09\n---\n\n 1，系统mysql进程数\n``` plain\n ``` bash\nps -ef | grep \"mysql\" | grep -v \"grep\" | wc –l\n```\n\n 2.从库运行状态，Slave_running \n``` bash\nmysql > show status like 'Slave_running';\n```\n\n如果系统有一个从复制服务器，这个值指明了从服务器的健康度\n\n 3.线程连接数，Threads_connected \n```\nmysql &gt; show status like 'Threads_connected';\n```\n当前客户端已连接的数量。这个值会少于预设的值，但你也能监视到这个值较大，这可保证客户端是处在活跃状态。\n\n 4.Threads_running \n\nmysql &gt; show status like 'Threads_running'; \n\n如果数据库超负荷了，你将会得到一个正在（查询的语句持续）增长的数值。这个值也可以少于预先设定的值。这个值在很短的时间内超过限定值是没问题的。当Threads_running值超过预设值时并且该值在5秒内没有回落时， 要同时监视其他的一些值。\n\n 5.Aborted_clients \n\n mysql &gt; show status like 'Aborted_clients'; \n\n客户端被异常中断的数值，即连接到mysql服务器的客户端没有正常地断开或关闭。对于一些应用程序是没有影响的，但对于另一些应用程序可能你要跟踪该值，因为异常中断连接可能表明了一些应用程序有问题。\n\n 6.Questions \n\n mysql&gt; show status like 'Questions'; \n\n每秒钟获得的查询数量，也可以是全部查询的数量，根据你输入不同的命令会得到你想要的不同的值。\n\n 7.Handler_ *\n\n mysql&gt; show status like 'Handler_%'; \n\n如果你想监视底层（low-level）数据库负载，这些值是值得去跟踪的。\n\n如果Handler_read_rnd_next值相对于你认为是正常值相差悬殊，可能会告诉你需要优化或索引出问题了。Handler_rollback表明事务被回滚的查询数量。你可能想调查一下原因。\n\n 8.Opened_tables \n\n mysql&gt; show status like 'Opened_tables'; \n\n表缓存没有命中的数量。如果该值很大，你可能需要增加table_cache的数值。典型地，你可能想要这个值每秒打开的表数量少于1或2。\n\n 9.Select_full_join \n\n mysql&gt; show status like 'Select_full_join'; \n\n没有主键（key）联合（Join）的执行。该值可能是零。这是捕获开发错误的好方法，因为一些这样的查询可能降低系统的性能。\n\n 10.Select_scan \n\n mysql&gt; show status like 'Select_scan'; \n\n执行全表搜索查询的数量。在某些情况下是没问题的，但占总查询数量该比值应该是常量（即Select_scan/总查询数量商应该是常数）。如果你发现该值持续增长，说明需要优化，缺乏必要的索引或其他问题。\n\n 11.Slow_queries \n\n mysql&gt; show status like 'Slow_queries'; \n\n超过该值（--long-query-time）的查询数量，或没有使用索引查询数量。对于全部查询会有小的冲突。如果该值增长，表明系统有性能问题。\n\n 12.Threads_created \n\n mysql&gt; show status like 'Threads_created'; \n\n该值应该是低的。较高的值可能意味着你需要增加thread_cache的数值，或你遇到了持续增加的连接，表明了潜在的问题。\n\n 13.  客户端连接进程数 \n\n shell&gt; mysqladmin processlist \n\n mysql&gt; show processlist; \n\n你可以通过使用其他的统计信息得到已连接线程数量和正在运行线程的数量，检查正在运行的查询花了多长时间是一个好主意。如果有一些长时间的查询，管理员可以被通知。你可能也想了解多少个查询是在\"Locked\"的状态—---该值作为正在运行的查询不被计算在内而是作为非活跃的。一个用户正在等待一个数据库响应。\n\n 14.innodb  状态 \n\n mysql&gt; show innodb status; \n\n该语句产生很多信息，从中你可以得到你感兴趣的。首先你要检查的就是“从最近的XX秒计算出来的每秒的平均负载”。\n\n (1)Pending normal aio reads:  该值是innodb io请求查询的大小（size）。如果该值大到超过了10—20，你可能有一些瓶颈。\n\n (2)reads/s, avg bytes/read, writes/s, fsyncs/s: 这些值是io统计。对于reads/writes大值意味着io子系统正在被装载。适当的值取决于你系统的配置。\n\n (3)Buffer pool hit rate: 这个命中率非常依赖于你的应用程序。当你觉得有问题时请检查你的命中率\n\n (4)inserts/s, updates/s, deletes/s, reads/s: 有一些Innodb的底层操作。你可以用这些值检查你的负载情况查看是否是期待的数值范围。\n\n 15.  主机性能状态 \n\n shell&gt; uptime \n\n 16.CPU  使用率 \n\n shell&gt; top \n\n shell&gt; vmstat \n\n 17.  磁盘  IO \n\n shell&gt; vmstat \n\n shell&gt; iostat \n\n 18.swap  进出量  (  内存  ) \n\n shell&gt; free \n\n 19.MySQL  错误日志 \n\n在服务器正常完成初始化后，什么都不会写到错误日志中，因此任何在该日志中的信息都要引起管理员的注意。\n 20.InnoDB  表空间信息 \n\nInnoDB仅有的危险情况就是表空间填满----日志不会填满。检查的最好方式就是：show table status;你可以用任何InnoDB表来监视InnoDB表的剩余空间。\n\n 21.QPS  每秒  Query  量 \n\nQPS = Questions(or Queries) / seconds\n\n mysql &gt; show /* global */ status like 'Question'; \n\n 22.TPS(  每秒事务量  ) \n\nTPS = (Com_commit + Com_rollback) / seconds\n\n mysql &gt; show status like 'Com_commit'; \n\n mysql &gt; show status like 'Com_rollback'; \n\n 23.key Buffer   命中率 \n\nkey_buffer_read_hits = (1-key_reads / key_read_requests) * 100%\n\nkey_buffer_write_hits = (1-key_writes / key_write_requests) * 100%\n\n mysql&gt; show status like 'Key%'; \n\n 24.InnoDB Buffer  命中率 \n\nInnodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%\n\n mysql&gt; show status like 'innodb_buffer_pool_read%'; \n\n 25.Query Cache  命中率 \n\nQuery_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;\n\n mysql&gt; show status like 'Qcache%'; \n\n 26.Table Cache  状态量 \n\n mysql&gt; show status like 'open%'; \n\n 27.Thread Cache   命中率 \n\nThread_cache_hits = (1 - Threads_created / connections ) * 100%\n\n mysql&gt; show status like 'Thread%'; \n\n mysql&gt; show status like 'Connections'; \n\n 28.  锁定状态 \n\n mysql&gt; show status like '%lock%'; \n\n 29.  复制延时量 \n\n mysql &gt; show slave status \n\n 30.Tmp Table  状况  (  临时表状况  ) \n\n mysql &gt; show status like 'Create_tmp%'; \n\n 31.Binlog Cache  使用状况 \n\n mysql &gt; show status like 'Binlog_cache%'; \n\n 32.Innodb_log_waits  量 \n\n mysql &gt; show status like 'innodb_log_waits'; \n```","slug":"mysql-monitor-items","published":1,"updated":"2016-10-25T08:47:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkl004auyxucs5iijwu","content":"<p> 1，系统mysql进程数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ``` bash</div><div class=\"line\">ps -ef | grep &quot;mysql&quot; | grep -v &quot;grep&quot; | wc –l</div></pre></td></tr></table></figure></p>\n<p> 2.从库运行状态，Slave_running<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql &gt; show status like <span class=\"string\">'Slave_running'</span>;</div></pre></td></tr></table></figure></p>\n<p>如果系统有一个从复制服务器，这个值指明了从服务器的健康度</p>\n<p> 3.线程连接数，Threads_connected<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql &amp;gt; <span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Threads_connected'</span>;</div></pre></td></tr></table></figure></p>\n<p>当前客户端已连接的数量。这个值会少于预设的值，但你也能监视到这个值较大，这可保证客户端是处在活跃状态。</p>\n<p> 4.Threads_running </p>\n<p>mysql &gt; show status like ‘Threads_running’; </p>\n<p>如果数据库超负荷了，你将会得到一个正在（查询的语句持续）增长的数值。这个值也可以少于预先设定的值。这个值在很短的时间内超过限定值是没问题的。当Threads_running值超过预设值时并且该值在5秒内没有回落时， 要同时监视其他的一些值。</p>\n<p> 5.Aborted_clients </p>\n<p> mysql &gt; show status like ‘Aborted_clients’; </p>\n<p>客户端被异常中断的数值，即连接到mysql服务器的客户端没有正常地断开或关闭。对于一些应用程序是没有影响的，但对于另一些应用程序可能你要跟踪该值，因为异常中断连接可能表明了一些应用程序有问题。</p>\n<p> 6.Questions </p>\n<p> mysql&gt; show status like ‘Questions’; </p>\n<p>每秒钟获得的查询数量，也可以是全部查询的数量，根据你输入不同的命令会得到你想要的不同的值。</p>\n<p> 7.Handler_ *</p>\n<p> mysql&gt; show status like ‘Handler_%’; </p>\n<p>如果你想监视底层（low-level）数据库负载，这些值是值得去跟踪的。</p>\n<p>如果Handler_read_rnd_next值相对于你认为是正常值相差悬殊，可能会告诉你需要优化或索引出问题了。Handler_rollback表明事务被回滚的查询数量。你可能想调查一下原因。</p>\n<p> 8.Opened_tables </p>\n<p> mysql&gt; show status like ‘Opened_tables’; </p>\n<p>表缓存没有命中的数量。如果该值很大，你可能需要增加table_cache的数值。典型地，你可能想要这个值每秒打开的表数量少于1或2。</p>\n<p> 9.Select_full_join </p>\n<p> mysql&gt; show status like ‘Select_full_join’; </p>\n<p>没有主键（key）联合（Join）的执行。该值可能是零。这是捕获开发错误的好方法，因为一些这样的查询可能降低系统的性能。</p>\n<p> 10.Select_scan </p>\n<p> mysql&gt; show status like ‘Select_scan’; </p>\n<p>执行全表搜索查询的数量。在某些情况下是没问题的，但占总查询数量该比值应该是常量（即Select_scan/总查询数量商应该是常数）。如果你发现该值持续增长，说明需要优化，缺乏必要的索引或其他问题。</p>\n<p> 11.Slow_queries </p>\n<p> mysql&gt; show status like ‘Slow_queries’; </p>\n<p>超过该值（–long-query-time）的查询数量，或没有使用索引查询数量。对于全部查询会有小的冲突。如果该值增长，表明系统有性能问题。</p>\n<p> 12.Threads_created </p>\n<p> mysql&gt; show status like ‘Threads_created’; </p>\n<p>该值应该是低的。较高的值可能意味着你需要增加thread_cache的数值，或你遇到了持续增加的连接，表明了潜在的问题。</p>\n<ol>\n<li><p>客户端连接进程数 </p>\n<p>shell&gt; mysqladmin processlist </p>\n<p>mysql&gt; show processlist; </p>\n</li>\n</ol>\n<p>你可以通过使用其他的统计信息得到已连接线程数量和正在运行线程的数量，检查正在运行的查询花了多长时间是一个好主意。如果有一些长时间的查询，管理员可以被通知。你可能也想了解多少个查询是在”Locked”的状态——该值作为正在运行的查询不被计算在内而是作为非活跃的。一个用户正在等待一个数据库响应。</p>\n<p> 14.innodb  状态 </p>\n<p> mysql&gt; show innodb status; </p>\n<p>该语句产生很多信息，从中你可以得到你感兴趣的。首先你要检查的就是“从最近的XX秒计算出来的每秒的平均负载”。</p>\n<p> (1)Pending normal aio reads:  该值是innodb io请求查询的大小（size）。如果该值大到超过了10—20，你可能有一些瓶颈。</p>\n<p> (2)reads/s, avg bytes/read, writes/s, fsyncs/s: 这些值是io统计。对于reads/writes大值意味着io子系统正在被装载。适当的值取决于你系统的配置。</p>\n<p> (3)Buffer pool hit rate: 这个命中率非常依赖于你的应用程序。当你觉得有问题时请检查你的命中率</p>\n<p> (4)inserts/s, updates/s, deletes/s, reads/s: 有一些Innodb的底层操作。你可以用这些值检查你的负载情况查看是否是期待的数值范围。</p>\n<ol>\n<li><p>主机性能状态 </p>\n<p>shell&gt; uptime </p>\n<p>16.CPU  使用率 </p>\n<p>shell&gt; top </p>\n<p>shell&gt; vmstat </p>\n</li>\n<li><p>磁盘  IO </p>\n<p>shell&gt; vmstat </p>\n<p>shell&gt; iostat </p>\n<p>18.swap  进出量  (  内存  ) </p>\n<p>shell&gt; free </p>\n<p>19.MySQL  错误日志 </p>\n</li>\n</ol>\n<p>在服务器正常完成初始化后，什么都不会写到错误日志中，因此任何在该日志中的信息都要引起管理员的注意。<br> 20.InnoDB  表空间信息 </p>\n<p>InnoDB仅有的危险情况就是表空间填满—-日志不会填满。检查的最好方式就是：show table status;你可以用任何InnoDB表来监视InnoDB表的剩余空间。</p>\n<p> 21.QPS  每秒  Query  量 </p>\n<p>QPS = Questions(or Queries) / seconds</p>\n<p> mysql &gt; show /<em> global </em>/ status like ‘Question’; </p>\n<p> 22.TPS(  每秒事务量  ) </p>\n<p>TPS = (Com_commit + Com_rollback) / seconds</p>\n<p> mysql &gt; show status like ‘Com_commit’; </p>\n<p> mysql &gt; show status like ‘Com_rollback’; </p>\n<p> 23.key Buffer   命中率 </p>\n<p>key_buffer_read_hits = (1-key_reads / key_read_requests) * 100%</p>\n<p>key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%</p>\n<p> mysql&gt; show status like ‘Key%’; </p>\n<p> 24.InnoDB Buffer  命中率 </p>\n<p>Innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p>\n<p> mysql&gt; show status like ‘innodb_buffer_pool_read%’; </p>\n<p> 25.Query Cache  命中率 </p>\n<p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p>\n<p> mysql&gt; show status like ‘Qcache%’; </p>\n<p> 26.Table Cache  状态量 </p>\n<p> mysql&gt; show status like ‘open%’; </p>\n<p> 27.Thread Cache   命中率 </p>\n<p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p>\n<p> mysql&gt; show status like ‘Thread%’; </p>\n<p> mysql&gt; show status like ‘Connections’; </p>\n<ol>\n<li><p>锁定状态 </p>\n<p>mysql&gt; show status like ‘%lock%’; </p>\n</li>\n<li><p>复制延时量 </p>\n<p>mysql &gt; show slave status </p>\n<p>30.Tmp Table  状况  (  临时表状况  ) </p>\n<p>mysql &gt; show status like ‘Create_tmp%’; </p>\n<p>31.Binlog Cache  使用状况 </p>\n<p>mysql &gt; show status like ‘Binlog_cache%’; </p>\n<p>32.Innodb_log_waits  量 </p>\n<p>mysql &gt; show status like ‘innodb_log_waits’;<br>```</p>\n</li>\n</ol>\n","excerpt":"","more":"<p> 1，系统mysql进程数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ``` bash</div><div class=\"line\">ps -ef | grep &quot;mysql&quot; | grep -v &quot;grep&quot; | wc –l</div></pre></td></tr></table></figure></p>\n<p> 2.从库运行状态，Slave_running<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql &gt; show status like <span class=\"string\">'Slave_running'</span>;</div></pre></td></tr></table></figure></p>\n<p>如果系统有一个从复制服务器，这个值指明了从服务器的健康度</p>\n<p> 3.线程连接数，Threads_connected<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql &amp;gt; <span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Threads_connected'</span>;</div></pre></td></tr></table></figure></p>\n<p>当前客户端已连接的数量。这个值会少于预设的值，但你也能监视到这个值较大，这可保证客户端是处在活跃状态。</p>\n<p> 4.Threads_running </p>\n<p>mysql &gt; show status like ‘Threads_running’; </p>\n<p>如果数据库超负荷了，你将会得到一个正在（查询的语句持续）增长的数值。这个值也可以少于预先设定的值。这个值在很短的时间内超过限定值是没问题的。当Threads_running值超过预设值时并且该值在5秒内没有回落时， 要同时监视其他的一些值。</p>\n<p> 5.Aborted_clients </p>\n<p> mysql &gt; show status like ‘Aborted_clients’; </p>\n<p>客户端被异常中断的数值，即连接到mysql服务器的客户端没有正常地断开或关闭。对于一些应用程序是没有影响的，但对于另一些应用程序可能你要跟踪该值，因为异常中断连接可能表明了一些应用程序有问题。</p>\n<p> 6.Questions </p>\n<p> mysql&gt; show status like ‘Questions’; </p>\n<p>每秒钟获得的查询数量，也可以是全部查询的数量，根据你输入不同的命令会得到你想要的不同的值。</p>\n<p> 7.Handler_ *</p>\n<p> mysql&gt; show status like ‘Handler_%’; </p>\n<p>如果你想监视底层（low-level）数据库负载，这些值是值得去跟踪的。</p>\n<p>如果Handler_read_rnd_next值相对于你认为是正常值相差悬殊，可能会告诉你需要优化或索引出问题了。Handler_rollback表明事务被回滚的查询数量。你可能想调查一下原因。</p>\n<p> 8.Opened_tables </p>\n<p> mysql&gt; show status like ‘Opened_tables’; </p>\n<p>表缓存没有命中的数量。如果该值很大，你可能需要增加table_cache的数值。典型地，你可能想要这个值每秒打开的表数量少于1或2。</p>\n<p> 9.Select_full_join </p>\n<p> mysql&gt; show status like ‘Select_full_join’; </p>\n<p>没有主键（key）联合（Join）的执行。该值可能是零。这是捕获开发错误的好方法，因为一些这样的查询可能降低系统的性能。</p>\n<p> 10.Select_scan </p>\n<p> mysql&gt; show status like ‘Select_scan’; </p>\n<p>执行全表搜索查询的数量。在某些情况下是没问题的，但占总查询数量该比值应该是常量（即Select_scan/总查询数量商应该是常数）。如果你发现该值持续增长，说明需要优化，缺乏必要的索引或其他问题。</p>\n<p> 11.Slow_queries </p>\n<p> mysql&gt; show status like ‘Slow_queries’; </p>\n<p>超过该值（–long-query-time）的查询数量，或没有使用索引查询数量。对于全部查询会有小的冲突。如果该值增长，表明系统有性能问题。</p>\n<p> 12.Threads_created </p>\n<p> mysql&gt; show status like ‘Threads_created’; </p>\n<p>该值应该是低的。较高的值可能意味着你需要增加thread_cache的数值，或你遇到了持续增加的连接，表明了潜在的问题。</p>\n<ol>\n<li><p>客户端连接进程数 </p>\n<p>shell&gt; mysqladmin processlist </p>\n<p>mysql&gt; show processlist; </p>\n</li>\n</ol>\n<p>你可以通过使用其他的统计信息得到已连接线程数量和正在运行线程的数量，检查正在运行的查询花了多长时间是一个好主意。如果有一些长时间的查询，管理员可以被通知。你可能也想了解多少个查询是在”Locked”的状态——该值作为正在运行的查询不被计算在内而是作为非活跃的。一个用户正在等待一个数据库响应。</p>\n<p> 14.innodb  状态 </p>\n<p> mysql&gt; show innodb status; </p>\n<p>该语句产生很多信息，从中你可以得到你感兴趣的。首先你要检查的就是“从最近的XX秒计算出来的每秒的平均负载”。</p>\n<p> (1)Pending normal aio reads:  该值是innodb io请求查询的大小（size）。如果该值大到超过了10—20，你可能有一些瓶颈。</p>\n<p> (2)reads/s, avg bytes/read, writes/s, fsyncs/s: 这些值是io统计。对于reads/writes大值意味着io子系统正在被装载。适当的值取决于你系统的配置。</p>\n<p> (3)Buffer pool hit rate: 这个命中率非常依赖于你的应用程序。当你觉得有问题时请检查你的命中率</p>\n<p> (4)inserts/s, updates/s, deletes/s, reads/s: 有一些Innodb的底层操作。你可以用这些值检查你的负载情况查看是否是期待的数值范围。</p>\n<ol>\n<li><p>主机性能状态 </p>\n<p>shell&gt; uptime </p>\n<p>16.CPU  使用率 </p>\n<p>shell&gt; top </p>\n<p>shell&gt; vmstat </p>\n</li>\n<li><p>磁盘  IO </p>\n<p>shell&gt; vmstat </p>\n<p>shell&gt; iostat </p>\n<p>18.swap  进出量  (  内存  ) </p>\n<p>shell&gt; free </p>\n<p>19.MySQL  错误日志 </p>\n</li>\n</ol>\n<p>在服务器正常完成初始化后，什么都不会写到错误日志中，因此任何在该日志中的信息都要引起管理员的注意。<br> 20.InnoDB  表空间信息 </p>\n<p>InnoDB仅有的危险情况就是表空间填满—-日志不会填满。检查的最好方式就是：show table status;你可以用任何InnoDB表来监视InnoDB表的剩余空间。</p>\n<p> 21.QPS  每秒  Query  量 </p>\n<p>QPS = Questions(or Queries) / seconds</p>\n<p> mysql &gt; show /<em> global </em>/ status like ‘Question’; </p>\n<p> 22.TPS(  每秒事务量  ) </p>\n<p>TPS = (Com_commit + Com_rollback) / seconds</p>\n<p> mysql &gt; show status like ‘Com_commit’; </p>\n<p> mysql &gt; show status like ‘Com_rollback’; </p>\n<p> 23.key Buffer   命中率 </p>\n<p>key_buffer_read_hits = (1-key_reads / key_read_requests) * 100%</p>\n<p>key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%</p>\n<p> mysql&gt; show status like ‘Key%’; </p>\n<p> 24.InnoDB Buffer  命中率 </p>\n<p>Innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p>\n<p> mysql&gt; show status like ‘innodb_buffer_pool_read%’; </p>\n<p> 25.Query Cache  命中率 </p>\n<p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p>\n<p> mysql&gt; show status like ‘Qcache%’; </p>\n<p> 26.Table Cache  状态量 </p>\n<p> mysql&gt; show status like ‘open%’; </p>\n<p> 27.Thread Cache   命中率 </p>\n<p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p>\n<p> mysql&gt; show status like ‘Thread%’; </p>\n<p> mysql&gt; show status like ‘Connections’; </p>\n<ol>\n<li><p>锁定状态 </p>\n<p>mysql&gt; show status like ‘%lock%’; </p>\n</li>\n<li><p>复制延时量 </p>\n<p>mysql &gt; show slave status </p>\n<p>30.Tmp Table  状况  (  临时表状况  ) </p>\n<p>mysql &gt; show status like ‘Create_tmp%’; </p>\n<p>31.Binlog Cache  使用状况 </p>\n<p>mysql &gt; show status like ‘Binlog_cache%’; </p>\n<p>32.Innodb_log_waits  量 </p>\n<p>mysql &gt; show status like ‘innodb_log_waits’;<br>```</p>\n</li>\n</ol>\n"},{"title":"nginx server conf.conf","date":"2015-10-14T05:12:06.000Z","_content":"\n[default]\n``` bash\nserver {\n\nlisten 8000;\n\\# listen somename:8080;\n\\# server_name somename alias another.alias;\n\nlocation / {\nroot /www/html;\nindex index.html index.htm index.php;\nautoindex on;\nautoindex_exact_size off;\nautoindex_localtime on;\n}\nlocation ~ \\.php$ {\nroot /www/html;\nfastcgi_pass 127.0.0.1:9000;\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\ninclude fastcgi_params;\n}\n}\n\"/etc/nginx/conf.d/virtual.conf\" 25L, 594C\n```\n\n[/default]","source":"_posts/old_post_wp/nginx_server配置.md","raw":"---\ntitle: nginx server conf.conf\npermalink: nginx-server-demo\ncategories:\n  - Docs\ndate: 2015-10-14 13:12:06\ntags:\n  - nginx\n---\n\n[default]\n``` bash\nserver {\n\nlisten 8000;\n\\# listen somename:8080;\n\\# server_name somename alias another.alias;\n\nlocation / {\nroot /www/html;\nindex index.html index.htm index.php;\nautoindex on;\nautoindex_exact_size off;\nautoindex_localtime on;\n}\nlocation ~ \\.php$ {\nroot /www/html;\nfastcgi_pass 127.0.0.1:9000;\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\ninclude fastcgi_params;\n}\n}\n\"/etc/nginx/conf.d/virtual.conf\" 25L, 594C\n```\n\n[/default]","slug":"nginx-server-demo","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbko004duyxuyff6nuks","content":"<p>[default]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">listen 8000;</div><div class=\"line\">\\<span class=\"comment\"># listen somename:8080;</span></div><div class=\"line\">\\<span class=\"comment\"># server_name somename alias another.alias;</span></div><div class=\"line\"></div><div class=\"line\">location / &#123;</div><div class=\"line\">root /www/html;</div><div class=\"line\">index index.html index.htm index.php;</div><div class=\"line\">autoindex on;</div><div class=\"line\">autoindex_exact_size off;</div><div class=\"line\">autoindex_localtime on;</div><div class=\"line\">&#125;</div><div class=\"line\">location ~ \\.php$ &#123;</div><div class=\"line\">root /www/html;</div><div class=\"line\">fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">fastcgi_index index.php;</div><div class=\"line\">fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">include fastcgi_params;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">\"/etc/nginx/conf.d/virtual.conf\"</span> 25L, 594C</div></pre></td></tr></table></figure></p>\n<p>[/default]</p>\n","excerpt":"","more":"<p>[default]<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">listen 8000;</div><div class=\"line\">\\<span class=\"comment\"># listen somename:8080;</span></div><div class=\"line\">\\<span class=\"comment\"># server_name somename alias another.alias;</span></div><div class=\"line\"></div><div class=\"line\">location / &#123;</div><div class=\"line\">root /www/html;</div><div class=\"line\">index index.html index.htm index.php;</div><div class=\"line\">autoindex on;</div><div class=\"line\">autoindex_exact_size off;</div><div class=\"line\">autoindex_localtime on;</div><div class=\"line\">&#125;</div><div class=\"line\">location ~ \\.php$ &#123;</div><div class=\"line\">root /www/html;</div><div class=\"line\">fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">fastcgi_index index.php;</div><div class=\"line\">fastcgi_param SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">include fastcgi_params;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">\"/etc/nginx/conf.d/virtual.conf\"</span> 25L, 594C</div></pre></td></tr></table></figure></p>\n<p>[/default]</p>\n"},{"title":"api.ntp.bz最近好像不能用了?更换新的ntp服务器地址","id":"632","comment":false,"date":"2016-09-30T01:50:19.000Z","_content":"\n最近线上几台机器出现莫名的时间有也偏差，查询了一下采用的ntp服务器有些问题\n\n[ntp.api.bz](http://api.bz)好像不能用了。\n\n多好的东西啊。现在已经更换成\n``` bash\nntpdate 0.pool.ntp.org\n```\n这个了。\n也可以使用阿里云的ntp服务\nntp1.aliyun.com\n","source":"_posts/old_post_wp/ntp server替换.md","raw":"---\ntitle: api.ntp.bz最近好像不能用了?更换新的ntp服务器地址\npermalink: new-ntp-server-domain\ntags:\n  - linux\n  - config\nid: 632\ncomment: false\ncategories:\n  - Docs\ndate: 2016-09-30 09:50:19\n---\n\n最近线上几台机器出现莫名的时间有也偏差，查询了一下采用的ntp服务器有些问题\n\n[ntp.api.bz](http://api.bz)好像不能用了。\n\n多好的东西啊。现在已经更换成\n``` bash\nntpdate 0.pool.ntp.org\n```\n这个了。\n也可以使用阿里云的ntp服务\nntp1.aliyun.com\n","slug":"new-ntp-server-domain","published":1,"updated":"2016-10-25T08:50:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkp004guyxud71grl1g","content":"<p>最近线上几台机器出现莫名的时间有也偏差，查询了一下采用的ntp服务器有些问题</p>\n<p><a href=\"http://api.bz\" target=\"_blank\" rel=\"external\">ntp.api.bz</a>好像不能用了。</p>\n<p>多好的东西啊。现在已经更换成<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ntpdate 0.pool.ntp.org</div></pre></td></tr></table></figure></p>\n<p>这个了。<br>也可以使用阿里云的ntp服务<br>ntp1.aliyun.com</p>\n","excerpt":"","more":"<p>最近线上几台机器出现莫名的时间有也偏差，查询了一下采用的ntp服务器有些问题</p>\n<p><a href=\"http://api.bz\">ntp.api.bz</a>好像不能用了。</p>\n<p>多好的东西啊。现在已经更换成<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ntpdate 0.pool.ntp.org</div></pre></td></tr></table></figure></p>\n<p>这个了。<br>也可以使用阿里云的ntp服务<br>ntp1.aliyun.com</p>\n"},{"title":"openwrt","id":"90","date":"2015-10-24T11:35:15.000Z","_content":"\nOpenwrt安装USB驱动挂载U盘\n\n<pre class=\"toolbar:1 lang:default decode:true \" >opkg update\nopkg install kmod-usb-core\nopkg install kmod-usb-ohci #安装usb ohci控制器驱动\n#opkg install kmod-usb-uhci 　#UHCI　USB控制器\nopkg install kmod-usb2 #安装usb2.0\nopkg install kmod-usb-storage #安装usb存储设备驱动\nopkg install usbutils #安装了这个后可以用 lsusb\nopkg install kmod-fs-ext2 #安装ext2分区支持\nopkg install kmod-fs-ext3 #安装ext3分区格式支持组件\nopkg install kmod-fs-ntfs #ntfs内核驱动\nopkg install kmod-nls-cp437    #非常关键\nopkg install kmod-nls-iso8859-1 #非常关键\nopkg install mount.ntfs-3g #挂载ntfs助手\nopkg install mount-utils #挂载卸载工具\nopkg install ntfs-3g #挂载NTFS\nopkg install kmod-fs-vfat #挂载FAT\nopkg install fdisk #硬盘分区管理工具\n</pre> \n\n挂载分区：\n``` bash\nmount  /dev/sda1 /mnt/\n```\n开机自动挂载：","source":"_posts/old_post_wp/openwrt.md","raw":"---\ntitle: openwrt\npermalink: openwrt-pkg-tip1\ntags:\n  - openwrt\n  - config\nid: 90\ncategories:\n  - Docs\ndate: 2015-10-24 19:35:15\n---\n\nOpenwrt安装USB驱动挂载U盘\n\n<pre class=\"toolbar:1 lang:default decode:true \" >opkg update\nopkg install kmod-usb-core\nopkg install kmod-usb-ohci #安装usb ohci控制器驱动\n#opkg install kmod-usb-uhci 　#UHCI　USB控制器\nopkg install kmod-usb2 #安装usb2.0\nopkg install kmod-usb-storage #安装usb存储设备驱动\nopkg install usbutils #安装了这个后可以用 lsusb\nopkg install kmod-fs-ext2 #安装ext2分区支持\nopkg install kmod-fs-ext3 #安装ext3分区格式支持组件\nopkg install kmod-fs-ntfs #ntfs内核驱动\nopkg install kmod-nls-cp437    #非常关键\nopkg install kmod-nls-iso8859-1 #非常关键\nopkg install mount.ntfs-3g #挂载ntfs助手\nopkg install mount-utils #挂载卸载工具\nopkg install ntfs-3g #挂载NTFS\nopkg install kmod-fs-vfat #挂载FAT\nopkg install fdisk #硬盘分区管理工具\n</pre> \n\n挂载分区：\n``` bash\nmount  /dev/sda1 /mnt/\n```\n开机自动挂载：","slug":"openwrt-pkg-tip1","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkq004juyxuebwgfpmp","content":"<p>Openwrt安装USB驱动挂载U盘</p>\n<pre class=\"toolbar:1 lang:default decode:true \">opkg update\nopkg install kmod-usb-core\nopkg install kmod-usb-ohci #安装usb ohci控制器驱动\n#opkg install kmod-usb-uhci 　#UHCI　USB控制器\nopkg install kmod-usb2 #安装usb2.0\nopkg install kmod-usb-storage #安装usb存储设备驱动\nopkg install usbutils #安装了这个后可以用 lsusb\nopkg install kmod-fs-ext2 #安装ext2分区支持\nopkg install kmod-fs-ext3 #安装ext3分区格式支持组件\nopkg install kmod-fs-ntfs #ntfs内核驱动\nopkg install kmod-nls-cp437    #非常关键\nopkg install kmod-nls-iso8859-1 #非常关键\nopkg install mount.ntfs-3g #挂载ntfs助手\nopkg install mount-utils #挂载卸载工具\nopkg install ntfs-3g #挂载NTFS\nopkg install kmod-fs-vfat #挂载FAT\nopkg install fdisk #硬盘分区管理工具\n</pre> \n\n<p>挂载分区：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount  /dev/sda1 /mnt/</div></pre></td></tr></table></figure></p>\n<p>开机自动挂载：</p>\n","excerpt":"","more":"<p>Openwrt安装USB驱动挂载U盘</p>\n<pre class=\"toolbar:1 lang:default decode:true \" >opkg update\nopkg install kmod-usb-core\nopkg install kmod-usb-ohci #安装usb ohci控制器驱动\n#opkg install kmod-usb-uhci 　#UHCI　USB控制器\nopkg install kmod-usb2 #安装usb2.0\nopkg install kmod-usb-storage #安装usb存储设备驱动\nopkg install usbutils #安装了这个后可以用 lsusb\nopkg install kmod-fs-ext2 #安装ext2分区支持\nopkg install kmod-fs-ext3 #安装ext3分区格式支持组件\nopkg install kmod-fs-ntfs #ntfs内核驱动\nopkg install kmod-nls-cp437    #非常关键\nopkg install kmod-nls-iso8859-1 #非常关键\nopkg install mount.ntfs-3g #挂载ntfs助手\nopkg install mount-utils #挂载卸载工具\nopkg install ntfs-3g #挂载NTFS\nopkg install kmod-fs-vfat #挂载FAT\nopkg install fdisk #硬盘分区管理工具\n</pre> \n\n<p>挂载分区：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount  /dev/sda1 /mnt/</div></pre></td></tr></table></figure></p>\n<p>开机自动挂载：</p>\n"},{"title":"os x 挂载远程（不同网段)nfs","date":"2015-10-30T02:33:25.000Z","_content":"\n关于NFS服务器的配置，这里就不写了网上一大堆。\n这里说一下/etc/exports的配置\n\n*需要在exports文件中添加insecure选项，表示接受>1024端口来的请求。因为一般路由器采用动态NAT会使用10000以上端口号连接。*\n``` bash\nvim /etc/exports\n/需要共享的目录 (rw,no_root_squash,no_all_squash,insecure)\nchmod /需要共享的目录 777 权限自己斟酌\n```\nOS X 配置\n```\nsudo -s\n```\n输入密码,或者\n```\nsudo mount -t nfs -o resvport ip:/共享目录 /OSx的目录\n```\n\n关于开机启动\n编写个autonfs.sh\n将挂载命令复制进去\n\n保存\n```\nchmod a+x autonfs.sh\ncd /Library/LaunchDaemons\n```\nvi autonfs.plist\n\n<pre class=\"theme:terminal toolbar:1 lang:default decode:true \" >&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\"\n    \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;autonfs&lt;/string&gt;\n    &lt;key&gt;UserName&lt;/key&gt;\n        &lt;string&gt;root&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n         &lt;string&gt;/Users/skipper/Documents/autonfs.sh&lt;/string&gt;#写你脚本的绝对路径\n         &lt;string&gt;run&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;         </pre> ","source":"_posts/old_post_wp/osxNFS.md","raw":"---\ntitle: os x 挂载远程（不同网段)nfs\npermalink: osx-nfs\ntags:\n  - OSX\ncategories:\n  - Docs\ndate: 2015-10-30 10:33:25\n---\n\n关于NFS服务器的配置，这里就不写了网上一大堆。\n这里说一下/etc/exports的配置\n\n*需要在exports文件中添加insecure选项，表示接受>1024端口来的请求。因为一般路由器采用动态NAT会使用10000以上端口号连接。*\n``` bash\nvim /etc/exports\n/需要共享的目录 (rw,no_root_squash,no_all_squash,insecure)\nchmod /需要共享的目录 777 权限自己斟酌\n```\nOS X 配置\n```\nsudo -s\n```\n输入密码,或者\n```\nsudo mount -t nfs -o resvport ip:/共享目录 /OSx的目录\n```\n\n关于开机启动\n编写个autonfs.sh\n将挂载命令复制进去\n\n保存\n```\nchmod a+x autonfs.sh\ncd /Library/LaunchDaemons\n```\nvi autonfs.plist\n\n<pre class=\"theme:terminal toolbar:1 lang:default decode:true \" >&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\"\n    \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;autonfs&lt;/string&gt;\n    &lt;key&gt;UserName&lt;/key&gt;\n        &lt;string&gt;root&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n         &lt;string&gt;/Users/skipper/Documents/autonfs.sh&lt;/string&gt;#写你脚本的绝对路径\n         &lt;string&gt;run&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;         </pre> ","slug":"osx-nfs","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkr004muyxutz5yczvi","content":"<p>关于NFS服务器的配置，这里就不写了网上一大堆。<br>这里说一下/etc/exports的配置</p>\n<p><em>需要在exports文件中添加insecure选项，表示接受&gt;1024端口来的请求。因为一般路由器采用动态NAT会使用10000以上端口号连接。</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/exports</div><div class=\"line\">/需要共享的目录 (rw,no_root_squash,no_all_squash,insecure)</div><div class=\"line\">chmod /需要共享的目录 777 权限自己斟酌</div></pre></td></tr></table></figure></p>\n<p>OS X 配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"_\">-s</span></div></pre></td></tr></table></figure></p>\n<p>输入密码,或者<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mount -t nfs -o resvport <span class=\"string\">ip:</span><span class=\"regexp\">/共享目录 /</span>OSx的目录</div></pre></td></tr></table></figure></p>\n<p>关于开机启动<br>编写个autonfs.sh<br>将挂载命令复制进去</p>\n<p>保存<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+x autonfs.<span class=\"keyword\">sh</span></div><div class=\"line\"><span class=\"keyword\">cd</span> /Library/LaunchDaemons</div></pre></td></tr></table></figure></p>\n<p>vi autonfs.plist</p>\n<pre class=\"theme:terminal toolbar:1 lang:default decode:true \">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\"\n    \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;autonfs&lt;/string&gt;\n    &lt;key&gt;UserName&lt;/key&gt;\n        &lt;string&gt;root&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n         &lt;string&gt;/Users/skipper/Documents/autonfs.sh&lt;/string&gt;#写你脚本的绝对路径\n         &lt;string&gt;run&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;         </pre> ","excerpt":"","more":"<p>关于NFS服务器的配置，这里就不写了网上一大堆。<br>这里说一下/etc/exports的配置</p>\n<p><em>需要在exports文件中添加insecure选项，表示接受&gt;1024端口来的请求。因为一般路由器采用动态NAT会使用10000以上端口号连接。</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/exports</div><div class=\"line\">/需要共享的目录 (rw,no_root_squash,no_all_squash,insecure)</div><div class=\"line\">chmod /需要共享的目录 777 权限自己斟酌</div></pre></td></tr></table></figure></p>\n<p>OS X 配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"_\">-s</span></div></pre></td></tr></table></figure></p>\n<p>输入密码,或者<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mount -t nfs -o resvport <span class=\"string\">ip:</span><span class=\"regexp\">/共享目录 /</span>OSx的目录</div></pre></td></tr></table></figure></p>\n<p>关于开机启动<br>编写个autonfs.sh<br>将挂载命令复制进去</p>\n<p>保存<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+x autonfs.<span class=\"keyword\">sh</span></div><div class=\"line\"><span class=\"keyword\">cd</span> /Library/LaunchDaemons</div></pre></td></tr></table></figure></p>\n<p>vi autonfs.plist</p>\n<pre class=\"theme:terminal toolbar:1 lang:default decode:true \" >&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\"\n    \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;autonfs&lt;/string&gt;\n    &lt;key&gt;UserName&lt;/key&gt;\n        &lt;string&gt;root&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n         &lt;string&gt;/Users/skipper/Documents/autonfs.sh&lt;/string&gt;#写你脚本的绝对路径\n         &lt;string&gt;run&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;         </pre> "},{"title":"os x 修改主机名和共享名称","id":"182","date":"2015-11-19T16:07:54.000Z","_content":"\n2条命令搞定\n```  bash\nscutil --set HostName MBP\nscutil --set ComputerName MBP\n```","source":"_posts/old_post_wp/osx修改主机名.md","raw":"---\ntitle: os x 修改主机名和共享名称\npermalink: osx-hostname\ntags:\n  - OSX\nid: 182\ncategories:\n  - Docs\ndate: 2015-11-20 00:07:54\n---\n\n2条命令搞定\n```  bash\nscutil --set HostName MBP\nscutil --set ComputerName MBP\n```","slug":"osx-hostname","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbks004quyxu7uesvyg1","content":"<p>2条命令搞定<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scutil --set HostName MBP</div><div class=\"line\">scutil --set ComputerName MBP</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>2条命令搞定<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scutil --set HostName MBP</div><div class=\"line\">scutil --set ComputerName MBP</div></pre></td></tr></table></figure></p>\n"},{"title":"os x 删除java","date":"2015-11-02T14:26:00.000Z","_content":"\n通过删除Java插件文件来卸载 Oracle Java\n插件名字:\nJavaAppletPlugin.plugin。\n\n*要卸载 Java，必须具有管理员权限。*\n\n* 单击位于停靠栏中的 Finder 图标\n* 单击边栏中的应用程序选项卡\n* 在搜索框中，输入 JavaAppletPlugin.plugin\n* 此命令将查找 JavaAppletPlugin.plugin 文件\n* 右键单击 JavaAppletPlugin.plugin，然后选择移到废纸篓","source":"_posts/old_post_wp/osx卸载java.md","raw":"---\ntitle: os x 删除java\npermalink: osx-delete-java\ntags:\n  - OSX\ncategories:\n  - Docs\ndate: 2015-11-02 22:26:00\n---\n\n通过删除Java插件文件来卸载 Oracle Java\n插件名字:\nJavaAppletPlugin.plugin。\n\n*要卸载 Java，必须具有管理员权限。*\n\n* 单击位于停靠栏中的 Finder 图标\n* 单击边栏中的应用程序选项卡\n* 在搜索框中，输入 JavaAppletPlugin.plugin\n* 此命令将查找 JavaAppletPlugin.plugin 文件\n* 右键单击 JavaAppletPlugin.plugin，然后选择移到废纸篓","slug":"osx-delete-java","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkt004tuyxutpqlccbb","content":"<p>通过删除Java插件文件来卸载 Oracle Java<br>插件名字:<br>JavaAppletPlugin.plugin。</p>\n<p><em>要卸载 Java，必须具有管理员权限。</em></p>\n<ul>\n<li>单击位于停靠栏中的 Finder 图标</li>\n<li>单击边栏中的应用程序选项卡</li>\n<li>在搜索框中，输入 JavaAppletPlugin.plugin</li>\n<li>此命令将查找 JavaAppletPlugin.plugin 文件</li>\n<li>右键单击 JavaAppletPlugin.plugin，然后选择移到废纸篓</li>\n</ul>\n","excerpt":"","more":"<p>通过删除Java插件文件来卸载 Oracle Java<br>插件名字:<br>JavaAppletPlugin.plugin。</p>\n<p><em>要卸载 Java，必须具有管理员权限。</em></p>\n<ul>\n<li>单击位于停靠栏中的 Finder 图标</li>\n<li>单击边栏中的应用程序选项卡</li>\n<li>在搜索框中，输入 JavaAppletPlugin.plugin</li>\n<li>此命令将查找 JavaAppletPlugin.plugin 文件</li>\n<li>右键单击 JavaAppletPlugin.plugin，然后选择移到废纸篓</li>\n</ul>\n"},{"title":"pip 更换aliyun的源","date":"2015-12-16T05:54:02.000Z","_content":"\n 执行以下一条命令即可\n\n pip\n<pre class=\"lang:sh decode:true \" >mkdir $HOME/.pip 2&gt;/dev/null;printf \"[global]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\\n[install]\\ntrusted-host=mirrors.aliyun.com\" > $HOME/.pip/pip.conf</pre> \n\neasy_install\n\n<pre class=\"lang:sh decode:true \" >printf \"[easy_install]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\" &gt;$HOME/.pydistutils.cfg</pre> ","source":"_posts/old_post_wp/pip更换源.md","raw":"---\ntitle: pip 更换aliyun的源\npermalink: pip-use-aliyun-mirrors\ntags:\n  - linux\n  - python\n  - shell\ncategories:\n  - Docs\ndate: 2015-12-16 13:54:02\n---\n\n 执行以下一条命令即可\n\n pip\n<pre class=\"lang:sh decode:true \" >mkdir $HOME/.pip 2&gt;/dev/null;printf \"[global]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\\n[install]\\ntrusted-host=mirrors.aliyun.com\" > $HOME/.pip/pip.conf</pre> \n\neasy_install\n\n<pre class=\"lang:sh decode:true \" >printf \"[easy_install]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\" &gt;$HOME/.pydistutils.cfg</pre> ","slug":"pip-use-aliyun-mirrors","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbku004wuyxuc1x3uid5","content":"<p> 执行以下一条命令即可</p>\n<p> pip</p>\n<pre class=\"lang:sh decode:true \">mkdir $HOME/.pip 2&gt;/dev/null;printf \"[global]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\\n[install]\\ntrusted-host=mirrors.aliyun.com\" > $HOME/.pip/pip.conf</pre> \n\n<p>easy_install</p>\n<pre class=\"lang:sh decode:true \">printf \"[easy_install]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\" &gt;$HOME/.pydistutils.cfg</pre> ","excerpt":"","more":"<p> 执行以下一条命令即可</p>\n<p> pip</p>\n<pre class=\"lang:sh decode:true \" >mkdir $HOME/.pip 2&gt;/dev/null;printf \"[global]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\\n[install]\\ntrusted-host=mirrors.aliyun.com\" > $HOME/.pip/pip.conf</pre> \n\n<p>easy_install</p>\n<pre class=\"lang:sh decode:true \" >printf \"[easy_install]\\nindex-url=http://mirrors.aliyun.com/pypi/simple\" &gt;$HOME/.pydistutils.cfg</pre> "},{"title":"python %r和%s的使用环境","date":"2015-10-30T14:59:50.000Z","_content":"\n一般情况两者相同\n但是表现函数不一样\n%s 是str()\n%r 是rper()\n参考\n[http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python](http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python)","source":"_posts/old_post_wp/python_r_s_2.md","raw":"---\ntitle: python %r和%s的使用环境\npermalink: python_r_s-usage\ntags:\n  - python\ncategories:\n  - Docs\ndate: 2015-10-30 22:59:50\n---\n\n一般情况两者相同\n但是表现函数不一样\n%s 是str()\n%r 是rper()\n参考\n[http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python](http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python)","slug":"python_r_s-usage","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkx004zuyxu7p5kur73","content":"<p>一般情况两者相同<br>但是表现函数不一样<br>%s 是str()<br>%r 是rper()<br>参考<br><a href=\"http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python</a></p>\n","excerpt":"","more":"<p>一般情况两者相同<br>但是表现函数不一样<br>%s 是str()<br>%r 是rper()<br>参考<br><a href=\"http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python\">http://stackoverflow.com/questions/6005159/when-to-use-r-instead-of-s-in-python</a></p>\n"},{"title":"python中\r和，","id":"126","date":"2015-10-30T14:38:53.000Z","_content":"\n\\r表示 光标移动到开头 ，表示不换行\n比如 \n<pre class=\"lang:default decode:true \" >print 'finally done\\r',\nprint 'aaaa\\ri'\nprint 'bbbbbbbbbbbbbbbbbb',\nprint 'ccc'</pre> \n\n执行结果是\n\n<pre class=\"lang:default decode:true \" >[root@inpeace inpeace.cn]# python demo.py \niaaally done\nbbbbbbbbbbbbbbbbbb ccc\n</pre> \n<!--more-->\n\n比如这个\n<pre class=\"lang:default decode:true \" >while True:\n    for i in [\"/\",\"-\",\"|\",\"\\\\\",\"|\"]:\n        print \"%s\\r\" % i,</pre> \n官方解释\nWe put a , (comma) at the end of each print line. This is so print doesn't end the line with a newline character and go to the next line.","source":"_posts/old_post_wp/python_r_s.md","raw":"---\ntitle: \"python中\\r和，\"\npermalink: python-print-tips-1\ntags:\n  - python\nid: 126\ncategories:\n  - Docs\ndate: 2015-10-30 22:38:53\n---\n\n\\r表示 光标移动到开头 ，表示不换行\n比如 \n<pre class=\"lang:default decode:true \" >print 'finally done\\r',\nprint 'aaaa\\ri'\nprint 'bbbbbbbbbbbbbbbbbb',\nprint 'ccc'</pre> \n\n执行结果是\n\n<pre class=\"lang:default decode:true \" >[root@inpeace inpeace.cn]# python demo.py \niaaally done\nbbbbbbbbbbbbbbbbbb ccc\n</pre> \n<!--more-->\n\n比如这个\n<pre class=\"lang:default decode:true \" >while True:\n    for i in [\"/\",\"-\",\"|\",\"\\\\\",\"|\"]:\n        print \"%s\\r\" % i,</pre> \n官方解释\nWe put a , (comma) at the end of each print line. This is so print doesn't end the line with a newline character and go to the next line.","slug":"python-print-tips-1","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbky0052uyxu3rf0ymqw","content":"<p>\\r表示 光标移动到开头 ，表示不换行<br>比如 </p>\n<pre class=\"lang:default decode:true \">print 'finally done\\r',\nprint 'aaaa\\ri'\nprint 'bbbbbbbbbbbbbbbbbb',\nprint 'ccc'</pre> \n\n<p>执行结果是</p>\n<p><pre class=\"lang:default decode:true \">[root@inpeace inpeace.cn]# python demo.py<br>iaaally done<br>bbbbbbbbbbbbbbbbbb ccc<br></pre><br><a id=\"more\"></a></p>\n<p>比如这个</p>\n<p><pre class=\"lang:default decode:true \">while True:<br>    for i in [“/“,”-“,”|”,”\\“,”|”]:<br>        print “%s\\r” % i,</pre><br>官方解释<br>We put a , (comma) at the end of each print line. This is so print doesn’t end the line with a newline character and go to the next line.</p>\n","excerpt":"<p>\\r表示 光标移动到开头 ，表示不换行<br>比如 </p>\n<pre class=\"lang:default decode:true \" >print 'finally done\\r',\nprint 'aaaa\\ri'\nprint 'bbbbbbbbbbbbbbbbbb',\nprint 'ccc'</pre> \n\n<p>执行结果是</p>\n<p><pre class=\"lang:default decode:true \" >[root@inpeace inpeace.cn]# python demo.py<br>iaaally done<br>bbbbbbbbbbbbbbbbbb ccc<br></pre><br>","more":"</p>\n<p>比如这个</p>\n<p><pre class=\"lang:default decode:true \" >while True:<br>    for i in [“/“,”-“,”|”,”\\“,”|”]:<br>        print “%s\\r” % i,</pre><br>官方解释<br>We put a , (comma) at the end of each print line. This is so print doesn’t end the line with a newline character and go to the next line.</p>"},{"title":"python排错module object has no attribute","date":"2015-11-25T10:26:48.000Z","_content":"\n一般是你的project名称和导入的模块名称重复了。\npython文件在命名的时候要避免和已知的模块名称重复\n","source":"_posts/old_post_wp/python排错.md","raw":"---\ntitle: python排错module object has no attribute\ntags:\n  - python\n  - errors\ncategories:\n  - Docs\ndate: 2015-11-25 18:26:48\npermalink: python-error-no-attribute\n---\n\n一般是你的project名称和导入的模块名称重复了。\npython文件在命名的时候要避免和已知的模块名称重复\n","slug":"python-error-no-attribute","published":1,"updated":"2016-10-25T08:53:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkz0055uyxuiei2rkpz","content":"<p>一般是你的project名称和导入的模块名称重复了。<br>python文件在命名的时候要避免和已知的模块名称重复</p>\n","excerpt":"","more":"<p>一般是你的project名称和导入的模块名称重复了。<br>python文件在命名的时候要避免和已知的模块名称重复</p>\n"},{"title":"正则表达式","date":"2015-12-21T03:26:20.000Z","_content":"\n[http://deerchao.net/tutorials/regex/regex.htm](http://deerchao.net/tutorials/regex/regex.htm)\n\npython正则\n[python正则表达式](http://www.cnblogs.com/fnng/archive/2013/05/20/3089816.html)","source":"_posts/old_post_wp/python正则.md","raw":"---\ntitle: 正则表达式\npermalink: python-reg\ntags:\n  - python\ncategories:\n  - Docs\ndate: 2015-12-21 11:26:20\n---\n\n[http://deerchao.net/tutorials/regex/regex.htm](http://deerchao.net/tutorials/regex/regex.htm)\n\npython正则\n[python正则表达式](http://www.cnblogs.com/fnng/archive/2013/05/20/3089816.html)","slug":"python-reg","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbkz0058uyxujne89x7b","content":"<p><a href=\"http://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\">http://deerchao.net/tutorials/regex/regex.htm</a></p>\n<p>python正则<br><a href=\"http://www.cnblogs.com/fnng/archive/2013/05/20/3089816.html\" target=\"_blank\" rel=\"external\">python正则表达式</a></p>\n","excerpt":"","more":"<p><a href=\"http://deerchao.net/tutorials/regex/regex.htm\">http://deerchao.net/tutorials/regex/regex.htm</a></p>\n<p>python正则<br><a href=\"http://www.cnblogs.com/fnng/archive/2013/05/20/3089816.html\">python正则表达式</a></p>\n"},{"title":"python自动补全（tab）","date":"2015-10-20T06:25:03.000Z","_content":"\n方法一：（python自动补全tab脚本 只在centos 和osx 测试过)\n1,执行以下命令\n\n<pre class=\"toolbar:1 lang:default decode:true \" >wget http://file.inpeace.cn/autotab.sh</pre> \n2,然后执行\n\n<pre class=\"lang:default decode:true \" >source autotab.sh </pre> \n\n方法二：\n<!--more-->\n\n1，在~目录下创建 .pythonstartup文件。\n\n<pre class=\"lang:default decode:true \" >[root@7 ~]# vi .pythonstartup\n</pre> \n\n2,复制以下内容至.pythonstartup文件内\n\n<pre class=\"theme:eclipse toolbar:1 toolbar-overlay:false lang:python decode:true \" >\n#!/usr/bin/python \n# python startup file \n\nimport sys\nimport readline\nimport rlcompleter\nimport atexit\nimport os\n\nreadline.parse_and_bind('tab: complete')\n\nhistoryfile = os.path.join(os.environ['HOME'],'.pythonhistory')\ntry:\n        readline.read_history_file(historyfile)\nexcept IOError:\n        pass\natexit.register(readline.write_history_file,historyfile)\ndel os,historyfile,readline,rlcompleter\n###from inpeace.cn</pre> \n\n3，打开bash环境变量配置文件\n\n<pre class=\"lang:default decode:true \" >[root@7 ~]# vi ~/.bashrc \n</pre> \n添加如下内容至文件末尾\n\n<pre class=\"lang:default decode:true \" >export PYTHONSTARTUP=~/.pythonstartup\n</pre> \n或者直接直接执行\n\n<pre class=\"lang:default decode:true \" >echo \"export PYTHONSTARTUP=~/.pythonstartup\" &gt;&gt; ~/.bashrc\n</pre> \n\n4 使环境变量生效\n\n<pre class=\"lang:default decode:true \" >source ~/.bashrc</pre> \n\n查看结果","source":"_posts/old_post_wp/python自动补全.md","raw":"---\ntitle: python自动补全（tab）\npermalink: python-auto-tab\ntags:\n  - python\ncategories:\n  - Docs\ndate: 2015-10-20 14:25:03\n---\n\n方法一：（python自动补全tab脚本 只在centos 和osx 测试过)\n1,执行以下命令\n\n<pre class=\"toolbar:1 lang:default decode:true \" >wget http://file.inpeace.cn/autotab.sh</pre> \n2,然后执行\n\n<pre class=\"lang:default decode:true \" >source autotab.sh </pre> \n\n方法二：\n<!--more-->\n\n1，在~目录下创建 .pythonstartup文件。\n\n<pre class=\"lang:default decode:true \" >[root@7 ~]# vi .pythonstartup\n</pre> \n\n2,复制以下内容至.pythonstartup文件内\n\n<pre class=\"theme:eclipse toolbar:1 toolbar-overlay:false lang:python decode:true \" >\n#!/usr/bin/python \n# python startup file \n\nimport sys\nimport readline\nimport rlcompleter\nimport atexit\nimport os\n\nreadline.parse_and_bind('tab: complete')\n\nhistoryfile = os.path.join(os.environ['HOME'],'.pythonhistory')\ntry:\n        readline.read_history_file(historyfile)\nexcept IOError:\n        pass\natexit.register(readline.write_history_file,historyfile)\ndel os,historyfile,readline,rlcompleter\n###from inpeace.cn</pre> \n\n3，打开bash环境变量配置文件\n\n<pre class=\"lang:default decode:true \" >[root@7 ~]# vi ~/.bashrc \n</pre> \n添加如下内容至文件末尾\n\n<pre class=\"lang:default decode:true \" >export PYTHONSTARTUP=~/.pythonstartup\n</pre> \n或者直接直接执行\n\n<pre class=\"lang:default decode:true \" >echo \"export PYTHONSTARTUP=~/.pythonstartup\" &gt;&gt; ~/.bashrc\n</pre> \n\n4 使环境变量生效\n\n<pre class=\"lang:default decode:true \" >source ~/.bashrc</pre> \n\n查看结果","slug":"python-auto-tab","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl0005buyxuui9zd8kc","content":"<p>方法一：（python自动补全tab脚本 只在centos 和osx 测试过)<br>1,执行以下命令</p>\n<pre class=\"toolbar:1 lang:default decode:true \">wget http://file.inpeace.cn/autotab.sh</pre> \n2,然后执行\n\n<pre class=\"lang:default decode:true \">source autotab.sh </pre> \n\n<p>方法二：<br><a id=\"more\"></a></p>\n<p>1，在~目录下创建 .pythonstartup文件。</p>\n<pre class=\"lang:default decode:true \">[root@7 ~]# vi .pythonstartup\n</pre> \n\n<p>2,复制以下内容至.pythonstartup文件内</p>\n<pre class=\"theme:eclipse toolbar:1 toolbar-overlay:false lang:python decode:true \">\n#!/usr/bin/python \n# python startup file \n\nimport sys\nimport readline\nimport rlcompleter\nimport atexit\nimport os\n\nreadline.parse_and_bind('tab: complete')\n\nhistoryfile = os.path.join(os.environ['HOME'],'.pythonhistory')\ntry:\n        readline.read_history_file(historyfile)\nexcept IOError:\n        pass\natexit.register(readline.write_history_file,historyfile)\ndel os,historyfile,readline,rlcompleter\n###from inpeace.cn</pre> \n\n<p>3，打开bash环境变量配置文件</p>\n<pre class=\"lang:default decode:true \">[root@7 ~]# vi ~/.bashrc \n</pre> \n添加如下内容至文件末尾\n\n<pre class=\"lang:default decode:true \">export PYTHONSTARTUP=~/.pythonstartup\n</pre> \n或者直接直接执行\n\n<pre class=\"lang:default decode:true \">echo \"export PYTHONSTARTUP=~/.pythonstartup\" &gt;&gt; ~/.bashrc\n</pre> \n\n<p>4 使环境变量生效</p>\n<pre class=\"lang:default decode:true \">source ~/.bashrc</pre> \n\n<p>查看结果</p>\n","excerpt":"<p>方法一：（python自动补全tab脚本 只在centos 和osx 测试过)<br>1,执行以下命令</p>\n<pre class=\"toolbar:1 lang:default decode:true \" >wget http://file.inpeace.cn/autotab.sh</pre> \n2,然后执行\n\n<pre class=\"lang:default decode:true \" >source autotab.sh </pre> \n\n<p>方法二：<br>","more":"</p>\n<p>1，在~目录下创建 .pythonstartup文件。</p>\n<pre class=\"lang:default decode:true \" >[root@7 ~]# vi .pythonstartup\n</pre> \n\n<p>2,复制以下内容至.pythonstartup文件内</p>\n<pre class=\"theme:eclipse toolbar:1 toolbar-overlay:false lang:python decode:true \" >\n#!/usr/bin/python \n# python startup file \n\nimport sys\nimport readline\nimport rlcompleter\nimport atexit\nimport os\n\nreadline.parse_and_bind('tab: complete')\n\nhistoryfile = os.path.join(os.environ['HOME'],'.pythonhistory')\ntry:\n        readline.read_history_file(historyfile)\nexcept IOError:\n        pass\natexit.register(readline.write_history_file,historyfile)\ndel os,historyfile,readline,rlcompleter\n###from inpeace.cn</pre> \n\n<p>3，打开bash环境变量配置文件</p>\n<pre class=\"lang:default decode:true \" >[root@7 ~]# vi ~/.bashrc \n</pre> \n添加如下内容至文件末尾\n\n<pre class=\"lang:default decode:true \" >export PYTHONSTARTUP=~/.pythonstartup\n</pre> \n或者直接直接执行\n\n<pre class=\"lang:default decode:true \" >echo \"export PYTHONSTARTUP=~/.pythonstartup\" &gt;&gt; ~/.bashrc\n</pre> \n\n<p>4 使环境变量生效</p>\n<pre class=\"lang:default decode:true \" >source ~/.bashrc</pre> \n\n<p>查看结果</p>"},{"title":"redhat7使用centos7的yum源和第三方rhel7源","id":"49","date":"2015-10-19T11:58:52.000Z","_content":"\n1、搜索redhat的yum软件包\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n2、卸载这些软件包\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n3、找到centos下得yum包。注意*号，代表版本号，自行替换\n\n进入 /usr/local/src/\n\n<!--more-->\n\n下载\n<pre class=\"lang:default decode:true \">[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-*.centos.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-metadata-parser-*.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-utils-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-updateonboot-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-*.noarch.rpm</pre>\n4、安装这些yum软件包\n<pre class=\"lang:default decode:true \">rpm -ivh yum-*</pre>\n5、下载centos源\n<pre class=\"wrap:true lang:default decode:true \">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</pre>\n6、下载第三方redhat源\n<pre class=\"wrap:true lang:default decode:true \">yum -y install epel-release &amp;amp;&amp;amp; rpm -Uvh https://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</pre>","source":"_posts/old_post_wp/redhat7使用centos7的yum源和第三方rhel7源.md","raw":"---\ntitle: redhat7使用centos7的yum源和第三方rhel7源\npermalink: redhat-use-centos-yum\nid: 49\ncategories:\n  - Docs\ndate: 2015-10-19 19:58:52\ntags:\n  - config\n  \n---\n\n1、搜索redhat的yum软件包\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n2、卸载这些软件包\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n3、找到centos下得yum包。注意*号，代表版本号，自行替换\n\n进入 /usr/local/src/\n\n<!--more-->\n\n下载\n<pre class=\"lang:default decode:true \">[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-*.centos.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-metadata-parser-*.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-utils-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-updateonboot-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-*.noarch.rpm</pre>\n4、安装这些yum软件包\n<pre class=\"lang:default decode:true \">rpm -ivh yum-*</pre>\n5、下载centos源\n<pre class=\"wrap:true lang:default decode:true \">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</pre>\n6、下载第三方redhat源\n<pre class=\"wrap:true lang:default decode:true \">yum -y install epel-release &amp;amp;&amp;amp; rpm -Uvh https://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</pre>","slug":"redhat-use-centos-yum","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl1005euyxu3asem6e1","content":"<p>1、搜索redhat的yum软件包</p>\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n2、卸载这些软件包\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n3、找到centos下得yum包。注意*号，代表版本号，自行替换\n\n进入 /usr/local/src/\n\n<a id=\"more\"></a>\n\n下载\n<pre class=\"lang:default decode:true \">[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-*.centos.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-metadata-parser-*.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-utils-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-updateonboot-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-*.noarch.rpm</pre>\n4、安装这些yum软件包\n<pre class=\"lang:default decode:true \">rpm -ivh yum-*</pre>\n5、下载centos源\n<pre class=\"wrap:true lang:default decode:true \">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</pre>\n6、下载第三方redhat源\n<pre class=\"wrap:true lang:default decode:true \">yum -y install epel-release &amp;amp;&amp;amp; rpm -Uvh https://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</pre>","excerpt":"<p>1、搜索redhat的yum软件包</p>\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n2、卸载这些软件包\n<pre class=\"lang:default decode:true \">rpm -e yum 软件包名称</pre>\n3、找到centos下得yum包。注意*号，代表版本号，自行替换\n\n进入 /usr/local/src/","more":"下载\n<pre class=\"lang:default decode:true \">[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-*.centos.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-metadata-parser-*.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-utils-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-updateonboot-*.noarch.rpm\n[root@localhost ~]# wget https://mirrors.aliyun.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-*.noarch.rpm</pre>\n4、安装这些yum软件包\n<pre class=\"lang:default decode:true \">rpm -ivh yum-*</pre>\n5、下载centos源\n<pre class=\"wrap:true lang:default decode:true \">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</pre>\n6、下载第三方redhat源\n<pre class=\"wrap:true lang:default decode:true \">yum -y install epel-release &amp;amp;&amp;amp; rpm -Uvh https://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</pre>"},{"title":"saltstack master端 刷新grains","date":"2015-11-26T10:40:20.000Z","_content":"\n[http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html](http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html)\n4.2.8\\. 同步Grains\n\nSyncing grains can be done a number of ways, they are automatically synced when state.highstate is called, or (as noted above) the grains can be manually synced and reloaded by calling the  \n\n<pre class=\"lang:default decode:true \" >saltutil.sync_grains or saltutil.sync_all functions.</pre> \n\n具体\n``` bash\n salt '*' saltutil.sync_grains\n```","source":"_posts/old_post_wp/saltstack master端 刷新grains.md","raw":"---\ntitle: saltstack master端 刷新grains\npermalink: salt-flush-grains\ntags:\n  - saltstack\n  - linux\ncategories:\n  - Docs\ndate: 2015-11-26 18:40:20\n---\n\n[http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html](http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html)\n4.2.8\\. 同步Grains\n\nSyncing grains can be done a number of ways, they are automatically synced when state.highstate is called, or (as noted above) the grains can be manually synced and reloaded by calling the  \n\n<pre class=\"lang:default decode:true \" >saltutil.sync_grains or saltutil.sync_all functions.</pre> \n\n具体\n``` bash\n salt '*' saltutil.sync_grains\n```","slug":"salt-flush-grains","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl2005huyxuve0evtli","content":"<p><a href=\"http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html\" target=\"_blank\" rel=\"external\">http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html</a><br>4.2.8. 同步Grains</p>\n<p>Syncing grains can be done a number of ways, they are automatically synced when state.highstate is called, or (as noted above) the grains can be manually synced and reloaded by calling the  </p>\n<pre class=\"lang:default decode:true \">saltutil.sync_grains or saltutil.sync_all functions.</pre> \n\n<p>具体<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">salt <span class=\"string\">'*'</span> saltutil.sync_grains</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><a href=\"http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html\">http://docs.saltstack.cn/zh_CN/latest/topics/targeting/grains.html</a><br>4.2.8. 同步Grains</p>\n<p>Syncing grains can be done a number of ways, they are automatically synced when state.highstate is called, or (as noted above) the grains can be manually synced and reloaded by calling the  </p>\n<pre class=\"lang:default decode:true \" >saltutil.sync_grains or saltutil.sync_all functions.</pre> \n\n<p>具体<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">salt <span class=\"string\">'*'</span> saltutil.sync_grains</div></pre></td></tr></table></figure></p>\n"},{"title":"saltstack分发ssh公钥","date":"2016-01-05T23:47:57.000Z","_content":"\n&nbsp;\n\n1，首先在master端创建公钥\n``` bash\nssh-keygen -t rsa\n```\n2，创建/srv/salt/ssh文件夹\n``` bash\nmkdir -pv /srv/salt/ssh\n```\n3，将公钥拷贝到/srv/salt/ssh文件夹中\n``` bash\ncp /root/.ssh/id_rsa.pub /srv/salt/ssh/\n```\n<!--more-->\n\n4，分发到minion端上\n``` bash\nsalt ‘*’ ssh.set_auth_key_from_file root salt://ssh/id_rsa.pub\n```\n这样就可以直接使用ssh不用密码登陆了，不过第一次使用ssh连接需要添加ssh_known.","source":"_posts/old_post_wp/saltstack分发ssh公钥.md","raw":"---\ntitle: saltstack分发ssh公钥\npermalink: salt-pub-ssh\ntags:\n  - saltstack\n  - linux\ncategories:\n  - Docs\ndate: 2016-01-06 07:47:57\n---\n\n&nbsp;\n\n1，首先在master端创建公钥\n``` bash\nssh-keygen -t rsa\n```\n2，创建/srv/salt/ssh文件夹\n``` bash\nmkdir -pv /srv/salt/ssh\n```\n3，将公钥拷贝到/srv/salt/ssh文件夹中\n``` bash\ncp /root/.ssh/id_rsa.pub /srv/salt/ssh/\n```\n<!--more-->\n\n4，分发到minion端上\n``` bash\nsalt ‘*’ ssh.set_auth_key_from_file root salt://ssh/id_rsa.pub\n```\n这样就可以直接使用ssh不用密码登陆了，不过第一次使用ssh连接需要添加ssh_known.","slug":"salt-pub-ssh","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl4005kuyxumva9d8sf","content":"<p>&nbsp;</p>\n<p>1，首先在master端创建公钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>\n<p>2，创建/srv/salt/ssh文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -pv /srv/salt/ssh</div></pre></td></tr></table></figure></p>\n<p>3，将公钥拷贝到/srv/salt/ssh文件夹中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /root/.ssh/id_rsa.pub /srv/salt/ssh/</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>4，分发到minion端上<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">salt ‘*’ ssh.set_auth_key_from_file root salt://ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>\n<p>这样就可以直接使用ssh不用密码登陆了，不过第一次使用ssh连接需要添加ssh_known.</p>\n","excerpt":"<p>&nbsp;</p>\n<p>1，首先在master端创建公钥<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>\n<p>2，创建/srv/salt/ssh文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -pv /srv/salt/ssh</div></pre></td></tr></table></figure></p>\n<p>3，将公钥拷贝到/srv/salt/ssh文件夹中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /root/.ssh/id_rsa.pub /srv/salt/ssh/</div></pre></td></tr></table></figure></p>","more":"<p>4，分发到minion端上<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">salt ‘*’ ssh.set_auth_key_from_file root salt://ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>\n<p>这样就可以直接使用ssh不用密码登陆了，不过第一次使用ssh连接需要添加ssh_known.</p>"},{"title":"saltstack执行salt命令时很慢","date":"2016-01-27T13:37:19.000Z","_content":"\n今天有个小伙伴问我为啥他的salt在执行命令的时候感觉响应的很慢。就是敲个命令半天才反应过来。\n\n&nbsp;\n\n原因: 没有做主机名解析。master端一定要能解析自己的主机名，可以使用dns，可以用hosts文件。\n\n解决办法:\n\n在hosts文件中添加本机的主机名解析。","source":"_posts/old_post_wp/saltstack执行salt命令时很慢.md","raw":"---\ntitle: saltstack执行salt命令时很慢\npermalink: salt-slow\ntags:\n  - saltstack\n  - 优化\ncategories:\n  - Docs\ndate: 2016-01-27 21:37:19\n---\n\n今天有个小伙伴问我为啥他的salt在执行命令的时候感觉响应的很慢。就是敲个命令半天才反应过来。\n\n&nbsp;\n\n原因: 没有做主机名解析。master端一定要能解析自己的主机名，可以使用dns，可以用hosts文件。\n\n解决办法:\n\n在hosts文件中添加本机的主机名解析。","slug":"salt-slow","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl5005nuyxu8kam0x3y","content":"<p>今天有个小伙伴问我为啥他的salt在执行命令的时候感觉响应的很慢。就是敲个命令半天才反应过来。</p>\n<p>&nbsp;</p>\n<p>原因: 没有做主机名解析。master端一定要能解析自己的主机名，可以使用dns，可以用hosts文件。</p>\n<p>解决办法:</p>\n<p>在hosts文件中添加本机的主机名解析。</p>\n","excerpt":"","more":"<p>今天有个小伙伴问我为啥他的salt在执行命令的时候感觉响应的很慢。就是敲个命令半天才反应过来。</p>\n<p>&nbsp;</p>\n<p>原因: 没有做主机名解析。master端一定要能解析自己的主机名，可以使用dns，可以用hosts文件。</p>\n<p>解决办法:</p>\n<p>在hosts文件中添加本机的主机名解析。</p>\n"},{"title":"screen  一个实用的工具","id":"195","date":"2015-12-01T06:33:01.000Z","_content":"\n这几天因为水晶头的原因导致我登陆远程ssh的时候老是掉线，然后就是悲剧。就想找一个有没有能在我掉线的时候，帮我保存ssh状态的软件。果然让我找到了，就是这个screen。\ncentos/rhel 直接使用 \n\n<pre class=\"lang:sh decode:true \" >yum install screen</pre> \n\n 即可使用\n\n常用方法\n用name创建一个screen\n\n<pre class=\"lang:sh decode:true \" >screen -S name </pre> \n\n退出可以使用exit\n<!--more-->\n\n如果想暂时离开一会还要用就用\nctrl -a d\n就是按住ctrl 然后依次按下a和d\n\nscreen -ls 查看已经有的screen\n\n<pre class=\"lang:sh decode:true \" >[root@xhmysql ~]# screen -ls\nThere are screens on:\n 21065.mysql (Detached)\n 3909.x (Detached)\n Sockets in /var/run/screen/S-root.</pre> \n\n恢复screen\nscreen -r pid 恢复screen\n\n<pre class=\"lang:sh decode:true \" >[root@xhmysql ~]# screen -D -r 21065\n</pre> \n\ntips:\n\n可以使用screen -D -r pid 恢复还被占用的screen.\n&nbsp;\n\n&nbsp;\n\n一个IBM的文档写的非常好\n[http://www.ibm.com/developerworks/cn/linux/l-cn-screen/](http://www.ibm.com/developerworks/cn/linux/l-cn-screen/)\n这个也不错\n[http://www.cnblogs.com/ywl925/p/3604530.html](http://www.cnblogs.com/ywl925/p/3604530.html)","source":"_posts/old_post_wp/screen使用.md","raw":"---\ntitle: screen  一个实用的工具\npermalink: screen-usage\ntags:\n  - linux\n  - shell\n  - 实用工具\nid: 195\ncategories:\n  - Docs\ndate: 2015-12-01 14:33:01\n---\n\n这几天因为水晶头的原因导致我登陆远程ssh的时候老是掉线，然后就是悲剧。就想找一个有没有能在我掉线的时候，帮我保存ssh状态的软件。果然让我找到了，就是这个screen。\ncentos/rhel 直接使用 \n\n<pre class=\"lang:sh decode:true \" >yum install screen</pre> \n\n 即可使用\n\n常用方法\n用name创建一个screen\n\n<pre class=\"lang:sh decode:true \" >screen -S name </pre> \n\n退出可以使用exit\n<!--more-->\n\n如果想暂时离开一会还要用就用\nctrl -a d\n就是按住ctrl 然后依次按下a和d\n\nscreen -ls 查看已经有的screen\n\n<pre class=\"lang:sh decode:true \" >[root@xhmysql ~]# screen -ls\nThere are screens on:\n 21065.mysql (Detached)\n 3909.x (Detached)\n Sockets in /var/run/screen/S-root.</pre> \n\n恢复screen\nscreen -r pid 恢复screen\n\n<pre class=\"lang:sh decode:true \" >[root@xhmysql ~]# screen -D -r 21065\n</pre> \n\ntips:\n\n可以使用screen -D -r pid 恢复还被占用的screen.\n&nbsp;\n\n&nbsp;\n\n一个IBM的文档写的非常好\n[http://www.ibm.com/developerworks/cn/linux/l-cn-screen/](http://www.ibm.com/developerworks/cn/linux/l-cn-screen/)\n这个也不错\n[http://www.cnblogs.com/ywl925/p/3604530.html](http://www.cnblogs.com/ywl925/p/3604530.html)","slug":"screen-usage","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl6005quyxu2ddsw9zb","content":"<p>这几天因为水晶头的原因导致我登陆远程ssh的时候老是掉线，然后就是悲剧。就想找一个有没有能在我掉线的时候，帮我保存ssh状态的软件。果然让我找到了，就是这个screen。<br>centos/rhel 直接使用 </p>\n<pre class=\"lang:sh decode:true \">yum install screen</pre> \n\n<p> 即可使用</p>\n<p>常用方法<br>用name创建一个screen</p>\n<pre class=\"lang:sh decode:true \">screen -S name </pre> \n\n<p>退出可以使用exit<br><a id=\"more\"></a></p>\n<p>如果想暂时离开一会还要用就用<br>ctrl -a d<br>就是按住ctrl 然后依次按下a和d</p>\n<p>screen -ls 查看已经有的screen</p>\n<pre class=\"lang:sh decode:true \">[root@xhmysql ~]# screen -ls\nThere are screens on:\n 21065.mysql (Detached)\n 3909.x (Detached)\n Sockets in /var/run/screen/S-root.</pre> \n\n<p>恢复screen<br>screen -r pid 恢复screen</p>\n<pre class=\"lang:sh decode:true \">[root@xhmysql ~]# screen -D -r 21065\n</pre> \n\n<p>tips:</p>\n<p>可以使用screen -D -r pid 恢复还被占用的screen.<br>&nbsp;</p>\n<p>&nbsp;</p>\n<p>一个IBM的文档写的非常好<br><a href=\"http://www.ibm.com/developerworks/cn/linux/l-cn-screen/\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/linux/l-cn-screen/</a><br>这个也不错<br><a href=\"http://www.cnblogs.com/ywl925/p/3604530.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/ywl925/p/3604530.html</a></p>\n","excerpt":"<p>这几天因为水晶头的原因导致我登陆远程ssh的时候老是掉线，然后就是悲剧。就想找一个有没有能在我掉线的时候，帮我保存ssh状态的软件。果然让我找到了，就是这个screen。<br>centos/rhel 直接使用 </p>\n<pre class=\"lang:sh decode:true \" >yum install screen</pre> \n\n<p> 即可使用</p>\n<p>常用方法<br>用name创建一个screen</p>\n<pre class=\"lang:sh decode:true \" >screen -S name </pre> \n\n<p>退出可以使用exit<br>","more":"</p>\n<p>如果想暂时离开一会还要用就用<br>ctrl -a d<br>就是按住ctrl 然后依次按下a和d</p>\n<p>screen -ls 查看已经有的screen</p>\n<pre class=\"lang:sh decode:true \" >[root@xhmysql ~]# screen -ls\nThere are screens on:\n 21065.mysql (Detached)\n 3909.x (Detached)\n Sockets in /var/run/screen/S-root.</pre> \n\n<p>恢复screen<br>screen -r pid 恢复screen</p>\n<pre class=\"lang:sh decode:true \" >[root@xhmysql ~]# screen -D -r 21065\n</pre> \n\n<p>tips:</p>\n<p>可以使用screen -D -r pid 恢复还被占用的screen.<br>&nbsp;</p>\n<p>&nbsp;</p>\n<p>一个IBM的文档写的非常好<br><a href=\"http://www.ibm.com/developerworks/cn/linux/l-cn-screen/\">http://www.ibm.com/developerworks/cn/linux/l-cn-screen/</a><br>这个也不错<br><a href=\"http://www.cnblogs.com/ywl925/p/3604530.html\">http://www.cnblogs.com/ywl925/p/3604530.html</a></p>"},{"title":"tcpdump","id":"348","date":"2015-12-22T14:29:52.000Z","_content":"\n[http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html](http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html)","source":"_posts/old_post_wp/tcpdump.md","raw":"---\ntitle: tcpdump\nid: 348\ncategories:\n  - Docs\ndate: 2015-12-22 22:29:52\ntags:\n  - linux\n  - 实用工具\n  \n---\n\n[http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html](http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html)","slug":"old_post_wp/tcpdump","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl7005uuyxuxumhn3tn","content":"<p><a href=\"http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html</a></p>\n","excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html\">http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html</a></p>\n"},{"title":"The Knights","date":"2015-10-28T03:29:47.000Z","_content":"\n### I will be kind to the weak.\n### I will be brave and against the strong.\n### I will fight the all who do wrong.\n### I will fight for those who cannot fight.\n### I will help those who call me for help.\n### I will harm no white woman.\n### I will help my brother knight.\n### I will be true to my friends.\n### I will be faithful in love.","source":"_posts/old_post_wp/the-knights.md","raw":"---\ntitle: The Knights\npermalink: the-knights\ncategories:\n  - 随笔\ndate: 2015-10-28 11:29:47\ntags:\n  - 思 \n---\n\n### I will be kind to the weak.\n### I will be brave and against the strong.\n### I will fight the all who do wrong.\n### I will fight for those who cannot fight.\n### I will help those who call me for help.\n### I will harm no white woman.\n### I will help my brother knight.\n### I will be true to my friends.\n### I will be faithful in love.","slug":"the-knights","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl8005xuyxuids4ibao","content":"<h3 id=\"I-will-be-kind-to-the-weak\"><a href=\"#I-will-be-kind-to-the-weak\" class=\"headerlink\" title=\"I will be kind to the weak.\"></a>I will be kind to the weak.</h3><h3 id=\"I-will-be-brave-and-against-the-strong\"><a href=\"#I-will-be-brave-and-against-the-strong\" class=\"headerlink\" title=\"I will be brave and against the strong.\"></a>I will be brave and against the strong.</h3><h3 id=\"I-will-fight-the-all-who-do-wrong\"><a href=\"#I-will-fight-the-all-who-do-wrong\" class=\"headerlink\" title=\"I will fight the all who do wrong.\"></a>I will fight the all who do wrong.</h3><h3 id=\"I-will-fight-for-those-who-cannot-fight\"><a href=\"#I-will-fight-for-those-who-cannot-fight\" class=\"headerlink\" title=\"I will fight for those who cannot fight.\"></a>I will fight for those who cannot fight.</h3><h3 id=\"I-will-help-those-who-call-me-for-help\"><a href=\"#I-will-help-those-who-call-me-for-help\" class=\"headerlink\" title=\"I will help those who call me for help.\"></a>I will help those who call me for help.</h3><h3 id=\"I-will-harm-no-white-woman\"><a href=\"#I-will-harm-no-white-woman\" class=\"headerlink\" title=\"I will harm no white woman.\"></a>I will harm no white woman.</h3><h3 id=\"I-will-help-my-brother-knight\"><a href=\"#I-will-help-my-brother-knight\" class=\"headerlink\" title=\"I will help my brother knight.\"></a>I will help my brother knight.</h3><h3 id=\"I-will-be-true-to-my-friends\"><a href=\"#I-will-be-true-to-my-friends\" class=\"headerlink\" title=\"I will be true to my friends.\"></a>I will be true to my friends.</h3><h3 id=\"I-will-be-faithful-in-love\"><a href=\"#I-will-be-faithful-in-love\" class=\"headerlink\" title=\"I will be faithful in love.\"></a>I will be faithful in love.</h3>","excerpt":"","more":"<h3 id=\"I-will-be-kind-to-the-weak\"><a href=\"#I-will-be-kind-to-the-weak\" class=\"headerlink\" title=\"I will be kind to the weak.\"></a>I will be kind to the weak.</h3><h3 id=\"I-will-be-brave-and-against-the-strong\"><a href=\"#I-will-be-brave-and-against-the-strong\" class=\"headerlink\" title=\"I will be brave and against the strong.\"></a>I will be brave and against the strong.</h3><h3 id=\"I-will-fight-the-all-who-do-wrong\"><a href=\"#I-will-fight-the-all-who-do-wrong\" class=\"headerlink\" title=\"I will fight the all who do wrong.\"></a>I will fight the all who do wrong.</h3><h3 id=\"I-will-fight-for-those-who-cannot-fight\"><a href=\"#I-will-fight-for-those-who-cannot-fight\" class=\"headerlink\" title=\"I will fight for those who cannot fight.\"></a>I will fight for those who cannot fight.</h3><h3 id=\"I-will-help-those-who-call-me-for-help\"><a href=\"#I-will-help-those-who-call-me-for-help\" class=\"headerlink\" title=\"I will help those who call me for help.\"></a>I will help those who call me for help.</h3><h3 id=\"I-will-harm-no-white-woman\"><a href=\"#I-will-harm-no-white-woman\" class=\"headerlink\" title=\"I will harm no white woman.\"></a>I will harm no white woman.</h3><h3 id=\"I-will-help-my-brother-knight\"><a href=\"#I-will-help-my-brother-knight\" class=\"headerlink\" title=\"I will help my brother knight.\"></a>I will help my brother knight.</h3><h3 id=\"I-will-be-true-to-my-friends\"><a href=\"#I-will-be-true-to-my-friends\" class=\"headerlink\" title=\"I will be true to my friends.\"></a>I will be true to my friends.</h3><h3 id=\"I-will-be-faithful-in-love\"><a href=\"#I-will-be-faithful-in-love\" class=\"headerlink\" title=\"I will be faithful in love.\"></a>I will be faithful in love.</h3>"},{"title":"解决问题的思路和思想才是关键。","id":"478","date":"2016-01-28T15:45:53.000Z","_content":"\n技术的积累只是时间问题。\n\n运维1年有感。\n\n&nbsp;","source":"_posts/old_post_wp/thoughts.md","raw":"---\ntitle: 解决问题的思路和思想才是关键。\ntags:\n  - 思\nid: 478\ncategories:\n  - 随笔\ndate: 2016-01-28 23:45:53\n---\n\n技术的积累只是时间问题。\n\n运维1年有感。\n\n&nbsp;","slug":"old_post_wp/thoughts","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbl90060uyxup950wutp","content":"<p>技术的积累只是时间问题。</p>\n<p>运维1年有感。</p>\n<p>&nbsp;</p>\n","excerpt":"","more":"<p>技术的积累只是时间问题。</p>\n<p>运维1年有感。</p>\n<p>&nbsp;</p>\n"},{"title":"ubuntu 14.04.3 安装rtl8192cu 无线网卡驱动","date":"2016-03-25T02:28:59.000Z","_content":"\n都在这里面\n[https://github.com/pvaret/rtl8192cu-fixes](https://github.com/pvaret/rtl8192cu-fixes)","source":"_posts/old_post_wp/ubuntu 14.04.3 安装rtl8192cu.md","raw":"---\ntitle: ubuntu 14.04.3 安装rtl8192cu 无线网卡驱动\npermalink: ubuntu-rt1819cu\ntags:\n  - linux\ncategories:\n  - Docs\ndate: 2016-03-25 10:28:59\n---\n\n都在这里面\n[https://github.com/pvaret/rtl8192cu-fixes](https://github.com/pvaret/rtl8192cu-fixes)","slug":"ubuntu-rt1819cu","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadblb0064uyxuwqck675m","content":"<p>都在这里面<br><a href=\"https://github.com/pvaret/rtl8192cu-fixes\" target=\"_blank\" rel=\"external\">https://github.com/pvaret/rtl8192cu-fixes</a></p>\n","excerpt":"","more":"<p>都在这里面<br><a href=\"https://github.com/pvaret/rtl8192cu-fixes\">https://github.com/pvaret/rtl8192cu-fixes</a></p>\n"},{"title":"ubuntu 永久DNS设置","date":"2016-08-31T06:30:12.000Z","_content":"\n如果简单修改 /etc/resolv.conf, 在机器重启后，会失效，您的修改会被默认配置覆盖掉。\n\n比较持久的做法是，\n``` bash\nsudo vim /etc/resolvconf/resolv.conf.d/tail\n```\n增加2条\n``` plain\nnameserver 114.114.114.114\nnameserver 119.29.29.29\n```\n然后重启一下名称服务 \n\n``` bash\nsudo /etc/init.d/resolvconf restart\n```\n","source":"_posts/old_post_wp/ubuntu DNS配置.md","raw":"---\ntitle: ubuntu 永久DNS设置\npermalink: resolv-config\ntags:\n  - linux\n  - config\ncategories:\n  - Docs\ndate: 2016-08-31 14:30:12\n---\n\n如果简单修改 /etc/resolv.conf, 在机器重启后，会失效，您的修改会被默认配置覆盖掉。\n\n比较持久的做法是，\n``` bash\nsudo vim /etc/resolvconf/resolv.conf.d/tail\n```\n增加2条\n``` plain\nnameserver 114.114.114.114\nnameserver 119.29.29.29\n```\n然后重启一下名称服务 \n\n``` bash\nsudo /etc/init.d/resolvconf restart\n```\n","slug":"resolv-config","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadbld0067uyxuo5jg36us","content":"<p>如果简单修改 /etc/resolv.conf, 在机器重启后，会失效，您的修改会被默认配置覆盖掉。</p>\n<p>比较持久的做法是，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/resolvconf/resolv.conf.d/tail</div></pre></td></tr></table></figure></p>\n<p>增加2条<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nameserver 114.114.114.114</div><div class=\"line\">nameserver 119.29.29.29</div></pre></td></tr></table></figure></p>\n<p>然后重启一下名称服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/resolvconf restart</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>如果简单修改 /etc/resolv.conf, 在机器重启后，会失效，您的修改会被默认配置覆盖掉。</p>\n<p>比较持久的做法是，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/resolvconf/resolv.conf.d/tail</div></pre></td></tr></table></figure></p>\n<p>增加2条<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nameserver 114.114.114.114</div><div class=\"line\">nameserver 119.29.29.29</div></pre></td></tr></table></figure></p>\n<p>然后重启一下名称服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/resolvconf restart</div></pre></td></tr></table></figure>\n"},{"title":"一篇写的很不错的ubuntu下的shadowsocks client配置博客","date":"2016-08-31T07:02:13.000Z","_content":"\n原贴地址直接粘贴\n[点击链接，坐飞机](https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html)","source":"_posts/old_post_wp/ubuntu下的shadowsocks.md","raw":"title: 一篇写的很不错的ubuntu下的shadowsocks client配置博客\npermalink: ubuntu-shadowsocks-client\ncategories:\n  - Docs\ndate: 2016-08-31 15:02:13\ntags:\n  - Tips\n  \n---\n\n原贴地址直接粘贴\n[点击链接，坐飞机](https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html)","slug":"ubuntu-shadowsocks-client","published":1,"updated":"2016-10-25T09:09:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadble006auyxu45i90yk8","content":"<p>原贴地址直接粘贴<br><a href=\"https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html\" target=\"_blank\" rel=\"external\">点击链接，坐飞机</a></p>\n","excerpt":"","more":"<p>原贴地址直接粘贴<br><a href=\"https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html\">点击链接，坐飞机</a></p>\n"},{"title":"ubuntu下的shell坑","date":"2016-05-03T07:26:58.000Z","_content":"\n今天使用一个nginx日志切割脚本做日志切割工作，有一句定义log文件名数组的就是\n``` plain\n log_files_name=(www.belle8.com nginx_error)\n```\n然后测试的时候使用sh 去执行总是不行报错Syntax error: “(” unexpected\n因为我每次都是使用sh 去执行脚本\n换成bash 去执行脚本就行了。\n就是sh和bash还是存在差异的。","source":"_posts/old_post_wp/ubuntu下的shell坑.md","raw":"---\ntitle: ubuntu下的shell坑\npermalink: ubuntu-tips\ntags:\n  - shell\ncategories:\n  - Docs\ndate: 2016-05-03 15:26:58\n---\n\n今天使用一个nginx日志切割脚本做日志切割工作，有一句定义log文件名数组的就是\n``` plain\n log_files_name=(www.belle8.com nginx_error)\n```\n然后测试的时候使用sh 去执行总是不行报错Syntax error: “(” unexpected\n因为我每次都是使用sh 去执行脚本\n换成bash 去执行脚本就行了。\n就是sh和bash还是存在差异的。","slug":"ubuntu-tips","published":1,"updated":"2016-10-24T02:44:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadblf006euyxu1yy1zzez","content":"<p>今天使用一个nginx日志切割脚本做日志切割工作，有一句定义log文件名数组的就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">log_files_name=(www.belle8.com nginx_error)</div></pre></td></tr></table></figure></p>\n<p>然后测试的时候使用sh 去执行总是不行报错Syntax error: “(” unexpected<br>因为我每次都是使用sh 去执行脚本<br>换成bash 去执行脚本就行了。<br>就是sh和bash还是存在差异的。</p>\n","excerpt":"","more":"<p>今天使用一个nginx日志切割脚本做日志切割工作，有一句定义log文件名数组的就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">log_files_name=(www.belle8.com nginx_error)</div></pre></td></tr></table></figure></p>\n<p>然后测试的时候使用sh 去执行总是不行报错Syntax error: “(” unexpected<br>因为我每次都是使用sh 去执行脚本<br>换成bash 去执行脚本就行了。<br>就是sh和bash还是存在差异的。</p>\n"},{"title":"vim 配置tab为4个空格","date":"2015-12-09T08:07:11.000Z","_content":"\n在用户目录下新建\n``` bash\nvim ~/.vimrc\n```\n添加以下代码后，重启vim即可实现按TAB产生4个空格\n``` bash\nset ts=4  \nset expandtab\n```\n以后再文档里在详细研究vim的配置.\n","source":"_posts/old_post_wp/vim使用.md","raw":"---\ntitle: vim 配置tab为4个空格\npermalink: vim-tab-4-space\ntags:\n  - linux\n  - 优化\ncategories:\n  - Docs\ndate: 2015-12-09 16:07:11\n---\n\n在用户目录下新建\n``` bash\nvim ~/.vimrc\n```\n添加以下代码后，重启vim即可实现按TAB产生4个空格\n``` bash\nset ts=4  \nset expandtab\n```\n以后再文档里在详细研究vim的配置.\n","slug":"vim-tab-4-space","published":1,"updated":"2016-10-25T08:51:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciupadblg006huyxugrg8alpl","content":"<p>在用户目录下新建<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.vimrc</div></pre></td></tr></table></figure></p>\n<p>添加以下代码后，重启vim即可实现按TAB产生4个空格<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> ts=4  </div><div class=\"line\"><span class=\"built_in\">set</span> expandtab</div></pre></td></tr></table></figure></p>\n<p>以后再文档里在详细研究vim的配置.</p>\n","excerpt":"","more":"<p>在用户目录下新建<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.vimrc</div></pre></td></tr></table></figure></p>\n<p>添加以下代码后，重启vim即可实现按TAB产生4个空格<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> ts=4  </div><div class=\"line\"><span class=\"built_in\">set</span> expandtab</div></pre></td></tr></table></figure></p>\n<p>以后再文档里在详细研究vim的配置.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciupadaqh0007uyxullo03fq2","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadaqo000cuyxui8b2rl2s"},{"post_id":"ciupadaq20000uyxu8mgpaye8","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadaqp000guyxulqr4q3lp"},{"post_id":"ciupadaq70002uyxujhlxpbtn","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadaqq000juyxuiaco3ndj"},{"post_id":"ciupadaqp000huyxur1f98dk7","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadaqt000quyxuz2qm9nnz"},{"post_id":"ciupadaqf0006uyxuk1d1ky2e","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadaqw000uuyxum1x4v0t6"},{"post_id":"ciupadaqr000kuyxuqgq2afll","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadaqz000xuyxu9vtjdekg"},{"post_id":"ciupadaqs000ouyxulft2dz3c","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadar00010uyxu3i9xsygh"},{"post_id":"ciupadaqj0008uyxuagl8259x","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadar20014uyxuls5wbr7s"},{"post_id":"ciupadaqu000ruyxut1k0qa6t","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadar30018uyxu6lefkjxf"},{"post_id":"ciupadaqn000buyxumgp5sgu2","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadar5001cuyxuq6zar7eu"},{"post_id":"ciupadaqz000yuyxuge5g42ly","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadar7001euyxu7yetoscm"},{"post_id":"ciupadar10012uyxuirm47ma6","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadar7001huyxua5di6vax"},{"post_id":"ciupadaqo000duyxumyme23g5","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadar7001iuyxuehy86rwv"},{"post_id":"ciupadar20015uyxux8k3j501","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadar8001luyxu9r1cr6le"},{"post_id":"ciupadar4001auyxu53cdlo2y","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadar8001muyxu6rtj41sk"},{"post_id":"ciupadaqw000wuyxua4uprktz","category_id":"ciupadar30016uyxukhxudga9","_id":"ciupadar9001ouyxuw05zv11c"},{"post_id":"ciupadbiy002euyxu43c9uiu3","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbj5002juyxursq96t0j"},{"post_id":"ciupadbj0002fuyxuulk40n9u","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbj7002muyxuqj7q3mlk"},{"post_id":"ciupadbj4002huyxuqpu1tokm","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbj8002quyxu84mwe38v"},{"post_id":"ciupadbj6002kuyxumgwse8lh","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbja002tuyxues5274in"},{"post_id":"ciupadbj7002nuyxu2gxk82lv","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjc002wuyxu3da5746k"},{"post_id":"ciupadbj9002ruyxusbj5plwb","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbje002zuyxulj946mb9"},{"post_id":"ciupadbja002uuyxun48zb5n5","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjh0032uyxupk7y72my"},{"post_id":"ciupadbjd002xuyxuvlv0y9s8","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadbji0036uyxunsh0fhcv"},{"post_id":"ciupadbjf0030uyxub8bksoas","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjl0039uyxuvpulf1df"},{"post_id":"ciupadbjh0033uyxul6qk9yux","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjn003cuyxu9j53k0kj"},{"post_id":"ciupadbjj0037uyxu1t3biwd8","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjq003guyxuopt73og5"},{"post_id":"ciupadbjn003duyxuh1fbz3s8","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjt003luyxuk18ruib6"},{"post_id":"ciupadbjq003huyxun24ekk2o","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbjy003ouyxuucd809zo"},{"post_id":"ciupadbjs003juyxuexjlan87","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbk0003ruyxut8jr6txk"},{"post_id":"ciupadbjv003nuyxu2ocjjvrs","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbk3003uuyxuykswweo5"},{"post_id":"ciupadbjy003quyxugo68imzh","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbk5003yuyxuawzuav65"},{"post_id":"ciupadbk1003tuyxury0bmyjn","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbki0041uyxu2pnwnx4n"},{"post_id":"ciupadbk3003wuyxua8x5b1jy","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkj0044uyxubm60gh2j"},{"post_id":"ciupadbk50040uyxur8woijz8","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkl0048uyxujbf4kpae"},{"post_id":"ciupadbki0043uyxu8uz1h2qr","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkn004buyxuv46r333f"},{"post_id":"ciupadbkj0046uyxuvmibu9pf","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkp004euyxup4i7fphx"},{"post_id":"ciupadbkl004auyxucs5iijwu","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkq004huyxu1rmyj81w"},{"post_id":"ciupadbko004duyxuyff6nuks","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkr004kuyxuz5eyikax"},{"post_id":"ciupadbkp004guyxud71grl1g","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbks004ouyxu9k8j17lk"},{"post_id":"ciupadbkq004juyxuebwgfpmp","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkt004ruyxuxizko72w"},{"post_id":"ciupadbkr004muyxutz5yczvi","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbku004uuyxuj6akairt"},{"post_id":"ciupadbks004quyxu7uesvyg1","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkx004xuyxukzr62c6i"},{"post_id":"ciupadbkt004tuyxutpqlccbb","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbky0050uyxu921s2lan"},{"post_id":"ciupadbku004wuyxuc1x3uid5","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkz0053uyxupqgm67o5"},{"post_id":"ciupadbkx004zuyxu7p5kur73","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbkz0056uyxuoqeskylr"},{"post_id":"ciupadbky0052uyxu3rf0ymqw","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl00059uyxukik0ty24"},{"post_id":"ciupadbkz0055uyxuiei2rkpz","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl1005cuyxuz74f5n44"},{"post_id":"ciupadbkz0058uyxujne89x7b","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl2005fuyxu093xq0sr"},{"post_id":"ciupadbl0005buyxuui9zd8kc","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl4005iuyxuphcsbm5v"},{"post_id":"ciupadbl1005euyxu3asem6e1","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl5005luyxu7y2enj67"},{"post_id":"ciupadbl2005huyxuve0evtli","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl6005ouyxuly0dm4r4"},{"post_id":"ciupadbl4005kuyxumva9d8sf","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl7005suyxu7833etyq"},{"post_id":"ciupadbl5005nuyxu8kam0x3y","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl8005vuyxugm8fpjrb"},{"post_id":"ciupadbl6005quyxu2ddsw9zb","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbl9005yuyxu8ca6i117"},{"post_id":"ciupadbl7005uuyxuxumhn3tn","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadblb0062uyxu4csn8muv"},{"post_id":"ciupadbl8005xuyxuids4ibao","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadblc0065uyxunpomj0zc"},{"post_id":"ciupadbl90060uyxup950wutp","category_id":"ciupadaqo000euyxuqqsfb8bj","_id":"ciupadble0068uyxus6s9llvq"},{"post_id":"ciupadblb0064uyxuwqck675m","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadblf006cuyxupx8g7isp"},{"post_id":"ciupadbld0067uyxuo5jg36us","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadblg006fuyxurezvb9i4"},{"post_id":"ciupadble006auyxu45i90yk8","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadblh006iuyxuezrtdd9d"},{"post_id":"ciupadblf006euyxu1yy1zzez","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbli006kuyxuwk8682mr"},{"post_id":"ciupadblg006huyxugrg8alpl","category_id":"ciupadaqa0004uyxute49jjc2","_id":"ciupadbli006muyxudvg8e9m5"}],"PostTag":[{"post_id":"ciupadaq20000uyxu8mgpaye8","tag_id":"ciupadaqe0005uyxuzytjn4gt","_id":"ciupadaqq000iuyxug78cs87r"},{"post_id":"ciupadaq20000uyxu8mgpaye8","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadaqr000luyxuh9u1tqqq"},{"post_id":"ciupadaqf0006uyxuk1d1ky2e","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadaqt000puyxu43sh1qrb"},{"post_id":"ciupadaqs000ouyxulft2dz3c","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadaqw000tuyxu4u8u7cfd"},{"post_id":"ciupadaqh0007uyxullo03fq2","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadar20013uyxuq5wck1cs"},{"post_id":"ciupadaqh0007uyxullo03fq2","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadar30017uyxugz5mabhf"},{"post_id":"ciupadar10012uyxuirm47ma6","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadar5001buyxujdu1ghck"},{"post_id":"ciupadaqj0008uyxuagl8259x","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadar7001duyxuld87o2r1"},{"post_id":"ciupadaqn000buyxumgp5sgu2","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadar7001guyxu4x5vje6x"},{"post_id":"ciupadaqo000duyxumyme23g5","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadar8001kuyxudyfamg6d"},{"post_id":"ciupadaqp000huyxur1f98dk7","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadar9001puyxug0t5ti9f"},{"post_id":"ciupadaqp000huyxur1f98dk7","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadar9001quyxu928ejdvx"},{"post_id":"ciupadaqr000kuyxuqgq2afll","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadara001tuyxutbtgp84r"},{"post_id":"ciupadaqr000kuyxuqgq2afll","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadara001uuyxu3l0x1ryh"},{"post_id":"ciupadaqr000kuyxuqgq2afll","tag_id":"ciupadar9001ruyxuwtlhbrzm","_id":"ciupadarb001wuyxuzgv0ray9"},{"post_id":"ciupadaqu000ruyxut1k0qa6t","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadarb001xuyxuwrl3lmua"},{"post_id":"ciupadaqu000ruyxut1k0qa6t","tag_id":"ciupadara001suyxuqjd1xxak","_id":"ciupadari001zuyxux2vtiahn"},{"post_id":"ciupadaqw000wuyxua4uprktz","tag_id":"ciupadarb001vuyxur35d992y","_id":"ciupadark0021uyxut13giaqt"},{"post_id":"ciupadaqw000wuyxua4uprktz","tag_id":"ciupadarb001yuyxuf19437sy","_id":"ciupadark0022uyxulybr5dp3"},{"post_id":"ciupadaqz000yuyxuge5g42ly","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadarl0025uyxujvae6lwa"},{"post_id":"ciupadaqz000yuyxuge5g42ly","tag_id":"ciupadark0023uyxunj0aj6w3","_id":"ciupadarl0026uyxuis9v6vte"},{"post_id":"ciupadar20015uyxux8k3j501","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadarm0028uyxu1p56mzrw"},{"post_id":"ciupadar20015uyxux8k3j501","tag_id":"ciupadarl0024uyxumq2bva18","_id":"ciupadarm0029uyxutezfmvx1"},{"post_id":"ciupadar20015uyxux8k3j501","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadarm002auyxudq71bmi6"},{"post_id":"ciupadar20015uyxux8k3j501","tag_id":"ciupadaqe0005uyxuzytjn4gt","_id":"ciupadarm002buyxu3x9f8pvs"},{"post_id":"ciupadar4001auyxu53cdlo2y","tag_id":"ciupadarl0027uyxumdrnxeer","_id":"ciupadarm002cuyxuo5454z66"},{"post_id":"ciupadbj0002fuyxuulk40n9u","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbj5002iuyxu3foqsvij"},{"post_id":"ciupadbj0002fuyxuulk40n9u","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadbj7002luyxu6e4omsse"},{"post_id":"ciupadbj0002fuyxuulk40n9u","tag_id":"ciupadara001suyxuqjd1xxak","_id":"ciupadbj8002puyxuqdvfthe6"},{"post_id":"ciupadbj0002fuyxuulk40n9u","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbja002suyxukm19de9i"},{"post_id":"ciupadbj4002huyxuqpu1tokm","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadbjc002vuyxus5ffoesv"},{"post_id":"ciupadbj4002huyxuqpu1tokm","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbje002yuyxug99sbhcl"},{"post_id":"ciupadbiy002euyxu43c9uiu3","tag_id":"ciupadaqe0005uyxuzytjn4gt","_id":"ciupadbjh0031uyxuex27tgv6"},{"post_id":"ciupadbiy002euyxu43c9uiu3","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbji0035uyxue8ttkm4w"},{"post_id":"ciupadbiy002euyxu43c9uiu3","tag_id":"ciupadbj4002guyxurq7b17ji","_id":"ciupadbjl0038uyxu3q6nt0x3"},{"post_id":"ciupadbj7002nuyxu2gxk82lv","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbjn003buyxuz81w2gs2"},{"post_id":"ciupadbj7002nuyxu2gxk82lv","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbjq003fuyxuwmnsxxcr"},{"post_id":"ciupadbj9002ruyxusbj5plwb","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbjr003iuyxu46jgc8g8"},{"post_id":"ciupadbj9002ruyxusbj5plwb","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadbjt003muyxuth4zoibm"},{"post_id":"ciupadbja002uuyxun48zb5n5","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbjy003puyxu5yfv31l3"},{"post_id":"ciupadbja002uuyxun48zb5n5","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbk1003suyxukd0rrxdg"},{"post_id":"ciupadbj6002kuyxumgwse8lh","tag_id":"ciupadbj8002ouyxuuj0smqhd","_id":"ciupadbk3003vuyxu07jg2en4"},{"post_id":"ciupadbjd002xuyxuvlv0y9s8","tag_id":"ciupadaqp000fuyxuy7mnb3h8","_id":"ciupadbk5003zuyxuvkwrrwhz"},{"post_id":"ciupadbjj0037uyxu1t3biwd8","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbki0042uyxuy1d4gv97"},{"post_id":"ciupadbjj0037uyxu1t3biwd8","tag_id":"ciupadbj8002ouyxuuj0smqhd","_id":"ciupadbkj0045uyxutec5i96n"},{"post_id":"ciupadbjf0030uyxub8bksoas","tag_id":"ciupadbji0034uyxuezgdyq62","_id":"ciupadbkl0049uyxufy77fbci"},{"post_id":"ciupadbjf0030uyxub8bksoas","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbko004cuyxukb6g5t3g"},{"post_id":"ciupadbjn003duyxuh1fbz3s8","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbkp004fuyxuep0nqwgu"},{"post_id":"ciupadbjn003duyxuh1fbz3s8","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadbkq004iuyxup309rmf8"},{"post_id":"ciupadbjh0033uyxul6qk9yux","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbkr004luyxujcqk0zrv"},{"post_id":"ciupadbjh0033uyxul6qk9yux","tag_id":"ciupadbjp003euyxuovry72an","_id":"ciupadbks004puyxuffjtubde"},{"post_id":"ciupadbjs003juyxuexjlan87","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbkt004suyxukbcusr4r"},{"post_id":"ciupadbjs003juyxuexjlan87","tag_id":"ciupadarl0027uyxumdrnxeer","_id":"ciupadbku004vuyxufxodx3nk"},{"post_id":"ciupadbjv003nuyxu2ocjjvrs","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbkx004yuyxu1xyydm3s"},{"post_id":"ciupadbjv003nuyxu2ocjjvrs","tag_id":"ciupadar9001ruyxuwtlhbrzm","_id":"ciupadbky0051uyxushg7vsjk"},{"post_id":"ciupadbjy003quyxugo68imzh","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbkz0054uyxurapqdv8e"},{"post_id":"ciupadbjy003quyxugo68imzh","tag_id":"ciupadaqe0005uyxuzytjn4gt","_id":"ciupadbkz0057uyxu2b1ldean"},{"post_id":"ciupadbjq003huyxun24ekk2o","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadbl0005auyxu3qe7x0dy"},{"post_id":"ciupadbjq003huyxun24ekk2o","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbl1005duyxuzgogz9oj"},{"post_id":"ciupadbjq003huyxun24ekk2o","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbl2005guyxuiqfor4wx"},{"post_id":"ciupadbjq003huyxun24ekk2o","tag_id":"ciupadbjt003kuyxul40yc6an","_id":"ciupadbl4005juyxuisbs1z27"},{"post_id":"ciupadbk3003wuyxua8x5b1jy","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbl5005muyxur4p3vrhd"},{"post_id":"ciupadbki0043uyxu8uz1h2qr","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbl6005puyxul8naswtz"},{"post_id":"ciupadbki0043uyxu8uz1h2qr","tag_id":"ciupadbk5003xuyxuqg1aptku","_id":"ciupadbl7005tuyxugm0ymbrl"},{"post_id":"ciupadbki0043uyxu8uz1h2qr","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbl8005wuyxurqp73nxu"},{"post_id":"ciupadbk1003tuyxury0bmyjn","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbl9005zuyxudb820tta"},{"post_id":"ciupadbk1003tuyxury0bmyjn","tag_id":"ciupadbk5003xuyxuqg1aptku","_id":"ciupadblb0063uyxukx6reoj5"},{"post_id":"ciupadbk1003tuyxury0bmyjn","tag_id":"ciupadar9001ruyxuwtlhbrzm","_id":"ciupadblc0066uyxunbwfvchl"},{"post_id":"ciupadbk1003tuyxury0bmyjn","tag_id":"ciupadbj8002ouyxuuj0smqhd","_id":"ciupadble0069uyxuwgy1jmcx"},{"post_id":"ciupadbkj0046uyxuvmibu9pf","tag_id":"ciupadbk5003xuyxuqg1aptku","_id":"ciupadblf006duyxuczx8kqzh"},{"post_id":"ciupadbkj0046uyxuvmibu9pf","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadblg006guyxugnb5h46l"},{"post_id":"ciupadbkl004auyxucs5iijwu","tag_id":"ciupadbk5003xuyxuqg1aptku","_id":"ciupadblh006juyxuc4fwmwtk"},{"post_id":"ciupadbkl004auyxucs5iijwu","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbli006luyxucpm98tqj"},{"post_id":"ciupadbkl004auyxucs5iijwu","tag_id":"ciupadara001suyxuqjd1xxak","_id":"ciupadbli006nuyxuf1m1zgqj"},{"post_id":"ciupadbk50040uyxur8woijz8","tag_id":"ciupadbk5003xuyxuqg1aptku","_id":"ciupadbli006ouyxuvkgdmvhb"},{"post_id":"ciupadbk50040uyxur8woijz8","tag_id":"ciupadaqe0005uyxuzytjn4gt","_id":"ciupadbli006puyxucfeoecdy"},{"post_id":"ciupadbko004duyxuyff6nuks","tag_id":"ciupadbjp003euyxuovry72an","_id":"ciupadbli006quyxux8cliwkm"},{"post_id":"ciupadbkp004guyxud71grl1g","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbli006ruyxudbgmbx3q"},{"post_id":"ciupadbkp004guyxud71grl1g","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadbli006suyxukg5uk399"},{"post_id":"ciupadbkr004muyxutz5yczvi","tag_id":"ciupadbj8002ouyxuuj0smqhd","_id":"ciupadbli006tuyxuz0e5o3vw"},{"post_id":"ciupadbks004quyxu7uesvyg1","tag_id":"ciupadbj8002ouyxuuj0smqhd","_id":"ciupadbli006uuyxua5gtbs6k"},{"post_id":"ciupadbkt004tuyxutpqlccbb","tag_id":"ciupadbj8002ouyxuuj0smqhd","_id":"ciupadbli006vuyxubcc0on5g"},{"post_id":"ciupadbkq004juyxuebwgfpmp","tag_id":"ciupadbks004nuyxu749rbrze","_id":"ciupadblj006wuyxu2b0o4i7d"},{"post_id":"ciupadbkq004juyxuebwgfpmp","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadblj006xuyxuiod0pa1d"},{"post_id":"ciupadbku004wuyxuc1x3uid5","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblj006yuyxufgcz13rm"},{"post_id":"ciupadbku004wuyxuc1x3uid5","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadblj006zuyxu3n5rkshj"},{"post_id":"ciupadbku004wuyxuc1x3uid5","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadblj0070uyxuw44gzl4u"},{"post_id":"ciupadbkx004zuyxu7p5kur73","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadblj0071uyxucw8lmal7"},{"post_id":"ciupadbky0052uyxu3rf0ymqw","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadblj0072uyxuohd7je9f"},{"post_id":"ciupadbkz0055uyxuiei2rkpz","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadblj0073uyxu98s1ivw3"},{"post_id":"ciupadbkz0055uyxuiei2rkpz","tag_id":"ciupadaqe0005uyxuzytjn4gt","_id":"ciupadblj0074uyxuk2m35naq"},{"post_id":"ciupadbkz0058uyxujne89x7b","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadblj0075uyxucftm1lbi"},{"post_id":"ciupadbl0005buyxuui9zd8kc","tag_id":"ciupadark0020uyxu2ba4nigp","_id":"ciupadblj0076uyxudpyluwzi"},{"post_id":"ciupadbl1005euyxu3asem6e1","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadblj0077uyxuwmxjp8qv"},{"post_id":"ciupadbl2005huyxuve0evtli","tag_id":"ciupadark0023uyxunj0aj6w3","_id":"ciupadblj0078uyxuniuyhf7q"},{"post_id":"ciupadbl2005huyxuve0evtli","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblj0079uyxura2lo0ng"},{"post_id":"ciupadbl4005kuyxumva9d8sf","tag_id":"ciupadark0023uyxunj0aj6w3","_id":"ciupadblj007auyxu3qn8689u"},{"post_id":"ciupadbl4005kuyxumva9d8sf","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblj007buyxu49wv9wmt"},{"post_id":"ciupadbl6005quyxu2ddsw9zb","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblj007cuyxuh2c1jwyy"},{"post_id":"ciupadbl6005quyxu2ddsw9zb","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadblj007duyxugjvxy2oc"},{"post_id":"ciupadbl6005quyxu2ddsw9zb","tag_id":"ciupadar9001ruyxuwtlhbrzm","_id":"ciupadblj007euyxukilwkeda"},{"post_id":"ciupadbl7005uuyxuxumhn3tn","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblj007fuyxul6bqln9z"},{"post_id":"ciupadbl7005uuyxuxumhn3tn","tag_id":"ciupadar9001ruyxuwtlhbrzm","_id":"ciupadblk007guyxudqkfjgoa"},{"post_id":"ciupadbl5005nuyxu8kam0x3y","tag_id":"ciupadark0023uyxunj0aj6w3","_id":"ciupadblk007huyxuqlhopou3"},{"post_id":"ciupadbl5005nuyxu8kam0x3y","tag_id":"ciupadbl7005ruyxua5lobcxz","_id":"ciupadblk007iuyxujuyxqlqf"},{"post_id":"ciupadblb0064uyxuwqck675m","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblk007juyxu0ndye1y4"},{"post_id":"ciupadbld0067uyxuo5jg36us","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadblk007kuyxukl4ummiu"},{"post_id":"ciupadbld0067uyxuo5jg36us","tag_id":"ciupadaqs000nuyxuop7hl89y","_id":"ciupadblk007luyxumtcpu7yn"},{"post_id":"ciupadbl8005xuyxuids4ibao","tag_id":"ciupadblb0061uyxufg85fri8","_id":"ciupadblk007muyxuogc5ak5k"},{"post_id":"ciupadble006auyxu45i90yk8","tag_id":"ciupadarl0027uyxumdrnxeer","_id":"ciupadblk007nuyxuqoh46rr8"},{"post_id":"ciupadblf006euyxu1yy1zzez","tag_id":"ciupadar7001juyxue2wy3krs","_id":"ciupadblk007ouyxua75gurst"},{"post_id":"ciupadbl90060uyxup950wutp","tag_id":"ciupadblb0061uyxufg85fri8","_id":"ciupadbll007puyxusrvb31nk"},{"post_id":"ciupadblg006huyxugrg8alpl","tag_id":"ciupadaql000auyxuz1oupyp8","_id":"ciupadbll007quyxuqkd6wmvm"},{"post_id":"ciupadblg006huyxugrg8alpl","tag_id":"ciupadbl7005ruyxua5lobcxz","_id":"ciupadbll007ruyxu48kahs6v"}],"Tag":[{"name":"errors","_id":"ciupadaqe0005uyxuzytjn4gt"},{"name":"linux","_id":"ciupadaql000auyxuz1oupyp8"},{"name":"随便写写","_id":"ciupadaqp000fuyxuy7mnb3h8"},{"name":"config","_id":"ciupadaqs000nuyxuop7hl89y"},{"name":"shell","_id":"ciupadar7001juyxue2wy3krs"},{"name":"实用工具","_id":"ciupadar9001ruyxuwtlhbrzm"},{"name":"monitor","_id":"ciupadara001suyxuqjd1xxak"},{"name":"markdown","_id":"ciupadarb001vuyxur35d992y"},{"name":"blog","_id":"ciupadarb001yuyxuf19437sy"},{"name":"python","_id":"ciupadark0020uyxu2ba4nigp"},{"name":"saltstack","_id":"ciupadark0023uyxunj0aj6w3"},{"name":"docker","_id":"ciupadarl0024uyxumq2bva18"},{"name":"Tips","_id":"ciupadarl0027uyxumdrnxeer"},{"name":"lvm","_id":"ciupadbj4002guyxurq7b17ji"},{"name":"OSX","_id":"ciupadbj8002ouyxuuj0smqhd"},{"name":"git","_id":"ciupadbji0034uyxuezgdyq62"},{"name":"nginx","_id":"ciupadbjp003euyxuovry72an"},{"name":"elk","_id":"ciupadbjt003kuyxul40yc6an"},{"name":"mysql","_id":"ciupadbk5003xuyxuqg1aptku"},{"name":"openwrt","_id":"ciupadbks004nuyxu749rbrze"},{"name":"优化","_id":"ciupadbl7005ruyxua5lobcxz"},{"name":"思","_id":"ciupadblb0061uyxufg85fri8"}]}}